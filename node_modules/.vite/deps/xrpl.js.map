{
  "version": 3,
  "sources": ["../../.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.js", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/errors.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/common/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/AccountRoot.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/crypto.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/utils.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/utils/shared.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/utils/browser.ts", "../../.pnpm/@scure+base@1.2.6/node_modules/@scure/base/index.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/_md.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/_u64.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/sha2.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/sha256.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/internal/normalizeInput.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/internal/wrapNoble.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/sha256/browser.ts", "../../.pnpm/ripple-address-codec@5.0.0/node_modules/ripple-address-codec/src/utils.ts", "../../.pnpm/ripple-address-codec@5.0.0/node_modules/ripple-address-codec/src/xrp-codec.ts", "../../.pnpm/ripple-address-codec@5.0.0/node_modules/ripple-address-codec/src/index.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/dist/enums/definitions.json", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/bytes.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/serdes/binary-serializer.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/serialized-type.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/constants.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/field.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/xrpl-definitions-base.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/index.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/utils.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/hash.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/hash-160.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/account-id.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/serdes/binary-parser.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/currency.ts", "../../.pnpm/bignumber.js@9.3.0/node_modules/bignumber.js/bignumber.js", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/hash-192.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/amount.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/blob.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/hash-128.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/hash-256.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/issue.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/path-set.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/uint.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/uint-64.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/st-object.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/st-array.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/uint-16.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/uint-32.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/uint-8.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/vector-256.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/xchain-bridge.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/types/index.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/hash-prefixes.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/sha512.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/sha512/browser.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/hashes.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/binary.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/shamap.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/ledger-hashes.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/quality.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/coretypes.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/enums/xrpl-definitions.ts", "../../.pnpm/ripple-binary-codec@2.3.0/node_modules/ripple-binary-codec/src/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/utils/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/common.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/accountSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMClawback.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMDeposit.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMWithdraw.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/MPTokenAuthorize.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/MPTokenIssuanceCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/MPTokenIssuanceSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenCreateOffer.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenMint.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/offerCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/payment.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/paymentChannelClaim.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/trustSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainModifyBridge.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/utils/flags.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/legacy.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/ripemd160.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/ripemd160/browser.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/hmac.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/utils.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/modular.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/curve.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/_shortw_utils.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/secp256k1.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/utils.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/utils/Sha512.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/signing-schemes/secp256k1/utils.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/utils/assert.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/utils/getAlgorithmFromKey.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/signing-schemes/secp256k1/index.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/edwards.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/abstract/montgomery.ts", "../../.pnpm/@noble+curves@1.9.2/node_modules/@noble/curves/src/ed25519.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/signing-schemes/ed25519/index.ts", "../../.pnpm/ripple-keypairs@2.0.0/node_modules/ripple-keypairs/src/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/derive.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/collections.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/xrpConversion.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/getBalanceChanges.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/metadata.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/getNFTokenID.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/getXChainClaimID.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/HashPrefix.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/sha512Half.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/SHAMap/node.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/SHAMap/LeafNode.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/SHAMap/InnerNode.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/SHAMap/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/hashLedger.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/ledgerSpaces.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/hashes/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/parseNFTokenID.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/quality.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/signPaymentChannelClaim.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/stringConversion.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/timeConversion.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/verifyPaymentChannelClaim.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/utils/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/submit.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/utils.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/getFeeXrp.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/autofill.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/balances.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/Offer.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/sugar/getOrderbook.ts", "../../.pnpm/@scure+bip32@1.7.0/node_modules/@scure/bip32/index.ts", "../../.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/src/pbkdf2.ts", "../../.pnpm/@scure+bip39@1.6.0/node_modules/@scure/bip39/index.js", "../../.pnpm/@scure+bip39@1.6.0/node_modules/@scure/bip39/wordlists/english.js", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/ECDSA.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/accountDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMBid.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/AMMVote.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/checkCancel.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/checkCash.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/checkCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/clawback.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/CredentialAccept.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/CredentialCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/CredentialDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/depositPreauth.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/DIDDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/DIDSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/escrowCancel.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/escrowCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/escrowFinish.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/MPTokenIssuanceDestroy.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenAcceptOffer.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenBurn.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenCancelOffer.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/NFTokenModify.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/offerCancel.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/oracleDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/oracleSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/paymentChannelCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/paymentChannelFund.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/permissionedDomainDelete.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/permissionedDomainSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/setRegularKey.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/signerListSet.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/ticketCreate.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainAccountCreateCommit.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainAddAccountCreateAttestation.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainAddClaimAttestation.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainClaim.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainCommit.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainCreateBridge.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/XChainCreateClaimID.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/transaction.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/enableAmendment.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/transactions/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/dist/npm/Wallet/rfc1751Words.json", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/rfc1751.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/signer.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/defaultFaucets.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/fundWallet.ts", "../../.pnpm/@xrplf+isomorphic@1.0.1/node_modules/@xrplf/isomorphic/src/ws/browser.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/ConnectionManager.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/ExponentialBackoff.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/RequestManager.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/connection.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/partialPayment.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/client/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/Amendments.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/FeeSettings.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/NegativeUNL.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/RippleState.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/SignerList.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/ledger/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/dist/npm/models/methods/index.js", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/models/index.ts", "../../.pnpm/@xrplf+secret-numbers@1.0.0/node_modules/@xrplf/secret-numbers/src/utils/index.ts", "../../.pnpm/@xrplf+secret-numbers@1.0.0/node_modules/@xrplf/secret-numbers/src/schema/Account.ts", "../../.pnpm/@xrplf+secret-numbers@1.0.0/node_modules/@xrplf/secret-numbers/src/index.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/Wallet/walletFromSecretNumbers.ts", "../../.pnpm/xrpl@4.2.5/node_modules/xrpl/src/index.ts"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "/* eslint-disable max-classes-per-file -- Errors can be defined in the same file */\n/**\n * Base Error class for xrpl.js. All Errors thrown by xrpl.js should throw\n * XrplErrors.\n *\n * @category Errors\n */\nclass XrplError extends Error {\n  public readonly name: string\n  public readonly message: string\n  public readonly data?: unknown\n\n  /**\n   * Construct an XrplError.\n   *\n   * @param message - The error message.\n   * @param data - The data that caused the error.\n   */\n  public constructor(message = '', data?: unknown) {\n    super(message)\n\n    this.name = this.constructor.name\n    this.message = message\n    this.data = data\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- `captureStackTrace` can be null in browsers\n    if (Error.captureStackTrace != null) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n\n  /**\n   * Converts the Error to a human-readable String form.\n   *\n   * @returns The String output of the Error.\n   */\n  public toString(): string {\n    let result = `[${this.name}(${this.message}`\n    if (this.data) {\n      result += `, ${JSON.stringify(this.data)}`\n    }\n    result += ')]'\n    return result\n  }\n\n  /**\n   * Console.log in node uses util.inspect on object, and util.inspect allows\n   * us to customize its output:\n   * https://nodejs.org/api/util.html#util_custom_inspect_function_on_objects.\n   *\n   * @returns The String output of the Error.\n   */\n  public inspect(): string {\n    return this.toString()\n  }\n}\n\n/**\n * Error thrown when rippled responds with an error.\n *\n * @category Errors\n */\nclass RippledError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js cannot specify error type.\n *\n * @category Errors\n */\nclass UnexpectedError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js has an error with connection to rippled.\n *\n * @category Errors\n */\nclass ConnectionError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js is not connected to rippled server.\n *\n * @category Errors\n */\nclass NotConnectedError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js has disconnected from rippled server.\n *\n * @category Errors\n */\nclass DisconnectedError extends ConnectionError {}\n\n/**\n * Error thrown when rippled is not initialized.\n *\n * @category Errors\n */\nclass RippledNotInitializedError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js times out.\n *\n * @category Errors\n */\nclass TimeoutError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js sees a response in the wrong format.\n *\n * @category Errors\n */\nclass ResponseFormatError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js sees a malformed transaction.\n *\n * @category Errors\n */\nclass ValidationError extends XrplError {}\n\n/**\n * Error thrown when a client cannot generate a wallet from the testnet/devnet\n * faucets, or when the client cannot infer the faucet URL (i.e. when the Client\n * is connected to mainnet).\n *\n * @category Errors\n */\nclass XRPLFaucetError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js cannot retrieve a transaction, ledger, account, etc.\n * From rippled.\n *\n * @category Errors\n */\nclass NotFoundError extends XrplError {\n  /**\n   * Construct an XrplError.\n   *\n   * @param message - The error message. Defaults to \"Not found\".\n   */\n  public constructor(message = 'Not found') {\n    super(message)\n  }\n}\n\nexport {\n  XrplError,\n  UnexpectedError,\n  ConnectionError,\n  RippledError,\n  NotConnectedError,\n  DisconnectedError,\n  RippledNotInitializedError,\n  TimeoutError,\n  ResponseFormatError,\n  ValidationError,\n  NotFoundError,\n  XRPLFaucetError,\n}\n", "export const RIPPLED_API_V1 = 1\nexport const RIPPLED_API_V2 = 2\nexport const DEFAULT_API_VERSION = RIPPLED_API_V2\nexport type APIVersion = typeof RIPPLED_API_V1 | typeof RIPPLED_API_V2\nexport type LedgerIndex = number | ('validated' | 'closed' | 'current')\n\nexport interface XRP {\n  currency: 'XRP'\n  issuer?: never\n}\n\nexport interface IssuedCurrency {\n  currency: string\n  issuer: string\n}\n\nexport interface MPTCurrency {\n  mpt_issuance_id: string\n}\n\nexport type Currency = IssuedCurrency | MPTCurrency | XRP\n\nexport interface IssuedCurrencyAmount extends IssuedCurrency {\n  value: string\n}\n\nexport interface MPTAmount {\n  mpt_issuance_id: string\n  value: string\n}\n\nexport type Amount = IssuedCurrencyAmount | string\n\nexport interface Balance {\n  currency: string\n  issuer?: string\n  value: string\n}\n\nexport interface Signer {\n  Signer: {\n    Account: string\n    TxnSignature: string\n    SigningPubKey: string\n  }\n}\n\nexport interface Memo {\n  Memo: {\n    MemoData?: string\n    MemoType?: string\n    MemoFormat?: string\n  }\n}\n\nexport type StreamType =\n  | 'consensus'\n  | 'ledger'\n  | 'manifests'\n  | 'peer_status'\n  | 'transactions'\n  | 'transactions_proposed'\n  | 'server'\n  | 'validations'\n\nexport interface PathStep {\n  account?: string\n  currency?: string\n  issuer?: string\n}\n\nexport type Path = PathStep[]\n\n/**\n * The object that describes the signer in SignerEntries.\n */\nexport interface SignerEntry {\n  /**\n   * The object that describes the signer in SignerEntries.\n   */\n  SignerEntry: {\n    /**\n     * An XRP Ledger address whose signature contributes to the multi-signature.\n     * It does not need to be a funded address in the ledger.\n     */\n    Account: string\n    /**\n     * The weight of a signature from this signer.\n     * A multi-signature is only valid if the sum weight of the signatures provided meets\n     * or exceeds the signer list's SignerQuorum value.\n     */\n    SignerWeight: number\n    /**\n     * An arbitrary 256-bit (32-byte) field that can be used to identify the signer, which\n     * may be useful for smart contracts, or for identifying who controls a key in a large\n     * organization.\n     */\n    WalletLocator?: string\n  }\n}\n\n/**\n * This information is added to Transactions in request responses, but is not part\n * of the canonical Transaction information on ledger. These fields are denoted with\n * lowercase letters to indicate this in the rippled responses.\n */\nexport interface ResponseOnlyTxInfo {\n  /**\n   * The date/time when this transaction was included in a validated ledger.\n   */\n  date?: number\n  /**\n   * An identifying hash value unique to this transaction, as a hex string.\n   */\n  hash?: string\n  /**\n   * The sequence number of the ledger that included this transaction.\n   */\n  ledger_index?: number\n  /**\n   * The hash of the ledger included this transaction.\n   */\n  ledger_hash?: string\n  /**\n   * @deprecated Alias for ledger_index.\n   */\n  inLedger?: number\n}\n\n/**\n * One offer that might be returned from either an {@link NFTBuyOffersRequest}\n * or an {@link NFTSellOffersRequest}.\n *\n * @category Responses\n */\nexport interface NFTOffer {\n  amount: Amount\n  flags: number\n  nft_offer_index: string\n  owner: string\n  destination?: string\n  expiration?: number\n}\n\n/**\n * One NFToken that might be returned from an {@link NFTInfoResponse}\n *\n * @category Responses\n */\nexport interface NFToken {\n  nft_id: string\n  ledger_index: number\n  owner: string\n  is_burned: boolean\n  flags: number\n  transfer_fee: number\n  issuer: string\n  nft_taxon: number\n  nft_serial: number\n  uri: string\n}\n\nexport interface AuthAccount {\n  AuthAccount: {\n    Account: string\n  }\n}\n\nexport interface AuthorizeCredential {\n  Credential: {\n    /** The issuer of the credential. */\n    Issuer: string\n\n    /** A hex-encoded value to identify the type of credential from the issuer. */\n    CredentialType: string\n  }\n}\n\nexport interface XChainBridge {\n  LockingChainDoor: string\n  LockingChainIssue: Currency\n  IssuingChainDoor: string\n  IssuingChainIssue: Currency\n}\n\n/**\n * A PriceData object represents the price information for a token pair.\n *\n */\nexport interface PriceData {\n  PriceData: {\n    /**\n     * The primary asset in a trading pair. Any valid identifier, such as a stock symbol, bond CUSIP, or currency code is allowed.\n     * For example, in the BTC/USD pair, BTC is the base asset; in 912810RR9/BTC, 912810RR9 is the base asset.\n     */\n    BaseAsset: string\n\n    /**\n     * The quote asset in a trading pair. The quote asset denotes the price of one unit of the base asset. For example, in the\n     * BTC/USD pair,BTC is the base asset; in 912810RR9/BTC, 912810RR9 is the base asset.\n     */\n    QuoteAsset: string\n\n    /**\n     * The asset price after applying the Scale precision level. It's not included if the last update transaction didn't include\n     * the BaseAsset/QuoteAsset pair.\n     */\n    AssetPrice?: number | string\n\n    /**\n     * The scaling factor to apply to an asset price. For example, if Scale is 6 and original price is 0.155, then the scaled\n     * price is 155000. Valid scale ranges are 0-10. It's not included if the last update transaction didn't include the\n     * BaseAsset/QuoteAsset pair.\n     */\n    Scale?: number\n  }\n}\n", "import { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The AccountRoot object type describes a single account, its settings, and\n * XRP balance.\n *\n * @category Ledger Entries\n */\nexport default interface AccountRoot extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'AccountRoot'\n  /** The identifying (classic) address of this account. */\n  Account: string\n  /** The account's current XRP balance in drops, represented as a string. */\n  Balance: string\n  /** A bit-map of boolean flags enabled for this account. */\n  Flags: number\n  /**\n   * The number of objects this account owns in the ledger, which contributes\n   * to its owner reserve.\n   */\n  OwnerCount: number\n  /** The sequence number of the next valid transaction for this account. */\n  Sequence: number\n  /**\n   * The identifying hash of the transaction most recently sent by this\n   * account. This field must be enabled to use the AccountTxnID transaction\n   * field. To enable it, send an AccountSet transaction with the.\n   * `asfAccountTxnID` flag enabled.\n   */\n  AccountTxnID?: string\n  /**\n   * The ledger entry ID of the corresponding AMM ledger entry.\n   * Set during account creation; cannot be modified.\n   * If present, indicates that this is a special AMM AccountRoot; always omitted on non-AMM accounts.\n   */\n  AMMID?: string\n  /**\n   * A domain associated with this account. In JSON, this is the hexadecimal\n   * for the ASCII representation of the domain.\n   */\n  Domain?: string\n  /** The md5 hash of an email address. */\n  EmailHash?: string\n  /**\n   * A public key that may be used to send encrypted messages to this account\n   * in JSON, uses hexadecimal.\n   */\n  MessageKey?: string\n  /**\n   * The address of a key pair that can be used to sign transactions for this\n   * account instead of the master key. Use a SetRegularKey transaction to\n   * change this value.\n   */\n  RegularKey?: string\n  /**\n   * How many Tickets this account owns in the ledger. This is updated\n   * automatically to ensure that the account stays within the hard limit of 250.\n   * Tickets at a time.\n   */\n  TicketCount?: number\n  /**\n   * How many significant digits to use for exchange rates of Offers involving\n   * currencies issued by this address. Valid values are 3 to 15, inclusive.\n   */\n  TickSize?: number\n  /**\n   * A transfer fee to charge other users for sending currency issued by this\n   * account to each other.\n   */\n  TransferRate?: number\n  /** An arbitrary 256-bit value that users can set. */\n  WalletLocator?: string\n  /** Total NFTokens this account's issued that have been burned. This number is always equal or less than MintedNFTokens. */\n  BurnedNFTokens?: number\n  /** The sequence that the account first minted an NFToken */\n  FirstNFTSequence: number\n  /** Total NFTokens have been minted by and on behalf of this account. */\n  MintedNFTokens?: number\n  /** Another account that can mint NFTokens on behalf of this account. */\n  NFTokenMinter?: string\n}\n\n/**\n * A boolean map of AccountRootFlags for simplified code checking AccountRoot settings.\n * For submitting settings flags to the ledger, use AccountRootFlags instead.\n */\nexport interface AccountRootFlagsInterface {\n  /**\n   * The account has used its free SetRegularKey transaction.\n   */\n  lsfPasswordSpent?: boolean\n  /**\n   * Requires incoming payments to specify a Destination Tag.\n   */\n  lsfRequireDestTag?: boolean\n  /**\n   * This account must individually approve other users for those users to hold this account's issued currencies.\n   */\n  lsfRequireAuth?: boolean\n  /**\n   * Client applications should not send XRP to this account. Not enforced by rippled.\n   */\n  lsfDisallowXRP?: boolean\n  /**\n   * Disallows use of the master key to sign transactions for this account.\n   */\n  lsfDisableMaster?: boolean\n  /**\n   * This address cannot freeze trust lines connected to it. Once enabled, cannot be disabled.\n   */\n  lsfNoFreeze?: boolean\n  /**\n   * All assets issued by this address are frozen.\n   */\n  lsfGlobalFreeze?: boolean\n  /**\n   * Enable rippling on this address's trust lines by default. Required for issuing addresses; discouraged for others.\n   */\n  lsfDefaultRipple?: boolean\n  /**\n   * This account can only receive funds from transactions it sends, and from preauthorized accounts.\n   * (It has DepositAuth enabled.)\n   */\n  lsfDepositAuth?: boolean\n  /**\n   * This account is an Automated Market Maker (AMM) instance.\n   */\n  lsfAMM?: boolean\n  /**\n   * Disallow incoming NFTOffers from other accounts.\n   */\n  lsfDisallowIncomingNFTokenOffer?: boolean\n  /**\n   * Disallow incoming Checks from other accounts.\n   */\n  lsfDisallowIncomingCheck?: boolean\n  /**\n   * Disallow incoming PayChannels from other accounts.\n   */\n  lsfDisallowIncomingPayChan?: boolean\n  /**\n   * Disallow incoming Trustlines from other accounts.\n   */\n  lsfDisallowIncomingTrustline?: boolean\n  /**\n   * This address can claw back issued IOUs. Once enabled, cannot be disabled.\n   */\n  lsfAllowTrustLineClawback?: boolean\n}\n\nexport enum AccountRootFlags {\n  /**\n   * The account has used its free SetRegularKey transaction.\n   */\n  lsfPasswordSpent = 0x00010000,\n  /**\n   * Requires incoming payments to specify a Destination Tag.\n   */\n  lsfRequireDestTag = 0x00020000,\n  /**\n   * This account must individually approve other users for those users to hold this account's issued currencies.\n   */\n  lsfRequireAuth = 0x00040000,\n  /**\n   * Client applications should not send XRP to this account. Not enforced by rippled.\n   */\n  lsfDisallowXRP = 0x00080000,\n  /**\n   * Disallows use of the master key to sign transactions for this account.\n   */\n  lsfDisableMaster = 0x00100000,\n  /**\n   * This address cannot freeze trust lines connected to it. Once enabled, cannot be disabled.\n   */\n  lsfNoFreeze = 0x00200000,\n  /**\n   * All assets issued by this address are frozen.\n   */\n  lsfGlobalFreeze = 0x00400000,\n  /**\n   * Enable rippling on this address's trust lines by default. Required for issuing addresses; discouraged for others.\n   */\n  lsfDefaultRipple = 0x00800000,\n  /**\n   * This account can only receive funds from transactions it sends, and from preauthorized accounts.\n   * (It has DepositAuth enabled.)\n   */\n  lsfDepositAuth = 0x01000000,\n  /**\n   * This account is an Automated Market Maker (AMM) instance.\n   */\n  lsfAMM = 0x02000000,\n  /**\n   * Disallow incoming NFTOffers from other accounts.\n   */\n  lsfDisallowIncomingNFTokenOffer = 0x04000000,\n  /**\n   * Disallow incoming Checks from other accounts.\n   */\n  lsfDisallowIncomingCheck = 0x08000000,\n  /**\n   * Disallow incoming PayChannels from other accounts.\n   */\n  lsfDisallowIncomingPayChan = 0x10000000,\n  /**\n   * Disallow incoming Trustlines from other accounts.\n   */\n  lsfDisallowIncomingTrustline = 0x20000000,\n  /**\n   * This address can claw back issued IOUs. Once enabled, cannot be disabled.\n   */\n  lsfAllowTrustLineClawback = 0x80000000,\n}\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { concatBytes } from '@noble/hashes/utils'\n\nexport const HEX_REGEX = /^[A-F0-9]*$/iu\n\nexport function concat(views: Uint8Array[]): Uint8Array {\n  return concatBytes(...views)\n}\n\nexport function equal(buf1: Uint8Array, buf2: Uint8Array): boolean {\n  if (buf1.byteLength !== buf2.byteLength) {\n    return false\n  }\n  const dv1 = new Int8Array(buf1)\n  const dv2 = new Int8Array(buf2)\n  for (let i = 0; i !== buf1.byteLength; i++) {\n    if (dv1[i] !== dv2[i]) {\n      return false\n    }\n  }\n  return true\n}\n", "import {\n  bytesToHex as nobleBytesToHex,\n  randomBytes as nobleRandomBytes,\n} from '@noble/hashes/utils'\nimport type {\n  BytesToHexFn,\n  HexToBytesFn,\n  HexToStringFn,\n  RandomBytesFn,\n  StringToHexFn,\n} from './types'\nimport { HEX_REGEX } from './shared'\n\n/* eslint-disable func-style -- Typed to ensure uniformity between node and browser implementations and docs */\nexport const bytesToHex: typeof BytesToHexFn = (bytes) => {\n  const hex = nobleBytesToHex(\n    bytes instanceof Uint8Array ? bytes : Uint8Array.from(bytes),\n  )\n  return hex.toUpperCase()\n}\n\n// A clone of hexToBytes from @noble/hashes without the length checks. This allows us to do our own checks.\nexport const hexToBytes: typeof HexToBytesFn = (hex): Uint8Array => {\n  const len = hex.length\n  const array = new Uint8Array(len / 2)\n  if (!HEX_REGEX.test(hex)) {\n    throw new Error('Invalid hex string')\n  }\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    const hexByte = hex.slice(j, j + 2)\n    const byte = Number.parseInt(hexByte, 16)\n    if (Number.isNaN(byte) || byte < 0) {\n      throw new Error('Invalid byte sequence')\n    }\n    array[i] = byte\n  }\n  return array\n}\n\nexport const hexToString: typeof HexToStringFn = (\n  hex: string,\n  encoding = 'utf8',\n): string => {\n  return new TextDecoder(encoding).decode(hexToBytes(hex))\n}\n\nexport const stringToHex: typeof StringToHexFn = (string: string): string => {\n  return bytesToHex(new TextEncoder().encode(string))\n}\n/* eslint-enable func-style */\n\nexport const randomBytes: typeof RandomBytesFn = nobleRandomBytes\nexport * from './shared'\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder extends Coder<Uint8Array, string> {\n  encode: (data: Uint8Array) => string;\n  decode: (str: string) => Uint8Array;\n}\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\nfunction isArrayOf(isString: boolean, arr: any[]) {\n  if (!Array.isArray(arr)) return false;\n  if (arr.length === 0) return true;\n  if (isString) {\n    return arr.every((item) => typeof item === 'string');\n  } else {\n    return arr.every((item) => Number.isSafeInteger(item));\n  }\n}\n\n// no abytes: seems to have 10% slowdown. Why?!\n\nfunction afn(input: Function): input is Function {\n  if (typeof input !== 'function') throw new Error('function expected');\n  return true;\n}\n\nfunction astr(label: string, input: unknown): input is string {\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\n  return true;\n}\n\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\n}\n\nfunction aArr(input: any[]) {\n  if (!Array.isArray(input)) throw new Error('array expected');\n}\nfunction astrArr(label: string, input: string[]) {\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label: string, input: number[]) {\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\n}\n\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\n// like <string, number>, <number, bytes>, <bytes, float>\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\n// Extract info from Coder type\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\n// Generic function for arrays\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\ntype Last<T> = T extends [...any[], infer U] ? U : never;\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\n\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\n};\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\n  const id = (a: any) => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\n  return { encode, decode };\n}\n\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters: string | string[]): Coder<number[], string[]> {\n  // mapping 1 to \"b\"\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n  const len = lettersA.length;\n  astrArr('alphabet', lettersA);\n\n  // mapping \"b\" to 1\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\n  return {\n    encode: (digits: number[]) => {\n      aArr(digits);\n      return digits.map((i) => {\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n          throw new Error(\n            `alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`\n          );\n        return lettersA[i]!;\n      });\n    },\n    decode: (input: string[]): number[] => {\n      aArr(input);\n      return input.map((letter) => {\n        astr('alphabet.decode', letter);\n        const i = indexes.get(letter);\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n        return i;\n      });\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = ''): Coder<string[], string> {\n  astr('join', separator);\n  return {\n    encode: (from) => {\n      astrArr('join.decode', from);\n      return from.join(separator);\n    },\n    decode: (to) => {\n      astr('join.decode', to);\n      return to.split(separator);\n    },\n  };\n}\n\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\n  anumber(bits);\n  astr('padding', chr);\n  return {\n    encode(data: string[]): string[] {\n      astrArr('padding.encode', data);\n      while ((data.length * bits) % 8) data.push(chr);\n      return data;\n    },\n    decode(input: string[]): string[] {\n      astrArr('padding.decode', input);\n      let end = input.length;\n      if ((end * bits) % 8)\n        throw new Error('padding: invalid, string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        const last = end - 1;\n        const byte = last * bits;\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\n      }\n      return input.slice(0, end);\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\n  afn(fn);\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\n}\n\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data: number[], from: number, to: number): number[] {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n  aArr(data);\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data, (d) => {\n    anumber(d);\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\n    return d;\n  });\n  const dlen = digits.length;\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < dlen; i++) {\n      const digit = digits[i]!;\n      const fromCarry = from * carry;\n      const digitBase = fromCarry + digit;\n      if (\n        !Number.isSafeInteger(digitBase) ||\n        fromCarry / from !== carry ||\n        digitBase - digit !== fromCarry\n      ) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      const div = digitBase / to;\n      carry = digitBase % to;\n      const rounded = Math.floor(div);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n        throw new Error('convertRadix: carry overflow');\n      if (!done) continue;\n      else if (!rounded) pos = i;\n      else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\n\nconst gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\n  from + (to - gcd(from, to));\nconst powers: number[] = /* @__PURE__ */ (() => {\n  let res = [];\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\n  return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\n  aArr(data);\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\n    );\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const max = powers[from]!;\n  const mask = powers[to]! - 1;\n  const res: number[] = [];\n  for (const n of data) {\n    anumber(n);\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = (carry << from) | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\n    const pow = powers[pos];\n    if (pow === undefined) throw new Error('invalid carry');\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = (carry << (to - pos)) & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num: number): Coder<Uint8Array, number[]> {\n  anumber(num);\n  const _256 = 2 ** 8;\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), _256, num);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix.decode', digits);\n      return Uint8Array.from(convertRadix(digits, num, _256));\n    },\n  };\n}\n\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\n  anumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n    throw new Error('radix2: carry overflow');\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix2.decode', digits);\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    },\n  };\n}\n\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\n  afn(fn);\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n\nfunction checksum(\n  len: number,\n  fn: (data: Uint8Array) => Uint8Array\n): Coder<Uint8Array, Uint8Array> {\n  anumber(len);\n  afn(fn);\n  return {\n    encode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const sum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(sum, data.length);\n      return res;\n    },\n    decode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const oldChecksum = data.slice(-len);\n      const newChecksum = fn(payload).slice(0, len);\n      for (let i = 0; i < len; i++)\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    },\n  };\n}\n\n// prettier-ignore\nexport const utils: { alphabet: typeof alphabet; chain: typeof chain; checksum: typeof checksum; convertRadix: typeof convertRadix; convertRadix2: typeof convertRadix2; radix: typeof radix; radix2: typeof radix2; join: typeof join; padding: typeof padding; } = {\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n\n// RFC 4648 aka RFC 3548\n// ---------------------\n\n/**\n * base16 encoding from RFC 4648.\n * @example\n * ```js\n * base16.encode(Uint8Array.from([0x12, 0xab]));\n * // => '12AB'\n * ```\n */\nexport const base16: BytesCoder = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\n\n/**\n * base32 encoding from RFC 4648. Has padding.\n * Use `base32nopad` for unpadded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ===='\n * base32.decode('CKVQ====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding.\n * Use `base32` for padded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ'\n * base32nopad.decode('CKVQ');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32nopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hexnopad` for unpadded version.\n * @example\n * ```js\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG===='\n * base32hex.decode('2ALG====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hex: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hex` for padded version.\n * @example\n * ```js\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG'\n * base32hexnopad.decode('2ALG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hexnopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Doug Crockford's version.\n * https://www.crockford.com/base32.html\n * @example\n * ```js\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ANG'\n * base32crockford.decode('2ANG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32crockford: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\n  join(''),\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\n);\n\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\n// prettier-ignore\nconst hasBase64Builtin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toBase64 === 'function' &&\n  typeof (Uint8Array as any).fromBase64 === 'function')();\n\nconst decodeBase64Builtin = (s: string, isUrl: boolean) => {\n  astr('base64', s);\n  const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;\n  const alphabet = isUrl ? 'base64url' : 'base64';\n  if (s.length > 0 && !re.test(s)) throw new Error('invalid base64');\n  return (Uint8Array as any).fromBase64(s, { alphabet, lastChunkHandling: 'strict' });\n};\n\n/**\n * base64 from RFC 4648. Padded.\n * Use `base64nopad` for unpadded version.\n * Also check out `base64url`, `base64urlnopad`.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64(); },\n  decode(s) { return decodeBase64Builtin(s, false); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  padding(6),\n  join('')\n);\n/**\n * base64 from RFC 4648. No padding.\n * Use `base64` for padded version.\n * @example\n * ```js\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64nopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64nopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\n * Use `base64urlnopad` for unpadded version.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64url.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64url: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64({ alphabet: 'base64url' }); },\n  decode(s) { return decodeBase64Builtin(s, true); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  padding(6),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\n * Use `base64url` for padded version.\n * @example\n * ```js\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64urlnopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64urlnopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  join('')\n);\n\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc: string) =>\n  chain(radix(58), alphabet(abc), join(''));\n\n/**\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n * @example\n * ```js\n * base58.decode('01abcdef');\n * // => '3UhJW'\n * ```\n */\nexport const base58: BytesCoder = genBase58(\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n);\n/**\n * base58: flickr version. Check out `base58`.\n */\nexport const base58flickr: BytesCoder = genBase58(\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n);\n/**\n * base58: XRP version. Check out `base58`.\n */\nexport const base58xrp: BytesCoder = genBase58(\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n);\n\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n/**\n * base58: XMR version. Check out `base58`.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr: BytesCoder = {\n  encode(data: Uint8Array) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\n    }\n    return res;\n  },\n  decode(str: string) {\n    let res: number[] = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  },\n};\n\n/**\n * Method, which creates base58check encoder.\n * Requires function, calculating sha256.\n */\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\n  chain(\n    checksum(4, (data) => sha256(sha256(data))),\n    base58\n  );\n\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check: (sha256: (data: Uint8Array) => Uint8Array) => BytesCoder =\n  createBase58check;\n\n// Bech32 code\n// -----------\nexport interface Bech32Decoded<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n}\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n  bytes: Uint8Array;\n}\n\nconst BECH_ALPHABET: Coder<number[], string> = chain(\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\n  join('')\n);\n\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre: number): number {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\n  }\n  return chk;\n}\n\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ (c >> 5);\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]!], 30, 5, false));\n}\n\nexport interface Bech32 {\n  encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit?: number | false\n  ): `${Lowercase<Prefix>}1${string}`;\n  decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\n  decodeToBytes(str: string): Bech32DecodedWithArray;\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\n  fromWords(to: number[]): Uint8Array;\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\n  toWords(from: Uint8Array): number[];\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n\n  function encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit: number | false = 90\n  ): `${Lowercase<Prefix>}1${string}` {\n    astr('bech32.encode prefix', prefix);\n    if (isBytes(words)) words = Array.from(words);\n    anumArr('bech32.encode', words);\n    const plen = prefix.length;\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\n    const actualLength = plen + 7 + words.length;\n    if (limit !== false && actualLength > limit)\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\n  }\n\n  function decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  function decode(str: string, limit?: number | false): Bech32Decoded;\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\n    astr('bech32.decode input', str);\n    const slen = str.length;\n    if (slen < 8 || (limit !== false && slen > limit))\n      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase())\n      throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1)\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return { prefix, words };\n  }\n\n  const decodeUnsafe = unsafeWrapper(decode);\n\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\n    const { prefix, words } = decode(str, false);\n    return { prefix, words, bytes: fromWords(words) };\n  }\n\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\n    return encode(prefix, toWords(bytes));\n  }\n\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords,\n  };\n}\n\n/**\n * bech32 from BIP 173. Operates on words.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32: Bech32 = genBech32('bech32');\n\n/**\n * bech32m from BIP 350. Operates on words.\n * It was to mitigate `bech32` weaknesses.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32m: Bech32 = genBech32('bech32m');\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * ```js\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n * ```\n */\nexport const utf8: BytesCoder = {\n  encode: (data) => new TextDecoder().decode(data),\n  decode: (str) => new TextEncoder().encode(str),\n};\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\n// prettier-ignore\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toHex === 'function' &&\n  typeof (Uint8Array as any).fromHex === 'function')();\n// prettier-ignore\nconst hexBuiltin: BytesCoder = {\n  encode(data) { abytes(data); return (data as any).toHex(); },\n  decode(s) { astr('hex', s); return (Uint8Array as any).fromHex(s); },\n};\n/**\n * hex string decoder. Uses built-in function, when available.\n * @example\n * ```js\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n * ```\n */\nexport const hex: BytesCoder = hasHexBuiltin\n  ? hexBuiltin\n  : chain(\n      radix2(4),\n      alphabet('0123456789abcdef'),\n      join(''),\n      normalize((s: string) => {\n        if (typeof s !== 'string' || s.length % 2 !== 0)\n          throw new TypeError(\n            `hex.decode: expected string, got ${typeof s} with length ${s.length}`\n          );\n        return s.toLowerCase();\n      })\n    );\n\nexport type SomeCoders = {\n  utf8: BytesCoder;\n  hex: BytesCoder;\n  base16: BytesCoder;\n  base32: BytesCoder;\n  base64: BytesCoder;\n  base64url: BytesCoder;\n  base58: BytesCoder;\n  base58xmr: BytesCoder;\n};\n// prettier-ignore\nconst CODERS: SomeCoders = {\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\ntype CoderType = keyof SomeCoders;\nconst coderTypeError =\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n\n/** @deprecated */\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\n\n/** @deprecated */\nexport const str: (type: CoderType, bytes: Uint8Array) => string = bytesToString; // as in python, but for bytes only\n\n/** @deprecated */\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\n/** @deprecated */\nexport const bytes: (type: CoderType, str: string) => Uint8Array = stringToBytes;\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n", "import { Input } from './types'\n\n/**\n * Normalize a string, number array, or Uint8Array to a string or Uint8Array.\n * Both node and noble lib functions accept these types.\n *\n * @param input - value to normalize\n */\nexport default function normalizeInput(input: Input): string | Uint8Array {\n  return Array.isArray(input) ? new Uint8Array(input) : input\n}\n", "import { CHash } from '@noble/hashes/utils'\nimport { Hash, HashFn, Input } from './types'\nimport normalizeInput from './normalizeInput'\n\n/**\n * Wrap a CHash object from @noble/hashes to provide a interface that is isomorphic\n *\n * @param chash - {CHash} hash function to wrap\n */\nexport default function wrapNoble(chash: CHash): HashFn {\n  function wrapped(input: Input): Uint8Array {\n    return chash(normalizeInput(input))\n  }\n\n  wrapped.create = (): Hash => {\n    const hash = chash.create()\n    return {\n      update(input: Input): Hash {\n        hash.update(normalizeInput(input))\n        return this\n      },\n      digest(): Uint8Array {\n        return hash.digest()\n      },\n    }\n  }\n  return wrapped\n}\n", "import { sha256 as nobleImpl } from '@noble/hashes/sha256'\n\nimport wrapNoble from '../internal/wrapNoble'\n\n/**\n * Wrap noble-libs's sha256 implementation in HashFn\n */\nexport const sha256 = wrapNoble(nobleImpl)\n", "export type ByteArray = number[] | Uint8Array\n\n/**\n * Check whether two sequences (e.g. Arrays of numbers) are equal.\n *\n * @param arr1 - One of the arrays to compare.\n * @param arr2 - The other array to compare.\n */\nexport function arrayEqual(arr1: ByteArray, arr2: ByteArray): boolean {\n  if (arr1.length !== arr2.length) {\n    return false\n  }\n  return arr1.every((value, index) => value === arr2[index])\n}\n\n/**\n * Check whether a value is a scalar\n *\n * @param val - The value to check.\n */\nfunction isScalar(val: ByteArray | number): val is number {\n  return typeof val === 'number'\n}\n\n/**\n * Concatenate all `arguments` into a single array. Each argument can be either\n * a single element or a sequence, which has a `length` property and supports\n * element retrieval via sequence[ix].\n *\n * > concatArgs(1, [2, 3], Uint8Array.from([4,5]), new Uint8Array([6, 7]));\n * [1,2,3,4,5,6,7]\n *\n * @param args - Concatenate of these args into a single array.\n * @returns Array of concatenated arguments\n */\n\nexport function concatArgs(...args: Array<number | ByteArray>): number[] {\n  return args.flatMap((arg) => {\n    return isScalar(arg) ? [arg] : Array.from(arg)\n  })\n}\n", "/**\n * Codec class\n */\n\nimport { base58xrp, BytesCoder } from '@scure/base'\nimport { sha256 } from '@xrplf/isomorphic/sha256'\n\nimport { arrayEqual, concatArgs, ByteArray } from './utils'\n\nclass Codec {\n  private readonly _sha256: (bytes: ByteArray) => Uint8Array\n  private readonly _codec: BytesCoder\n\n  public constructor(options: { sha256: (bytes: ByteArray) => Uint8Array }) {\n    this._sha256 = options.sha256\n    this._codec = base58xrp\n  }\n\n  /**\n   * Encoder.\n   *\n   * @param bytes - Uint8Array of data to encode.\n   * @param opts - Options object including the version bytes and the expected length of the data to encode.\n   */\n  public encode(\n    bytes: ByteArray,\n    opts: {\n      versions: number[]\n      expectedLength: number\n    },\n  ): string {\n    const versions = opts.versions\n    return this._encodeVersioned(bytes, versions, opts.expectedLength)\n  }\n\n  /**\n   * Decoder.\n   *\n   * @param base58string - Base58Check-encoded string to decode.\n   * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.\n   */\n  /* eslint-disable max-lines-per-function --\n   * TODO refactor */\n  public decode(\n    base58string: string,\n    opts: {\n      versions: Array<number | number[]>\n      expectedLength?: number\n      versionTypes?: ['ed25519', 'secp256k1']\n    },\n  ): {\n    version: number[]\n    bytes: Uint8Array\n    type: 'ed25519' | 'secp256k1' | null\n  } {\n    const versions = opts.versions\n    const types = opts.versionTypes\n\n    const withoutSum = this.decodeChecked(base58string)\n\n    if (versions.length > 1 && !opts.expectedLength) {\n      throw new Error(\n        'expectedLength is required because there are >= 2 possible versions',\n      )\n    }\n    const versionLengthGuess =\n      typeof versions[0] === 'number' ? 1 : versions[0].length\n    const payloadLength =\n      opts.expectedLength ?? withoutSum.length - versionLengthGuess\n    const versionBytes = withoutSum.slice(0, -payloadLength)\n    const payload = withoutSum.slice(-payloadLength)\n\n    for (let i = 0; i < versions.length; i++) {\n      /* eslint-disable @typescript-eslint/consistent-type-assertions --\n       * TODO refactor */\n      const version: number[] = Array.isArray(versions[i])\n        ? (versions[i] as number[])\n        : [versions[i] as number]\n      if (arrayEqual(versionBytes, version)) {\n        return {\n          version,\n          bytes: payload,\n          type: types ? types[i] : null,\n        }\n      }\n      /* eslint-enable @typescript-eslint/consistent-type-assertions */\n    }\n\n    throw new Error(\n      'version_invalid: version bytes do not match any of the provided version(s)',\n    )\n  }\n\n  public encodeChecked(bytes: ByteArray): string {\n    const check = this._sha256(this._sha256(bytes)).slice(0, 4)\n    return this._encodeRaw(Uint8Array.from(concatArgs(bytes, check)))\n  }\n\n  public decodeChecked(base58string: string): Uint8Array {\n    const intArray = this._decodeRaw(base58string)\n    if (intArray.byteLength < 5) {\n      throw new Error('invalid_input_size: decoded data must have length >= 5')\n    }\n    if (!this._verifyCheckSum(intArray)) {\n      throw new Error('checksum_invalid')\n    }\n    return intArray.slice(0, -4)\n  }\n\n  private _encodeVersioned(\n    bytes: ByteArray,\n    versions: number[],\n    expectedLength: number,\n  ): string {\n    if (!checkByteLength(bytes, expectedLength)) {\n      throw new Error(\n        'unexpected_payload_length: bytes.length does not match expectedLength.' +\n          ' Ensure that the bytes are a Uint8Array.',\n      )\n    }\n    return this.encodeChecked(concatArgs(versions, bytes))\n  }\n\n  private _encodeRaw(bytes: ByteArray): string {\n    return this._codec.encode(Uint8Array.from(bytes))\n  }\n  /* eslint-enable max-lines-per-function */\n\n  private _decodeRaw(base58string: string): Uint8Array {\n    return this._codec.decode(base58string)\n  }\n\n  private _verifyCheckSum(bytes: ByteArray): boolean {\n    const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4)\n    const checksum = bytes.slice(-4)\n    return arrayEqual(computed, checksum)\n  }\n}\n\n/**\n * XRP codec\n */\n\n// base58 encodings: https://xrpl.org/base58-encodings.html\n// Account address (20 bytes)\nconst ACCOUNT_ID = 0\n// Account public key (33 bytes)\nconst ACCOUNT_PUBLIC_KEY = 0x23\n// 33; Seed value (for secret keys) (16 bytes)\nconst FAMILY_SEED = 0x21\n// 28; Validation public key (33 bytes)\nconst NODE_PUBLIC = 0x1c\n\n// [1, 225, 75]\nconst ED25519_SEED = [0x01, 0xe1, 0x4b]\n\nconst codecOptions = {\n  sha256,\n}\n\nconst codecWithXrpAlphabet = new Codec(codecOptions)\n\nexport const codec = codecWithXrpAlphabet\n\n// entropy is a Uint8Array of size 16\n// type is 'ed25519' or 'secp256k1'\nexport function encodeSeed(\n  entropy: ByteArray,\n  type: 'ed25519' | 'secp256k1',\n): string {\n  if (!checkByteLength(entropy, 16)) {\n    throw new Error('entropy must have length 16')\n  }\n  const opts = {\n    expectedLength: 16,\n\n    // for secp256k1, use `FAMILY_SEED`\n    versions: type === 'ed25519' ? ED25519_SEED : [FAMILY_SEED],\n  }\n\n  // prefixes entropy with version bytes\n  return codecWithXrpAlphabet.encode(entropy, opts)\n}\n\nexport function decodeSeed(\n  seed: string,\n  opts: {\n    versionTypes: ['ed25519', 'secp256k1']\n    versions: Array<number | number[]>\n    expectedLength: number\n  } = {\n    versionTypes: ['ed25519', 'secp256k1'],\n    versions: [ED25519_SEED, FAMILY_SEED],\n    expectedLength: 16,\n  },\n): {\n  version: number[]\n  bytes: Uint8Array\n  type: 'ed25519' | 'secp256k1' | null\n} {\n  return codecWithXrpAlphabet.decode(seed, opts)\n}\n\nexport function encodeAccountID(bytes: ByteArray): string {\n  const opts = { versions: [ACCOUNT_ID], expectedLength: 20 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexport const encodeAddress = encodeAccountID\n/* eslint-enable import/no-unused-modules */\n\nexport function decodeAccountID(accountId: string): Uint8Array {\n  const opts = { versions: [ACCOUNT_ID], expectedLength: 20 }\n  return codecWithXrpAlphabet.decode(accountId, opts).bytes\n}\n\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexport const decodeAddress = decodeAccountID\n/* eslint-enable import/no-unused-modules */\n\nexport function decodeNodePublic(base58string: string): Uint8Array {\n  const opts = { versions: [NODE_PUBLIC], expectedLength: 33 }\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes\n}\n\nexport function encodeNodePublic(bytes: ByteArray): string {\n  const opts = { versions: [NODE_PUBLIC], expectedLength: 33 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\nexport function encodeAccountPublic(bytes: ByteArray): string {\n  const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\nexport function decodeAccountPublic(base58string: string): Uint8Array {\n  const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 }\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes\n}\n\nexport function isValidClassicAddress(address: string): boolean {\n  try {\n    decodeAccountID(address)\n  } catch (_error) {\n    return false\n  }\n  return true\n}\n\nfunction checkByteLength(bytes: ByteArray, expectedLength: number): boolean {\n  return 'byteLength' in bytes\n    ? bytes.byteLength === expectedLength\n    : bytes.length === expectedLength\n}\n", "import { concat, equal, hexToBytes } from '@xrplf/isomorphic/utils'\n\nimport {\n  codec,\n  encodeSeed,\n  decodeSeed,\n  encodeAccountID,\n  decodeAccountID,\n  encodeNodePublic,\n  decodeNodePublic,\n  encodeAccountPublic,\n  decodeAccountPublic,\n  isValidClassicAddress,\n} from './xrp-codec'\n\nconst PREFIX_BYTES = {\n  // 5, 68\n  main: Uint8Array.from([0x05, 0x44]),\n  // 4, 147\n  test: Uint8Array.from([0x04, 0x93]),\n}\n\nconst MAX_32_BIT_UNSIGNED_INT = 4294967295\n\nfunction classicAddressToXAddress(\n  classicAddress: string,\n  tag: number | false,\n  test: boolean,\n): string {\n  const accountId = decodeAccountID(classicAddress)\n  return encodeXAddress(accountId, tag, test)\n}\n\nfunction encodeXAddress(\n  accountId: Uint8Array,\n  tag: number | false,\n  test: boolean,\n): string {\n  if (accountId.length !== 20) {\n    // RIPEMD160 is 160 bits = 20 bytes\n    throw new Error('Account ID must be 20 bytes')\n  }\n  if (tag !== false && tag > MAX_32_BIT_UNSIGNED_INT) {\n    throw new Error('Invalid tag')\n  }\n  const theTag = tag || 0\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Passing null is a common js mistake\n  const flag = tag === false || tag == null ? 0 : 1\n  /* eslint-disable no-bitwise ---\n   * need to use bitwise operations here */\n  const bytes = concat([\n    test ? PREFIX_BYTES.test : PREFIX_BYTES.main,\n    accountId,\n    Uint8Array.from([\n      // 0x00 if no tag, 0x01 if 32-bit tag\n      flag,\n      // first byte\n      theTag & 0xff,\n      // second byte\n      (theTag >> 8) & 0xff,\n      // third byte\n      (theTag >> 16) & 0xff,\n      // fourth byte\n      (theTag >> 24) & 0xff,\n      0,\n      0,\n      0,\n      // four zero bytes (reserved for 64-bit tags)\n      0,\n    ]),\n  ])\n  /* eslint-enable no-bitwise */\n  return codec.encodeChecked(bytes)\n}\n\nfunction xAddressToClassicAddress(xAddress: string): {\n  classicAddress: string\n  tag: number | false\n  test: boolean\n} {\n  /* eslint-disable @typescript-eslint/naming-convention --\n   * TODO 'test' should be something like 'isTest', do this later\n   */\n  const { accountId, tag, test } = decodeXAddress(xAddress)\n  /* eslint-enable @typescript-eslint/naming-convention */\n  const classicAddress = encodeAccountID(accountId)\n  return {\n    classicAddress,\n    tag,\n    test,\n  }\n}\n\nfunction decodeXAddress(xAddress: string): {\n  accountId: Uint8Array\n  tag: number | false\n  test: boolean\n} {\n  const decoded = codec.decodeChecked(xAddress)\n  /* eslint-disable @typescript-eslint/naming-convention --\n   * TODO 'test' should be something like 'isTest', do this later\n   */\n  const test = isUint8ArrayForTestAddress(decoded)\n  /* eslint-enable @typescript-eslint/naming-convention */\n  const accountId = decoded.slice(2, 22)\n  const tag = tagFromUint8Array(decoded)\n  return {\n    accountId,\n    tag,\n    test,\n  }\n}\n\nfunction isUint8ArrayForTestAddress(buf: Uint8Array): boolean {\n  const decodedPrefix = buf.slice(0, 2)\n  if (equal(PREFIX_BYTES.main, decodedPrefix)) {\n    return false\n  }\n  if (equal(PREFIX_BYTES.test, decodedPrefix)) {\n    return true\n  }\n\n  throw new Error('Invalid X-address: bad prefix')\n}\n\nfunction tagFromUint8Array(buf: Uint8Array): number | false {\n  const flag = buf[22]\n  if (flag >= 2) {\n    // No support for 64-bit tags at this time\n    throw new Error('Unsupported X-address')\n  }\n  if (flag === 1) {\n    // Little-endian to big-endian\n    return buf[23] + buf[24] * 0x100 + buf[25] * 0x10000 + buf[26] * 0x1000000\n  }\n  if (flag !== 0) {\n    throw new Error('flag must be zero to indicate no tag')\n  }\n  if (!equal(hexToBytes('0000000000000000'), buf.slice(23, 23 + 8))) {\n    throw new Error('remaining bytes must be zero')\n  }\n  return false\n}\n\nfunction isValidXAddress(xAddress: string): boolean {\n  try {\n    decodeXAddress(xAddress)\n  } catch (_error) {\n    return false\n  }\n  return true\n}\n\nexport {\n  // Codec with XRP alphabet\n  codec,\n  // Encode entropy as a \"seed\"\n  encodeSeed,\n  // Decode a seed into an object with its version, type, and bytes\n  decodeSeed,\n  // Encode bytes as a classic address (r...)\n  encodeAccountID,\n  // Decode a classic address to its raw bytes\n  decodeAccountID,\n  // Encode bytes to XRP Ledger node public key format\n  encodeNodePublic,\n  // Decode an XRP Ledger node public key into its raw bytes\n  decodeNodePublic,\n  // Encode a public key, as for payment channels\n  encodeAccountPublic,\n  // Decode a public key, as for payment channels\n  decodeAccountPublic,\n  // Check whether a classic address (r...) is valid\n  isValidClassicAddress,\n  // Derive X-address from classic address, tag, and network ID\n  classicAddressToXAddress,\n  // Encode account ID, tag, and network ID to X-address\n  encodeXAddress,\n  // Decode X-address to account ID, tag, and network ID\n  xAddressToClassicAddress,\n  // Convert X-address to classic address, tag, and network ID\n  decodeXAddress,\n  // Check whether an X-address (X...) is valid\n  isValidXAddress,\n}\n", "{\n    \"FIELDS\": [\n        [\n            \"Generic\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 0,\n                \"type\": \"Unknown\"\n            }\n        ],\n        [\n            \"Invalid\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": -1,\n                \"type\": \"Unknown\"\n            }\n        ],\n        [\n            \"ObjectEndMarker\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"ArrayEndMarker\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"taker_gets_funded\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 258,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"taker_pays_funded\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 259,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LedgerEntryType\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"TransactionType\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"SignerWeight\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"TransferFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"TradingFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"DiscountedFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"Version\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"HookStateChangeCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"HookEmitCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"HookExecutionIndex\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"HookApiVersion\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 20,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"LedgerFixType\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"UInt16\"\n            }\n        ],\n        [\n            \"NetworkID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"Flags\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SourceTag\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"Sequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"PreviousTxnLgrSeq\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LedgerSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"CloseTime\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"ParentCloseTime\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SigningTime\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"Expiration\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"TransferRate\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"WalletSize\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"OwnerCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 13,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"DestinationTag\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 14,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LastUpdateTime\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 15,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"HighQualityIn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"HighQualityOut\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LowQualityIn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LowQualityOut\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"QualityIn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 20,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"QualityOut\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"StampEscrow\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"BondAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 23,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LoadFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"OfferSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"FirstLedgerSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 26,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"LastLedgerSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 27,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"TransactionIndex\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 28,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"OperationLimit\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 29,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"ReferenceFeeUnits\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 30,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"ReserveBase\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 31,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"ReserveIncrement\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 32,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SetFlag\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 33,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"ClearFlag\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 34,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SignerQuorum\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 35,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"CancelAfter\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 36,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"FinishAfter\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 37,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SignerListID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 38,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"SettleDelay\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 39,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"TicketCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 40,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"TicketSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 41,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"NFTokenTaxon\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 42,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"MintedNFTokens\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 43,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"BurnedNFTokens\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 44,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"HookStateCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 45,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"EmitGeneration\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 46,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"VoteWeight\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 48,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"FirstNFTokenSequence\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 50,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"OracleDocumentID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 51,\n                \"type\": \"UInt32\"\n            }\n        ],\n        [\n            \"IndexNext\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"IndexPrevious\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"BookNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"OwnerNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"BaseFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"ExchangeRate\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"LowNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"HighNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"DestinationNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"Cookie\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"ServerVersion\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"NFTokenOfferNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"EmitBurden\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 13,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"HookOn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"HookInstructionCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"HookReturnCode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"ReferenceCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"XChainClaimID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 20,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"XChainAccountCreateCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"XChainAccountClaimCount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"AssetPrice\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 23,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"MaximumAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"OutstandingAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"MPTAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 26,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"IssuerNode\",\n            {\n                \"nth\": 27,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"SubjectNode\",\n            {\n                \"nth\": 28,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"UInt64\"\n            }\n        ],\n        [\n            \"EmailHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Hash128\"\n            }\n        ],\n        [\n            \"LedgerHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"ParentHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"TransactionHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"AccountHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"PreviousTxnID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"LedgerIndex\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"WalletLocator\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"RootIndex\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"AccountTxnID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"NFTokenID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"EmitParentTxnID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"EmitNonce\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"EmitHookHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 13,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"AMMID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 14,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"BookDirectory\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"InvoiceID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"Nickname\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"Amendment\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"Digest\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"Channel\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"ConsensusHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 23,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"CheckID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"ValidatedHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"PreviousPageMin\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 26,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"NextPageMin\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 27,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"NFTokenBuyOffer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 28,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"NFTokenSellOffer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 29,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"HookStateKey\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 30,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"HookHash\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 31,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"HookNamespace\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 32,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"HookSetTxnID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 33,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"DomainID\",\n            {\n                \"nth\": 34,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"hash\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 257,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"index\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 258,\n                \"type\": \"Hash256\"\n            }\n        ],\n        [\n            \"Amount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"Balance\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LimitAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"TakerPays\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"TakerGets\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LowLimit\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"HighLimit\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"Fee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"SendMax\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"DeliverMin\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"Amount2\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"BidMin\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"BidMax\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 13,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"MinimumOffer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"RippleEscrow\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"DeliveredAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"NFTokenBrokerFee\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"BaseFeeDrops\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"ReserveBaseDrops\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 23,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"ReserveIncrementDrops\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LPTokenOut\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LPTokenIn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 26,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"EPrice\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 27,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"Price\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 28,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"SignatureReward\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 29,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"MinAccountCreateAmount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 30,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"LPTokenBalance\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 31,\n                \"type\": \"Amount\"\n            }\n        ],\n        [\n            \"PublicKey\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 1,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MessageKey\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 2,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"SigningPubKey\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 3,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"TxnSignature\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": false,\n                \"isVLEncoded\": true,\n                \"nth\": 4,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"URI\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 5,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Signature\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": false,\n                \"isVLEncoded\": true,\n                \"nth\": 6,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Domain\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 7,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"FundCode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 8,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"RemoveCode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 9,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"ExpireCode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 10,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"CreateCode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 11,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MemoType\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 12,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MemoData\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 13,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MemoFormat\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 14,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Fulfillment\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 16,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Condition\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 17,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MasterSignature\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": false,\n                \"isVLEncoded\": true,\n                \"nth\": 18,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"UNLModifyValidator\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 19,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"ValidatorToDisable\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 20,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"ValidatorToReEnable\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 21,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"HookStateData\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 22,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"HookReturnString\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 23,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"HookParameterName\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 24,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"HookParameterValue\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 25,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"DIDDocument\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 26,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Data\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 27,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"AssetClass\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 28,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Provider\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 29,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"MPTokenMetadata\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 30,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"CredentialType\",\n            {\n                \"nth\": 31,\n                \"isVLEncoded\": true,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"Blob\"\n            }\n        ],\n        [\n            \"Account\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 1,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Owner\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 2,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Destination\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 3,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Issuer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 4,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Authorize\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 5,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Unauthorize\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 6,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"RegularKey\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 8,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"NFTokenMinter\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 9,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"EmitCallback\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 10,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Holder\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 11,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"HookAccount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 16,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"OtherChainSource\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 18,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"OtherChainDestination\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 19,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"AttestationSignerAccount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 20,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"AttestationRewardAccount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 21,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"LockingChainDoor\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 22,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"IssuingChainDoor\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 23,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"Subject\",\n            {\n                \"nth\": 24,\n                \"isVLEncoded\": true,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"AccountID\"\n            }\n        ],\n        [\n            \"TransactionMetaData\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"CreatedNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"DeletedNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"ModifiedNode\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"PreviousFields\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"FinalFields\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"NewFields\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"TemplateEntry\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Memo\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"SignerEntry\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"NFToken\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"EmitDetails\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 13,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Hook\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 14,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Signer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Majority\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"DisabledValidator\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"EmittedTxn\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 20,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"HookExecution\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"HookDefinition\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"HookParameter\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 23,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"HookGrant\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"VoteEntry\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"AuctionSlot\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 26,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"AuthAccount\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 27,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"XChainClaimProofSig\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 28,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"XChainCreateAccountProofSig\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 29,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"XChainClaimAttestationCollectionElement\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 30,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"XChainCreateAccountAttestationCollectionElement\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 31,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"PriceData\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 32,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Credential\",\n            {\n                \"nth\": 33,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"STObject\"\n            }\n        ],\n        [\n            \"Signers\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"SignerEntries\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Template\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Necessary\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 6,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Sufficient\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 7,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"AffectedNodes\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 8,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Memos\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 9,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"NFTokens\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 10,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Hooks\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 11,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"VoteSlots\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 12,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"Majorities\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"DisabledValidators\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"HookExecutions\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"HookParameters\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"HookGrants\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 20,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"XChainClaimAttestations\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 21,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"XChainCreateAccountAttestations\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 22,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"PriceDataSeries\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 24,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"AuthAccounts\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 25,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"AuthorizeCredentials\",\n            {\n                \"nth\": 26,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"UnauthorizeCredentials\",\n            {\n                \"nth\": 27,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"AcceptedCredentials\", {\n                \"nth\": 28,\n                \"isVLEncoded\": false,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"STArray\"\n            }\n        ],\n        [\n            \"CloseResolution\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"Method\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"TransactionResult\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"Scale\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"AssetScale\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 5,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"TickSize\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 16,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"UNLModifyDisabling\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 17,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"HookResult\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 18,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"WasLockingChainSend\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 19,\n                \"type\": \"UInt8\"\n            }\n        ],\n        [\n            \"TakerPaysCurrency\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Hash160\"\n            }\n        ],\n        [\n            \"TakerPaysIssuer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"Hash160\"\n            }\n        ],\n        [\n            \"TakerGetsCurrency\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"Hash160\"\n            }\n        ],\n        [\n            \"TakerGetsIssuer\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"Hash160\"\n            }\n        ],\n        [\n            \"Paths\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"PathSet\"\n            }\n        ],\n        [\n            \"Indexes\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 1,\n                \"type\": \"Vector256\"\n            }\n        ],\n        [\n            \"Hashes\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 2,\n                \"type\": \"Vector256\"\n            }\n        ],\n        [\n            \"Amendments\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 3,\n                \"type\": \"Vector256\"\n            }\n        ],\n        [\n            \"NFTokenOffers\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": true,\n                \"nth\": 4,\n                \"type\": \"Vector256\"\n            }\n        ],\n        [\n            \"CredentialIDs\",\n            {\n                \"nth\": 5,\n                \"isVLEncoded\": true,\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"type\": \"Vector256\"\n            }\n        ],\n        [\n            \"MPTokenIssuanceID\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Hash192\"\n            }\n        ],\n        [\n            \"LockingChainIssue\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Issue\"\n            }\n        ],\n        [\n            \"IssuingChainIssue\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"Issue\"\n            }\n        ],\n        [\n            \"Asset\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 3,\n                \"type\": \"Issue\"\n            }\n        ],\n        [\n            \"Asset2\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 4,\n                \"type\": \"Issue\"\n            }\n        ],\n        [\n            \"XChainBridge\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"XChainBridge\"\n            }\n        ],\n        [\n            \"BaseAsset\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 1,\n                \"type\": \"Currency\"\n            }\n        ],\n        [\n            \"QuoteAsset\",\n            {\n                \"isSerialized\": true,\n                \"isSigningField\": true,\n                \"isVLEncoded\": false,\n                \"nth\": 2,\n                \"type\": \"Currency\"\n            }\n        ],\n        [\n            \"Transaction\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 257,\n                \"type\": \"Transaction\"\n            }\n        ],\n        [\n            \"LedgerEntry\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 257,\n                \"type\": \"LedgerEntry\"\n            }\n        ],\n        [\n            \"Validation\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 257,\n                \"type\": \"Validation\"\n            }\n        ],\n        [\n            \"Metadata\",\n            {\n                \"isSerialized\": false,\n                \"isSigningField\": false,\n                \"isVLEncoded\": false,\n                \"nth\": 257,\n                \"type\": \"Metadata\"\n            }\n        ]\n    ],\n    \"LEDGER_ENTRY_TYPES\": {\n        \"AMM\": 121,\n        \"AccountRoot\": 97,\n        \"Amendments\": 102,\n        \"Bridge\": 105,\n        \"Check\": 67,\n        \"DID\": 73,\n        \"DepositPreauth\": 112,\n        \"DirectoryNode\": 100,\n        \"Escrow\": 117,\n        \"FeeSettings\": 115,\n        \"Invalid\": -1,\n        \"LedgerHashes\": 104,\n        \"MPToken\": 127,\n        \"MPTokenIssuance\": 126,\n        \"NFTokenOffer\": 55,\n        \"NFTokenPage\": 80,\n        \"NegativeUNL\": 78,\n        \"Offer\": 111,\n        \"Oracle\": 128,\n        \"Credential\": 129,\n        \"PayChannel\": 120,\n        \"PermissionedDomain\": 130,\n        \"RippleState\": 114,\n        \"SignerList\": 83,\n        \"Ticket\": 84,\n        \"XChainOwnedClaimID\": 113,\n        \"XChainOwnedCreateAccountClaimID\": 116\n    },\n    \"TRANSACTION_RESULTS\": {\n        \"tecAMM_ACCOUNT\": 168,\n        \"tecAMM_BALANCE\": 163,\n        \"tecAMM_EMPTY\": 166,\n        \"tecAMM_FAILED\": 164,\n        \"tecAMM_INVALID_TOKENS\": 165,\n        \"tecAMM_NOT_EMPTY\": 167,\n        \"tecARRAY_EMPTY\": 190,\n        \"tecARRAY_TOO_LARGE\": 191,\n        \"tecBAD_CREDENTIALS\": 193,\n        \"tecCANT_ACCEPT_OWN_NFTOKEN_OFFER\": 158,\n        \"tecCLAIM\": 100,\n        \"tecCRYPTOCONDITION_ERROR\": 146,\n        \"tecDIR_FULL\": 121,\n        \"tecDST_TAG_NEEDED\": 143,\n        \"tecDUPLICATE\": 149,\n        \"tecEMPTY_DID\": 187,\n        \"tecEXPIRED\": 148,\n        \"tecFAILED_PROCESSING\": 105,\n        \"tecFROZEN\": 137,\n        \"tecHAS_OBLIGATIONS\": 151,\n        \"tecINCOMPLETE\": 169,\n        \"tecINSUFFICIENT_FUNDS\": 159,\n        \"tecINSUFFICIENT_PAYMENT\": 161,\n        \"tecINSUFFICIENT_RESERVE\": 141,\n        \"tecINSUFF_FEE\": 136,\n        \"tecINSUF_RESERVE_LINE\": 122,\n        \"tecINSUF_RESERVE_OFFER\": 123,\n        \"tecINTERNAL\": 144,\n        \"tecINVALID_UPDATE_TIME\": 188,\n        \"tecINVARIANT_FAILED\": 147,\n        \"tecKILLED\": 150,\n        \"tecLOCKED\": 192,\n        \"tecMAX_SEQUENCE_REACHED\": 154,\n        \"tecNEED_MASTER_KEY\": 142,\n        \"tecNFTOKEN_BUY_SELL_MISMATCH\": 156,\n        \"tecNFTOKEN_OFFER_TYPE_MISMATCH\": 157,\n        \"tecNO_ALTERNATIVE_KEY\": 130,\n        \"tecNO_AUTH\": 134,\n        \"tecNO_DST\": 124,\n        \"tecNO_DST_INSUF_XRP\": 125,\n        \"tecNO_ENTRY\": 140,\n        \"tecNO_ISSUER\": 133,\n        \"tecNO_LINE\": 135,\n        \"tecNO_LINE_INSUF_RESERVE\": 126,\n        \"tecNO_LINE_REDUNDANT\": 127,\n        \"tecNO_PERMISSION\": 139,\n        \"tecNO_REGULAR_KEY\": 131,\n        \"tecNO_SUITABLE_NFTOKEN_PAGE\": 155,\n        \"tecNO_TARGET\": 138,\n        \"tecOBJECT_NOT_FOUND\": 160,\n        \"tecOVERSIZE\": 145,\n        \"tecOWNERS\": 132,\n        \"tecPATH_DRY\": 128,\n        \"tecPATH_PARTIAL\": 101,\n        \"tecTOKEN_PAIR_NOT_FOUND\": 189,\n        \"tecTOO_SOON\": 152,\n        \"tecUNFUNDED\": 129,\n        \"tecUNFUNDED_ADD\": 102,\n        \"tecUNFUNDED_AMM\": 162,\n        \"tecUNFUNDED_OFFER\": 103,\n        \"tecUNFUNDED_PAYMENT\": 104,\n        \"tecXCHAIN_ACCOUNT_CREATE_PAST\": 181,\n        \"tecXCHAIN_ACCOUNT_CREATE_TOO_MANY\": 182,\n        \"tecXCHAIN_BAD_CLAIM_ID\": 172,\n        \"tecXCHAIN_BAD_PUBLIC_KEY_ACCOUNT_PAIR\": 185,\n        \"tecXCHAIN_BAD_TRANSFER_ISSUE\": 170,\n        \"tecXCHAIN_CLAIM_NO_QUORUM\": 173,\n        \"tecXCHAIN_CREATE_ACCOUNT_DISABLED\": 186,\n        \"tecXCHAIN_CREATE_ACCOUNT_NONXRP_ISSUE\": 175,\n        \"tecXCHAIN_INSUFF_CREATE_AMOUNT\": 180,\n        \"tecXCHAIN_NO_CLAIM_ID\": 171,\n        \"tecXCHAIN_NO_SIGNERS_LIST\": 178,\n        \"tecXCHAIN_PAYMENT_FAILED\": 183,\n        \"tecXCHAIN_PROOF_UNKNOWN_KEY\": 174,\n        \"tecXCHAIN_REWARD_MISMATCH\": 177,\n        \"tecXCHAIN_SELF_COMMIT\": 184,\n        \"tecXCHAIN_SENDING_ACCOUNT_MISMATCH\": 179,\n        \"tecXCHAIN_WRONG_CHAIN\": 176,\n        \"tefALREADY\": -198,\n        \"tefBAD_ADD_AUTH\": -197,\n        \"tefBAD_AUTH\": -196,\n        \"tefBAD_AUTH_MASTER\": -183,\n        \"tefBAD_LEDGER\": -195,\n        \"tefBAD_QUORUM\": -185,\n        \"tefBAD_SIGNATURE\": -186,\n        \"tefCREATED\": -194,\n        \"tefEXCEPTION\": -193,\n        \"tefFAILURE\": -199,\n        \"tefINTERNAL\": -192,\n        \"tefINVALID_LEDGER_FIX_TYPE\": -178,\n        \"tefINVARIANT_FAILED\": -182,\n        \"tefMASTER_DISABLED\": -188,\n        \"tefMAX_LEDGER\": -187,\n        \"tefNFTOKEN_IS_NOT_TRANSFERABLE\": -179,\n        \"tefNOT_MULTI_SIGNING\": -184,\n        \"tefNO_AUTH_REQUIRED\": -191,\n        \"tefNO_TICKET\": -180,\n        \"tefPAST_SEQ\": -190,\n        \"tefTOO_BIG\": -181,\n        \"tefWRONG_PRIOR\": -189,\n        \"telBAD_DOMAIN\": -398,\n        \"telBAD_PATH_COUNT\": -397,\n        \"telBAD_PUBLIC_KEY\": -396,\n        \"telCAN_NOT_QUEUE\": -392,\n        \"telCAN_NOT_QUEUE_BALANCE\": -391,\n        \"telCAN_NOT_QUEUE_BLOCKED\": -389,\n        \"telCAN_NOT_QUEUE_BLOCKS\": -390,\n        \"telCAN_NOT_QUEUE_FEE\": -388,\n        \"telCAN_NOT_QUEUE_FULL\": -387,\n        \"telENV_RPC_FAILED\": -383,\n        \"telFAILED_PROCESSING\": -395,\n        \"telINSUF_FEE_P\": -394,\n        \"telLOCAL_ERROR\": -399,\n        \"telNETWORK_ID_MAKES_TX_NON_CANONICAL\": -384,\n        \"telNO_DST_PARTIAL\": -393,\n        \"telREQUIRES_NETWORK_ID\": -385,\n        \"telWRONG_NETWORK\": -386,\n        \"temARRAY_EMPTY\": -253,\n        \"temARRAY_TOO_LARGE\": -252,\n        \"temBAD_AMM_TOKENS\": -261,\n        \"temBAD_AMOUNT\": -298,\n        \"temBAD_CURRENCY\": -297,\n        \"temBAD_EXPIRATION\": -296,\n        \"temBAD_FEE\": -295,\n        \"temBAD_ISSUER\": -294,\n        \"temBAD_LIMIT\": -293,\n        \"temBAD_NFTOKEN_TRANSFER_FEE\": -262,\n        \"temBAD_OFFER\": -292,\n        \"temBAD_PATH\": -291,\n        \"temBAD_PATH_LOOP\": -290,\n        \"temBAD_QUORUM\": -271,\n        \"temBAD_REGKEY\": -289,\n        \"temBAD_SEND_XRP_LIMIT\": -288,\n        \"temBAD_SEND_XRP_MAX\": -287,\n        \"temBAD_SEND_XRP_NO_DIRECT\": -286,\n        \"temBAD_SEND_XRP_PARTIAL\": -285,\n        \"temBAD_SEND_XRP_PATHS\": -284,\n        \"temBAD_SEQUENCE\": -283,\n        \"temBAD_SIGNATURE\": -282,\n        \"temBAD_SIGNER\": -272,\n        \"temBAD_SRC_ACCOUNT\": -281,\n        \"temBAD_TICK_SIZE\": -269,\n        \"temBAD_TRANSFER_FEE\": -251,\n        \"temBAD_TRANSFER_RATE\": -280,\n        \"temBAD_WEIGHT\": -270,\n        \"temCANNOT_PREAUTH_SELF\": -267,\n        \"temDISABLED\": -273,\n        \"temDST_IS_SRC\": -279,\n        \"temDST_NEEDED\": -278,\n        \"temEMPTY_DID\": -254,\n        \"temINVALID\": -277,\n        \"temINVALID_ACCOUNT_ID\": -268,\n        \"temINVALID_COUNT\": -266,\n        \"temINVALID_FLAG\": -276,\n        \"temMALFORMED\": -299,\n        \"temREDUNDANT\": -275,\n        \"temRIPPLE_EMPTY\": -274,\n        \"temSEQ_AND_TICKET\": -263,\n        \"temUNCERTAIN\": -265,\n        \"temUNKNOWN\": -264,\n        \"temXCHAIN_BAD_PROOF\": -259,\n        \"temXCHAIN_BRIDGE_BAD_ISSUES\": -258,\n        \"temXCHAIN_BRIDGE_BAD_MIN_ACCOUNT_CREATE_AMOUNT\": -256,\n        \"temXCHAIN_BRIDGE_BAD_REWARD_AMOUNT\": -255,\n        \"temXCHAIN_BRIDGE_NONDOOR_OWNER\": -257,\n        \"temXCHAIN_EQUAL_DOOR_ACCOUNTS\": -260,\n        \"terFUNDS_SPENT\": -98,\n        \"terINSUF_FEE_B\": -97,\n        \"terLAST\": -91,\n        \"terNO_ACCOUNT\": -96,\n        \"terNO_AMM\": -87,\n        \"terNO_AUTH\": -95,\n        \"terNO_LINE\": -94,\n        \"terNO_RIPPLE\": -90,\n        \"terOWNERS\": -93,\n        \"terPRE_SEQ\": -92,\n        \"terPRE_TICKET\": -88,\n        \"terQUEUED\": -89,\n        \"terRETRY\": -99,\n        \"tesSUCCESS\": 0\n    },\n    \"TRANSACTION_TYPES\": {\n        \"AMMBid\": 39,\n        \"AMMClawback\": 31,\n        \"AMMCreate\": 35,\n        \"AMMDelete\": 40,\n        \"AMMDeposit\": 36,\n        \"AMMVote\": 38,\n        \"AMMWithdraw\": 37,\n        \"AccountDelete\": 21,\n        \"AccountSet\": 3,\n        \"CheckCancel\": 18,\n        \"CheckCash\": 17,\n        \"CheckCreate\": 16,\n        \"Clawback\": 30,\n        \"CredentialCreate\": 58,\n        \"CredentialAccept\": 59,\n        \"CredentialDelete\": 60,\n        \"DIDDelete\": 50,\n        \"DIDSet\": 49,\n        \"DepositPreauth\": 19,\n        \"EnableAmendment\": 100,\n        \"EscrowCancel\": 4,\n        \"EscrowCreate\": 1,\n        \"EscrowFinish\": 2,\n        \"Invalid\": -1,\n        \"LedgerStateFix\": 53,\n        \"MPTokenAuthorize\": 57,\n        \"MPTokenIssuanceCreate\": 54,\n        \"MPTokenIssuanceDestroy\": 55,\n        \"MPTokenIssuanceSet\": 56,\n        \"NFTokenAcceptOffer\": 29,\n        \"NFTokenBurn\": 26,\n        \"NFTokenCancelOffer\": 28,\n        \"NFTokenCreateOffer\": 27,\n        \"NFTokenMint\": 25,\n        \"NFTokenModify\": 61,\n        \"OfferCancel\": 8,\n        \"OfferCreate\": 7,\n        \"OracleDelete\": 52,\n        \"OracleSet\": 51,\n        \"Payment\": 0,\n        \"PaymentChannelClaim\": 15,\n        \"PaymentChannelCreate\": 13,\n        \"PaymentChannelFund\": 14,\n        \"PermissionedDomainSet\": 62,\n        \"PermissionedDomainDelete\": 63,\n        \"SetFee\": 101,\n        \"SetRegularKey\": 5,\n        \"SignerListSet\": 12,\n        \"TicketCreate\": 10,\n        \"TrustSet\": 20,\n        \"UNLModify\": 102,\n        \"XChainAccountCreateCommit\": 44,\n        \"XChainAddAccountCreateAttestation\": 46,\n        \"XChainAddClaimAttestation\": 45,\n        \"XChainClaim\": 43,\n        \"XChainCommit\": 42,\n        \"XChainCreateBridge\": 48,\n        \"XChainCreateClaimID\": 41,\n        \"XChainModifyBridge\": 47\n    },\n    \"TYPES\": {\n        \"AccountID\": 8,\n        \"Amount\": 6,\n        \"Blob\": 7,\n        \"Currency\": 26,\n        \"Done\": -1,\n        \"Hash128\": 4,\n        \"Hash160\": 17,\n        \"Hash192\": 21,\n        \"Hash256\": 5,\n        \"Issue\": 24,\n        \"LedgerEntry\": 10002,\n        \"Metadata\": 10004,\n        \"NotPresent\": 0,\n        \"PathSet\": 18,\n        \"STArray\": 15,\n        \"STObject\": 14,\n        \"Transaction\": 10001,\n        \"UInt16\": 1,\n        \"UInt32\": 2,\n        \"UInt384\": 22,\n        \"UInt512\": 23,\n        \"UInt64\": 3,\n        \"UInt8\": 16,\n        \"UInt96\": 20,\n        \"Unknown\": -2,\n        \"Validation\": 10003,\n        \"Vector256\": 19,\n        \"XChainBridge\": 25\n    }\n}\n", "import { BytesList, BinaryParser } from '../binary'\n\n/*\n * @brief: Bytes, name, and ordinal representing one type, ledger_type, transaction type, or result\n */\nexport class Bytes {\n  readonly bytes: Uint8Array\n\n  constructor(\n    readonly name: string,\n    readonly ordinal: number,\n    readonly ordinalWidth: number,\n  ) {\n    this.bytes = new Uint8Array(ordinalWidth)\n    for (let i = 0; i < ordinalWidth; i++) {\n      this.bytes[ordinalWidth - i - 1] = (ordinal >>> (i * 8)) & 0xff\n    }\n  }\n\n  toJSON(): string {\n    return this.name\n  }\n\n  toBytesSink(sink: BytesList): void {\n    sink.put(this.bytes)\n  }\n\n  toBytes(): Uint8Array {\n    return this.bytes\n  }\n}\n\n/*\n * @brief: Collection of Bytes objects, mapping bidirectionally\n */\nexport class BytesLookup {\n  constructor(types: Record<string, number>, readonly ordinalWidth: number) {\n    Object.entries(types).forEach(([k, v]) => {\n      this.add(k, v)\n    })\n  }\n\n  /**\n   * Add a new name value pair to the BytesLookup.\n   *\n   * @param name - A human readable name for the field.\n   * @param value - The numeric value for the field.\n   * @throws if the name or value already exist in the lookup because it's unclear how to decode.\n   */\n  add(name: string, value: number): void {\n    if (this[name]) {\n      throw new SyntaxError(\n        `Attempted to add a value with a duplicate name \"${name}\". This is not allowed because it is unclear how to decode.`,\n      )\n    }\n    if (this[value.toString()]) {\n      throw new SyntaxError(\n        `Attempted to add a duplicate value under a different name (Given name: \"${name}\" and previous name: \"${\n          this[value.toString()]\n        }. This is not allowed because it is unclear how to decode.\\nGiven value: ${value.toString()}`,\n      )\n    }\n    this[name] = new Bytes(name, value, this.ordinalWidth)\n    this[value.toString()] = this[name]\n  }\n\n  from(value: Bytes | string): Bytes {\n    return value instanceof Bytes ? value : (this[value] as Bytes)\n  }\n\n  fromParser(parser: BinaryParser): Bytes {\n    return this.from(parser.readUIntN(this.ordinalWidth).toString())\n  }\n}\n", "import { FieldInstance } from '../enums'\nimport { type SerializedType } from '../types/serialized-type'\nimport { bytesToHex, concat } from '@xrplf/isomorphic/utils'\n\n/**\n * Bytes list is a collection of Uint8Array objects\n */\nclass BytesList {\n  private bytesArray: Array<Uint8Array> = []\n\n  /**\n   * Get the total number of bytes in the BytesList\n   *\n   * @return the number of bytes\n   */\n  public getLength(): number {\n    return concat(this.bytesArray).byteLength\n  }\n\n  /**\n   * Put bytes in the BytesList\n   *\n   * @param bytesArg A Uint8Array\n   * @return this BytesList\n   */\n  public put(bytesArg: Uint8Array): BytesList {\n    const bytes = Uint8Array.from(bytesArg) // Temporary, to catch instances of Uint8Array being passed in\n    this.bytesArray.push(bytes)\n    return this\n  }\n\n  /**\n   * Write this BytesList to the back of another bytes list\n   *\n   *  @param list The BytesList to write to\n   */\n  public toBytesSink(list: BytesList): void {\n    list.put(this.toBytes())\n  }\n\n  public toBytes(): Uint8Array {\n    return concat(this.bytesArray)\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toBytes())\n  }\n}\n\n/**\n * BinarySerializer is used to write fields and values to Uint8Arrays\n */\nclass BinarySerializer {\n  private sink: BytesList = new BytesList()\n\n  constructor(sink: BytesList) {\n    this.sink = sink\n  }\n\n  /**\n   * Write a value to this BinarySerializer\n   *\n   * @param value a SerializedType value\n   */\n  write(value: SerializedType): void {\n    value.toBytesSink(this.sink)\n  }\n\n  /**\n   * Write bytes to this BinarySerializer\n   *\n   * @param bytes the bytes to write\n   */\n  put(bytes: Uint8Array): void {\n    this.sink.put(bytes)\n  }\n\n  /**\n   * Write a value of a given type to this BinarySerializer\n   *\n   * @param type the type to write\n   * @param value a value of that type\n   */\n  writeType(type: typeof SerializedType, value: SerializedType): void {\n    this.write(type.from(value))\n  }\n\n  /**\n   * Write BytesList to this BinarySerializer\n   *\n   * @param bl BytesList to write to BinarySerializer\n   */\n  writeBytesList(bl: BytesList): void {\n    bl.toBytesSink(this.sink)\n  }\n\n  /**\n   * Calculate the header of Variable Length encoded bytes\n   *\n   * @param length the length of the bytes\n   */\n  private encodeVariableLength(length: number): Uint8Array {\n    const lenBytes = new Uint8Array(3)\n    if (length <= 192) {\n      lenBytes[0] = length\n      return lenBytes.slice(0, 1)\n    } else if (length <= 12480) {\n      length -= 193\n      lenBytes[0] = 193 + (length >>> 8)\n      lenBytes[1] = length & 0xff\n      return lenBytes.slice(0, 2)\n    } else if (length <= 918744) {\n      length -= 12481\n      lenBytes[0] = 241 + (length >>> 16)\n      lenBytes[1] = (length >> 8) & 0xff\n      lenBytes[2] = length & 0xff\n      return lenBytes.slice(0, 3)\n    }\n    throw new Error('Overflow error')\n  }\n\n  /**\n   * Write field and value to BinarySerializer\n   *\n   * @param field field to write to BinarySerializer\n   * @param value value to write to BinarySerializer\n   */\n  writeFieldAndValue(\n    field: FieldInstance,\n    value: SerializedType,\n    isUnlModifyWorkaround = false,\n  ): void {\n    const associatedValue = field.associatedType.from(value)\n    if (associatedValue.toBytesSink === undefined || field.name === undefined) {\n      throw new Error()\n    }\n\n    this.sink.put(field.header)\n\n    if (field.isVariableLengthEncoded) {\n      this.writeLengthEncoded(associatedValue, isUnlModifyWorkaround)\n    } else {\n      associatedValue.toBytesSink(this.sink)\n    }\n  }\n\n  /**\n   * Write a variable length encoded value to the BinarySerializer\n   *\n   * @param value length encoded value to write to BytesList\n   */\n  public writeLengthEncoded(\n    value: SerializedType,\n    isUnlModifyWorkaround = false,\n  ): void {\n    const bytes = new BytesList()\n    if (!isUnlModifyWorkaround) {\n      // this part doesn't happen for the Account field in a UNLModify transaction\n      value.toBytesSink(bytes)\n    }\n    this.put(this.encodeVariableLength(bytes.getLength()))\n    this.writeBytesList(bytes)\n  }\n}\n\nexport { BytesList, BinarySerializer }\n", "import { BytesList } from '../serdes/binary-serializer'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { XrplDefinitionsBase } from '../enums'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\ntype JSON = string | number | boolean | null | undefined | JSON[] | JsonObject\n\ntype JsonObject = { [key: string]: JSON }\n\n/**\n * The base class for all binary-codec types\n */\nclass SerializedType {\n  protected readonly bytes: Uint8Array = new Uint8Array(0)\n\n  constructor(bytes?: Uint8Array) {\n    this.bytes = bytes ?? new Uint8Array(0)\n  }\n\n  static fromParser(parser: BinaryParser, hint?: number): SerializedType {\n    throw new Error('fromParser not implemented')\n    return this.fromParser(parser, hint)\n  }\n\n  static from(value: SerializedType | JSON | bigint): SerializedType {\n    throw new Error('from not implemented')\n    return this.from(value)\n  }\n\n  /**\n   * Write the bytes representation of a SerializedType to a BytesList\n   *\n   * @param list The BytesList to write SerializedType bytes to\n   */\n  toBytesSink(list: BytesList): void {\n    list.put(this.bytes)\n  }\n\n  /**\n   * Get the hex representation of a SerializedType's bytes\n   *\n   * @returns hex String of this.bytes\n   */\n  toHex(): string {\n    return bytesToHex(this.toBytes())\n  }\n\n  /**\n   * Get the bytes representation of a SerializedType\n   *\n   * @returns A Uint8Array of the bytes\n   */\n  toBytes(): Uint8Array {\n    if (this.bytes) {\n      return this.bytes\n    }\n    const bytes = new BytesList()\n    this.toBytesSink(bytes)\n    return bytes.toBytes()\n  }\n\n  /**\n   * Return the JSON representation of a SerializedType\n   *\n   * @param _definitions rippled definitions used to parse the values of transaction types and such.\n   *                          Unused in default, but used in STObject, STArray\n   *                          Can be customized for sidechains and amendments.\n   * @returns any type, if not overloaded returns hexString representation of bytes\n   */\n  toJSON(_definitions?: XrplDefinitionsBase, _fieldName?: string): JSON {\n    return this.toHex()\n  }\n\n  /**\n   * @returns hexString representation of this.bytes\n   */\n  toString(): string {\n    return this.toHex()\n  }\n}\n\n/**\n * Base class for SerializedTypes that are comparable.\n *\n * @template T - What types you want to allow comparisons between. You must specify all types. Primarily used to allow\n * comparisons between built-in types (like `string`) and SerializedType subclasses (like `Hash`).\n *\n * Ex. `class Hash extends Comparable<Hash | string>`\n */\nclass Comparable<T extends Object> extends SerializedType {\n  lt(other: T): boolean {\n    return this.compareTo(other) < 0\n  }\n\n  eq(other: T): boolean {\n    return this.compareTo(other) === 0\n  }\n\n  gt(other: T): boolean {\n    return this.compareTo(other) > 0\n  }\n\n  gte(other: T): boolean {\n    return this.compareTo(other) > -1\n  }\n\n  lte(other: T): boolean {\n    return this.compareTo(other) < 1\n  }\n\n  /**\n   * Overload this method to define how two Comparable SerializedTypes are compared\n   *\n   * @param other The comparable object to compare this to\n   * @returns A number denoting the relationship of this and other\n   */\n  compareTo(other: T): number {\n    throw new Error(`cannot compare ${this.toString()} and ${other.toString()}`)\n  }\n}\n\nexport { SerializedType, Comparable, JSON, JsonObject }\n", "export const TYPE_WIDTH = 2\nexport const LEDGER_ENTRY_WIDTH = 2\nexport const TRANSACTION_TYPE_WIDTH = 2\nexport const TRANSACTION_RESULT_WIDTH = 1\n", "import { Bytes } from './bytes'\nimport { SerializedType } from '../types/serialized-type'\nimport { TYPE_WIDTH } from './constants'\n\n/**\n * Encoding information for a rippled field, often used in transactions.\n * See the enums [README.md](https://github.com/XRPLF/xrpl.js/tree/main/packages/ripple-binary-codec/src/enums) for more details on what each means.\n */\nexport interface FieldInfo {\n  nth: number\n  isVLEncoded: boolean\n  isSerialized: boolean\n  isSigningField: boolean\n  type: string\n}\n\nexport interface FieldInstance {\n  readonly nth: number\n  readonly isVariableLengthEncoded: boolean\n  readonly isSerialized: boolean\n  readonly isSigningField: boolean\n  readonly type: Bytes\n  readonly ordinal: number\n  readonly name: string\n  readonly header: Uint8Array\n  readonly associatedType: typeof SerializedType\n}\n\n/*\n * @brief: Serialize a field based on type_code and Field.nth\n */\nfunction fieldHeader(type: number, nth: number): Uint8Array {\n  const header: Array<number> = []\n  if (type < 16) {\n    if (nth < 16) {\n      header.push((type << 4) | nth)\n    } else {\n      header.push(type << 4, nth)\n    }\n  } else if (nth < 16) {\n    header.push(nth, type)\n  } else {\n    header.push(0, type, nth)\n  }\n  return Uint8Array.from(header)\n}\n\nfunction buildField(\n  [name, info]: [string, FieldInfo],\n  typeOrdinal: number,\n): FieldInstance {\n  const field = fieldHeader(typeOrdinal, info.nth)\n  return {\n    name: name,\n    nth: info.nth,\n    isVariableLengthEncoded: info.isVLEncoded,\n    isSerialized: info.isSerialized,\n    isSigningField: info.isSigningField,\n    ordinal: (typeOrdinal << 16) | info.nth,\n    type: new Bytes(info.type, typeOrdinal, TYPE_WIDTH),\n    header: field,\n    associatedType: SerializedType, // For later assignment in ./types/index.js or Definitions.updateAll(...)\n  }\n}\n\n/*\n * @brief: The collection of all fields as defined in definitions.json\n */\nexport class FieldLookup {\n  constructor(\n    fields: Array<[string, FieldInfo]>,\n    types: Record<string, number>,\n  ) {\n    fields.forEach(([name, field_info]) => {\n      const typeOrdinal = types[field_info.type]\n      this[name] = buildField([name, field_info], typeOrdinal)\n      this[this[name].ordinal.toString()] = this[name]\n    })\n  }\n\n  fromString(value: string): FieldInstance {\n    return this[value] as FieldInstance\n  }\n}\n", "import { SerializedType } from '../types/serialized-type'\nimport { Bytes, BytesLookup } from './bytes'\nimport { FieldInfo, FieldLookup, FieldInstance } from './field'\nimport {\n  TYPE_WIDTH,\n  LEDGER_ENTRY_WIDTH,\n  TRANSACTION_TYPE_WIDTH,\n  TRANSACTION_RESULT_WIDTH,\n} from './constants'\n\ninterface DefinitionsData {\n  TYPES: Record<string, number>\n  LEDGER_ENTRY_TYPES: Record<string, number>\n  FIELDS: (string | FieldInfo)[][]\n  TRANSACTION_RESULTS: Record<string, number>\n  TRANSACTION_TYPES: Record<string, number>\n}\n\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * XrplDefinitions should be instantiated instead of this class.\n */\nclass XrplDefinitionsBase {\n  // A collection of fields that can be included in transactions\n  field: FieldLookup\n  // A collection of ids corresponding to types of ledger objects\n  ledgerEntryType: BytesLookup\n  // A collection of type flags used to determine how to serialize a field's data\n  type: BytesLookup\n  // Errors and result codes for transactions\n  transactionResult: BytesLookup\n  // Defined transactions that can be submitted to the ledger\n  transactionType: BytesLookup\n  // Valid transaction names\n  transactionNames: string[]\n  // Maps serializable types to their TypeScript class implementation\n  dataTypes: Record<string, typeof SerializedType>\n\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param types - A list of type objects with the same name as the fields defined.\n   *              You can use the coreTypes object if you are not adding new types.\n   */\n  constructor(\n    enums: DefinitionsData,\n    types: Record<string, typeof SerializedType>,\n  ) {\n    this.type = new BytesLookup(enums.TYPES, TYPE_WIDTH)\n    this.ledgerEntryType = new BytesLookup(\n      enums.LEDGER_ENTRY_TYPES,\n      LEDGER_ENTRY_WIDTH,\n    )\n    this.transactionType = new BytesLookup(\n      enums.TRANSACTION_TYPES,\n      TRANSACTION_TYPE_WIDTH,\n    )\n    this.transactionResult = new BytesLookup(\n      enums.TRANSACTION_RESULTS,\n      TRANSACTION_RESULT_WIDTH,\n    )\n    this.field = new FieldLookup(\n      enums.FIELDS as Array<[string, FieldInfo]>,\n      enums.TYPES,\n    )\n    this.transactionNames = Object.entries(enums.TRANSACTION_TYPES)\n      .filter(([_key, value]) => value >= 0)\n      .map(([key, _value]) => key)\n\n    this.dataTypes = {} // Filled in via associateTypes\n    this.associateTypes(types)\n  }\n\n  /**\n   * Associates each Field to a corresponding class that TypeScript can recognize.\n   *\n   * @param types a list of type objects with the same name as the fields defined.\n   *              Defaults to xrpl.js's core type definitions.\n   */\n  public associateTypes(types: Record<string, typeof SerializedType>): void {\n    // Overwrite any existing type definitions with the given types\n    this.dataTypes = Object.assign({}, this.dataTypes, types)\n\n    Object.values(this.field).forEach((field) => {\n      field.associatedType = this.dataTypes[field.type.name]\n    })\n\n    this.field['TransactionType'].associatedType = this.transactionType\n    this.field['TransactionResult'].associatedType = this.transactionResult\n    this.field['LedgerEntryType'].associatedType = this.ledgerEntryType\n  }\n\n  public getAssociatedTypes(): Record<string, typeof SerializedType> {\n    return this.dataTypes\n  }\n}\n\nexport {\n  DefinitionsData,\n  XrplDefinitionsBase,\n  FieldLookup,\n  FieldInfo,\n  FieldInstance,\n  Bytes,\n  BytesLookup,\n}\n", "import enums from './definitions.json'\nimport {\n  XrplDefinitionsBase,\n  FieldInstance,\n  Bytes,\n} from './xrpl-definitions-base'\n/**\n * By default, coreTypes from the `types` folder is where known type definitions are initialized to avoid import cycles.\n */\nconst DEFAULT_DEFINITIONS = new XrplDefinitionsBase(enums, {})\n\nconst Type = DEFAULT_DEFINITIONS.type\nconst LedgerEntryType = DEFAULT_DEFINITIONS.ledgerEntryType\nconst TransactionType = DEFAULT_DEFINITIONS.transactionType\nconst TransactionResult = DEFAULT_DEFINITIONS.transactionResult\nconst Field = DEFAULT_DEFINITIONS.field\n\n/*\n * @brief: All valid transaction types\n */\nconst TRANSACTION_TYPES = DEFAULT_DEFINITIONS.transactionNames\n\nexport {\n  Bytes,\n  XrplDefinitionsBase,\n  DEFAULT_DEFINITIONS,\n  Field,\n  FieldInstance,\n  Type,\n  LedgerEntryType,\n  TransactionResult,\n  TransactionType,\n  TRANSACTION_TYPES,\n}\n", "// Even though this comes from NodeJS it is valid in the browser\nimport TypedArray = NodeJS.TypedArray\n\n/**\n * Writes value to array at the specified offset. The value must be a valid unsigned 8-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt8(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  value = Number(value)\n  array[offset] = value\n}\n\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 16-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt16BE(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  value = Number(value)\n\n  array[offset] = value >>> 8\n  array[offset + 1] = value\n}\n\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 32-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt32BE(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  array[offset] = (value >>> 24) & 0xff\n  array[offset + 1] = (value >>> 16) & 0xff\n  array[offset + 2] = (value >>> 8) & 0xff\n  array[offset + 3] = value & 0xff\n}\n\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2\n */\nexport function readUInt16BE(array: Uint8Array, offset: number): string {\n  return new DataView(array.buffer).getUint16(offset, false).toString(10)\n}\n\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4\n */\nexport function readUInt32BE(array: Uint8Array, offset: number): string {\n  return new DataView(array.buffer).getUint32(offset, false).toString(10)\n}\n\n/**\n * Compares two Uint8Array or ArrayBuffers\n * @param a first array to compare\n * @param b second array to compare\n */\nexport function equal(\n  a: Uint8Array | ArrayBuffer,\n  b: Uint8Array | ArrayBuffer,\n): boolean {\n  const aUInt = a instanceof ArrayBuffer ? new Uint8Array(a, 0) : a\n  const bUInt = b instanceof ArrayBuffer ? new Uint8Array(b, 0) : b\n  if (aUInt.byteLength != bUInt.byteLength) return false\n  if (aligned32(aUInt) && aligned32(bUInt)) return compare32(aUInt, bUInt) === 0\n  if (aligned16(aUInt) && aligned16(bUInt)) return compare16(aUInt, bUInt) === 0\n  return compare8(aUInt, bUInt) === 0\n}\n\n/**\n * Compares two 8 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare8(a, b) {\n  const ua = new Uint8Array(a.buffer, a.byteOffset, a.byteLength)\n  const ub = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n  return compare(ua, ub)\n}\n\n/**\n * Compares two 16 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare16(a: Uint8Array, b: Uint8Array) {\n  const ua = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2)\n  const ub = new Uint16Array(b.buffer, b.byteOffset, b.byteLength / 2)\n  return compare(ua, ub)\n}\n\n/**\n * Compares two 32 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare32(a: Uint8Array, b: Uint8Array) {\n  const ua = new Uint32Array(a.buffer, a.byteOffset, a.byteLength / 4)\n  const ub = new Uint32Array(b.buffer, b.byteOffset, b.byteLength / 4)\n  return compare(ua, ub)\n}\n\n/**\n * Compare two TypedArrays\n * @param a first array to compare\n * @param b second array to compare\n */\nexport function compare(a: TypedArray, b: TypedArray): 1 | -1 | 0 {\n  if (a.byteLength !== b.byteLength) {\n    throw new Error('Cannot compare arrays of different length')\n  }\n\n  for (let i = 0; i < a.length - 1; i += 1) {\n    if (a[i] > b[i]) return 1\n    if (a[i] < b[i]) return -1\n  }\n  return 0\n}\n\n/**\n * Determine if TypedArray is 16 bit aligned\n * @param array The array to check\n */\nfunction aligned16(array: TypedArray) {\n  return array.byteOffset % 2 === 0 && array.byteLength % 2 === 0\n}\n\n/**\n * Determine if TypedArray is 32 bit aligned\n * @param array The array to check\n */\nfunction aligned32(array: TypedArray) {\n  return array.byteOffset % 4 === 0 && array.byteLength % 4 === 0\n}\n", "import { Comparable } from './serialized-type'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\nimport { compare } from '../utils'\n\n/**\n * Base class defining how to encode and decode hashes\n */\nclass Hash extends Comparable<Hash | string> {\n  static readonly width: number\n\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n    if (this.bytes.length !== (this.constructor as typeof Hash).width) {\n      throw new Error(`Invalid Hash length ${this.bytes.byteLength}`)\n    }\n  }\n\n  /**\n   * Construct a Hash object from an existing Hash object or a hex-string\n   *\n   * @param value A hash object or hex-string of a hash\n   */\n  static from<T extends Hash | string>(value: T): Hash {\n    if (value instanceof this) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      return new this(hexToBytes(value))\n    }\n\n    throw new Error('Cannot construct Hash from given value')\n  }\n\n  /**\n   * Read a Hash object from a BinaryParser\n   *\n   * @param parser BinaryParser to read the hash from\n   * @param hint length of the bytes to read, optional\n   */\n  static fromParser(parser: BinaryParser, hint?: number): Hash {\n    return new this(parser.read(hint ?? this.width))\n  }\n\n  /**\n   * Overloaded operator for comparing two hash objects\n   *\n   * @param other The Hash to compare this to\n   */\n  compareTo(other: Hash): number {\n    return compare(\n      this.bytes,\n      (this.constructor as typeof Hash).from(other).bytes,\n    )\n  }\n\n  /**\n   * @returns the hex-string representation of this Hash\n   */\n  toString(): string {\n    return this.toHex()\n  }\n\n  /**\n   * Returns four bits at the specified depth within a hash\n   *\n   * @param depth The depth of the four bits\n   * @returns The number represented by the four bits\n   */\n  nibblet(depth: number): number {\n    const byteIx = depth > 0 ? (depth / 2) | 0 : 0\n    let b = this.bytes[byteIx]\n    if (depth % 2 === 0) {\n      b = (b & 0xf0) >>> 4\n    } else {\n      b = b & 0x0f\n    }\n    return b\n  }\n}\n\nexport { Hash }\n", "import { Hash } from './hash'\n\n/**\n * Hash with a width of 160 bits\n */\nclass Hash160 extends Hash {\n  static readonly width = 20\n  static readonly ZERO_160: Hash160 = new Hash160(new Uint8Array(Hash160.width))\n\n  constructor(bytes?: Uint8Array) {\n    if (bytes && bytes.byteLength === 0) {\n      bytes = Hash160.ZERO_160.bytes\n    }\n\n    super(bytes ?? Hash160.ZERO_160.bytes)\n  }\n}\n\nexport { Hash160 }\n", "import {\n  decodeAccountID,\n  encodeAccountID,\n  isValidXAddress,\n  xAddressToClassicAddress,\n} from 'ripple-address-codec'\nimport { Hash160 } from './hash-160'\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\n\nconst HEX_REGEX = /^[A-F0-9]{40}$/\n\n/**\n * Class defining how to encode and decode an AccountID\n */\nclass AccountID extends Hash160 {\n  static readonly defaultAccountID: AccountID = new AccountID(\n    new Uint8Array(20),\n  )\n\n  constructor(bytes?: Uint8Array) {\n    super(bytes ?? AccountID.defaultAccountID.bytes)\n  }\n\n  /**\n   * Defines how to construct an AccountID\n   *\n   * @param value either an existing AccountID, a hex-string, or a base58 r-Address\n   * @returns an AccountID object\n   */\n  static from<T extends Hash160 | string>(value: T): AccountID {\n    if (value instanceof AccountID) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      if (value === '') {\n        return new AccountID()\n      }\n\n      return HEX_REGEX.test(value)\n        ? new AccountID(hexToBytes(value))\n        : this.fromBase58(value)\n    }\n\n    throw new Error('Cannot construct AccountID from value given')\n  }\n\n  /**\n   * Defines how to build an AccountID from a base58 r-Address\n   *\n   * @param value a base58 r-Address\n   * @returns an AccountID object\n   */\n  static fromBase58(value: string): AccountID {\n    if (isValidXAddress(value)) {\n      const classic = xAddressToClassicAddress(value)\n\n      if (classic.tag !== false)\n        throw new Error('Only allowed to have tag on Account or Destination')\n\n      value = classic.classicAddress\n    }\n\n    return new AccountID(Uint8Array.from(decodeAccountID(value)))\n  }\n\n  /**\n   * Overload of toJSON\n   *\n   * @returns the base58 string for this AccountID\n   */\n  toJSON(): string {\n    return this.toBase58()\n  }\n\n  /**\n   * Defines how to encode AccountID into a base58 address\n   *\n   * @returns the base58 string defined by this.bytes\n   */\n  toBase58(): string {\n    return encodeAccountID(this.bytes)\n  }\n}\n\nexport { AccountID }\n", "import {\n  XrplDefinitionsBase,\n  DEFAULT_DEFINITIONS,\n  FieldInstance,\n} from '../enums'\nimport { type SerializedType } from '../types/serialized-type'\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\n\n/**\n * BinaryParser is used to compute fields and values from a HexString\n */\nclass BinaryParser {\n  private bytes: Uint8Array\n  definitions: XrplDefinitionsBase\n\n  /**\n   * Initialize bytes to a hex string\n   *\n   * @param hexBytes a hex string\n   * @param definitions Rippled definitions used to parse the values of transaction types and such.\n   *                          Can be customized for sidechains and amendments.\n   */\n  constructor(\n    hexBytes: string,\n    definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n  ) {\n    this.bytes = hexToBytes(hexBytes)\n    this.definitions = definitions\n  }\n\n  /**\n   * Peek the first byte of the BinaryParser\n   *\n   * @returns The first byte of the BinaryParser\n   */\n  peek(): number {\n    if (this.bytes.byteLength === 0) {\n      throw new Error()\n    }\n    return this.bytes[0]\n  }\n\n  /**\n   * Consume the first n bytes of the BinaryParser\n   *\n   * @param n the number of bytes to skip\n   */\n  skip(n: number): void {\n    if (n > this.bytes.byteLength) {\n      throw new Error()\n    }\n    this.bytes = this.bytes.slice(n)\n  }\n\n  /**\n   * read the first n bytes from the BinaryParser\n   *\n   * @param n The number of bytes to read\n   * @return The bytes\n   */\n  read(n: number): Uint8Array {\n    if (n > this.bytes.byteLength) {\n      throw new Error()\n    }\n\n    const slice = this.bytes.slice(0, n)\n    this.skip(n)\n    return slice\n  }\n\n  /**\n   * Read an integer of given size\n   *\n   * @param n The number of bytes to read\n   * @return The number represented by those bytes\n   */\n  readUIntN(n: number): number {\n    if (0 >= n || n > 4) {\n      throw new Error('invalid n')\n    }\n    return this.read(n).reduce((a, b) => (a << 8) | b) >>> 0\n  }\n\n  readUInt8(): number {\n    return this.readUIntN(1)\n  }\n\n  readUInt16(): number {\n    return this.readUIntN(2)\n  }\n\n  readUInt32(): number {\n    return this.readUIntN(4)\n  }\n\n  size(): number {\n    return this.bytes.byteLength\n  }\n\n  end(customEnd?: number): boolean {\n    const length = this.bytes.byteLength\n    return length === 0 || (customEnd !== undefined && length <= customEnd)\n  }\n\n  /**\n   * Reads variable length encoded bytes\n   *\n   * @return The variable length bytes\n   */\n  readVariableLength(): Uint8Array {\n    return this.read(this.readVariableLengthLength())\n  }\n\n  /**\n   * Reads the length of the variable length encoded bytes\n   *\n   * @return The length of the variable length encoded bytes\n   */\n  readVariableLengthLength(): number {\n    const b1 = this.readUInt8()\n    if (b1 <= 192) {\n      return b1\n    } else if (b1 <= 240) {\n      const b2 = this.readUInt8()\n      return 193 + (b1 - 193) * 256 + b2\n    } else if (b1 <= 254) {\n      const b2 = this.readUInt8()\n      const b3 = this.readUInt8()\n      return 12481 + (b1 - 241) * 65536 + b2 * 256 + b3\n    }\n    throw new Error('Invalid variable length indicator')\n  }\n\n  /**\n   * Reads the field ordinal from the BinaryParser\n   *\n   * @return Field ordinal\n   */\n  readFieldOrdinal(): number {\n    let type = this.readUInt8()\n    let nth = type & 15\n    type >>= 4\n\n    if (type === 0) {\n      type = this.readUInt8()\n      if (type === 0 || type < 16) {\n        throw new Error(\n          `Cannot read FieldOrdinal, type_code ${type} out of range`,\n        )\n      }\n    }\n\n    if (nth === 0) {\n      nth = this.readUInt8()\n      if (nth === 0 || nth < 16) {\n        throw new Error(\n          `Cannot read FieldOrdinal, field_code ${nth} out of range`,\n        )\n      }\n    }\n\n    return (type << 16) | nth\n  }\n\n  /**\n   * Read the field from the BinaryParser\n   *\n   * @return The field represented by the bytes at the head of the BinaryParser\n   */\n  readField(): FieldInstance {\n    return this.definitions.field.fromString(this.readFieldOrdinal().toString())\n  }\n\n  /**\n   * Read a given type from the BinaryParser\n   *\n   * @param type The type that you want to read from the BinaryParser\n   * @return The instance of that type read from the BinaryParser\n   */\n  readType(type: typeof SerializedType): SerializedType {\n    return type.fromParser(this)\n  }\n\n  /**\n   * Get the type associated with a given field\n   *\n   * @param field The field that you wan to get the type of\n   * @return The type associated with the given field\n   */\n  typeForField(field: FieldInstance): typeof SerializedType {\n    return field.associatedType\n  }\n\n  /**\n   * Read value of the type specified by field from the BinaryParser\n   *\n   * @param field The field that you want to get the associated value for\n   * @return The value associated with the given field\n   */\n  readFieldValue(field: FieldInstance): SerializedType {\n    const type = this.typeForField(field)\n    if (!type) {\n      throw new Error(`unsupported: (${field.name}, ${field.type.name})`)\n    }\n    const sizeHint = field.isVariableLengthEncoded\n      ? this.readVariableLengthLength()\n      : undefined\n    const value = type.fromParser(this, sizeHint)\n    if (value === undefined) {\n      throw new Error(\n        `fromParser for (${field.name}, ${field.type.name}) -> undefined `,\n      )\n    }\n    return value\n  }\n\n  /**\n   * Get the next field and value from the BinaryParser\n   *\n   * @return The field and value\n   */\n  readFieldAndValue(): [FieldInstance, SerializedType] {\n    const field = this.readField()\n    return [field, this.readFieldValue(field)]\n  }\n}\n\nexport { BinaryParser }\n", "import { Hash160 } from './hash-160'\nimport { bytesToHex, hexToBytes, hexToString } from '@xrplf/isomorphic/utils'\n\nconst XRP_HEX_REGEX = /^0{40}$/\nconst ISO_REGEX = /^[A-Z0-9a-z?!@#$%^&*(){}[\\]|]{3}$/\nconst HEX_REGEX = /^[A-F0-9]{40}$/\n// eslint-disable-next-line no-control-regex\nconst STANDARD_FORMAT_HEX_REGEX = /^0{24}[\\x00-\\x7F]{6}0{10}$/\n\n/**\n * Convert an ISO code to a currency bytes representation\n */\nfunction isoToBytes(iso: string): Uint8Array {\n  const bytes = new Uint8Array(20)\n  if (iso !== 'XRP') {\n    const isoBytes = iso.split('').map((c) => c.charCodeAt(0))\n    bytes.set(isoBytes, 12)\n  }\n  return bytes\n}\n\n/**\n * Tests if ISO is a valid iso code\n */\nfunction isIsoCode(iso: string): boolean {\n  return ISO_REGEX.test(iso)\n}\n\nfunction isoCodeFromHex(code: Uint8Array): string | null {\n  const iso = hexToString(bytesToHex(code))\n  if (iso === 'XRP') {\n    return null\n  }\n  if (isIsoCode(iso)) {\n    return iso\n  }\n  return null\n}\n\n/**\n * Tests if hex is a valid hex-string\n */\nfunction isHex(hex: string): boolean {\n  return HEX_REGEX.test(hex)\n}\n\n/**\n * Tests if a string is a valid representation of a currency\n */\nfunction isStringRepresentation(input: string): boolean {\n  return input.length === 3 || isHex(input)\n}\n\n/**\n * Tests if a Uint8Array is a valid representation of a currency\n */\nfunction isBytesArray(bytes: Uint8Array): boolean {\n  return bytes.byteLength === 20\n}\n\n/**\n * Ensures that a value is a valid representation of a currency\n */\nfunction isValidRepresentation(input: Uint8Array | string): boolean {\n  return input instanceof Uint8Array\n    ? isBytesArray(input)\n    : isStringRepresentation(input)\n}\n\n/**\n * Generate bytes from a string or UInt8Array representation of a currency\n */\nfunction bytesFromRepresentation(input: string): Uint8Array {\n  if (!isValidRepresentation(input)) {\n    throw new Error(`Unsupported Currency representation: ${input}`)\n  }\n  return input.length === 3 ? isoToBytes(input) : hexToBytes(input)\n}\n\n/**\n * Class defining how to encode and decode Currencies\n */\nclass Currency extends Hash160 {\n  static readonly XRP = new Currency(new Uint8Array(20))\n  private readonly _iso: string | null\n\n  constructor(byteBuf: Uint8Array) {\n    super(byteBuf ?? Currency.XRP.bytes)\n    const hex = bytesToHex(this.bytes)\n\n    if (XRP_HEX_REGEX.test(hex)) {\n      this._iso = 'XRP'\n    } else if (STANDARD_FORMAT_HEX_REGEX.test(hex)) {\n      this._iso = isoCodeFromHex(this.bytes.slice(12, 15))\n    } else {\n      this._iso = null\n    }\n  }\n\n  /**\n   * Return the ISO code of this currency\n   *\n   * @returns ISO code if it exists, else null\n   */\n  iso(): string | null {\n    return this._iso\n  }\n\n  /**\n   * Constructs a Currency object\n   *\n   * @param val Currency object or a string representation of a currency\n   */\n  static from<T extends Hash160 | string>(value: T): Currency {\n    if (value instanceof Currency) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      return new Currency(bytesFromRepresentation(value))\n    }\n\n    throw new Error('Cannot construct Currency from value given')\n  }\n\n  /**\n   * Gets the JSON representation of a currency\n   *\n   * @returns JSON representation\n   */\n  toJSON(): string {\n    const iso = this.iso()\n    if (iso !== null) {\n      return iso\n    }\n    return bytesToHex(this.bytes)\n  }\n}\n\nexport { Currency }\n", ";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.3.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // The index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n", "import { Hash } from './hash'\n\n/**\n * Hash with a width of 192 bits\n */\nclass Hash192 extends Hash {\n  static readonly width = 24\n  static readonly ZERO_192: Hash192 = new Hash192(new Uint8Array(Hash192.width))\n\n  constructor(bytes?: Uint8Array) {\n    if (bytes && bytes.byteLength === 0) {\n      bytes = Hash192.ZERO_192.bytes\n    }\n\n    super(bytes ?? Hash192.ZERO_192.bytes)\n  }\n}\n\nexport { Hash192 }\n", "import { BinaryParser } from '../serdes/binary-parser'\n\nimport { AccountID } from './account-id'\nimport { Currency } from './currency'\nimport { JsonObject, SerializedType } from './serialized-type'\nimport BigNumber from 'bignumber.js'\nimport { bytesToHex, concat, hexToBytes } from '@xrplf/isomorphic/utils'\nimport { readUInt32BE, writeUInt32BE } from '../utils'\nimport { Hash192 } from './hash-192'\n\n/**\n * Constants for validating amounts\n */\nconst MIN_IOU_EXPONENT = -96\nconst MAX_IOU_EXPONENT = 80\nconst MAX_IOU_PRECISION = 16\nconst MAX_DROPS = new BigNumber('1e17')\nconst MIN_XRP = new BigNumber('1e-6')\nconst mask = BigInt(0x00000000ffffffff)\nconst mptMask = BigInt(0x8000000000000000)\n\n/**\n * BigNumber configuration for Amount IOUs\n */\nBigNumber.config({\n  EXPONENTIAL_AT: [\n    MIN_IOU_EXPONENT - MAX_IOU_PRECISION,\n    MAX_IOU_EXPONENT + MAX_IOU_PRECISION,\n  ],\n})\n\ninterface AmountObjectIOU extends JsonObject {\n  value: string\n  currency: string\n  issuer: string\n}\n\ninterface AmountObjectMPT extends JsonObject {\n  value: string\n  mpt_issuance_id: string\n}\n\n/**\n * Interface for JSON objects that represent amounts\n */\ntype AmountObject = AmountObjectIOU | AmountObjectMPT\n\n/**\n * Type guard for AmountObjectIOU\n */\nfunction isAmountObjectIOU(arg): arg is AmountObjectIOU {\n  const keys = Object.keys(arg).sort()\n\n  return (\n    keys.length === 3 &&\n    keys[0] === 'currency' &&\n    keys[1] === 'issuer' &&\n    keys[2] === 'value'\n  )\n}\n\n/**\n * Type guard for AmountObjectMPT\n */\nfunction isAmountObjectMPT(arg): arg is AmountObjectMPT {\n  const keys = Object.keys(arg).sort()\n\n  return (\n    keys.length === 2 && keys[0] === 'mpt_issuance_id' && keys[1] === 'value'\n  )\n}\n\n/**\n * Class for serializing/Deserializing Amounts\n */\nclass Amount extends SerializedType {\n  static defaultAmount: Amount = new Amount(hexToBytes('4000000000000000'))\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? Amount.defaultAmount.bytes)\n  }\n\n  /**\n   * Construct an amount from an IOU, MPT or string amount\n   *\n   * @param value An Amount, object representing an IOU, or a string\n   *     representing an integer amount\n   * @returns An Amount object\n   */\n  static from<T extends Amount | AmountObject | string>(value: T): Amount {\n    if (value instanceof Amount) {\n      return value\n    }\n\n    let amount = new Uint8Array(8)\n    if (typeof value === 'string') {\n      Amount.assertXrpIsValid(value)\n\n      const number = BigInt(value)\n\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(number >> BigInt(32)), 0)\n      writeUInt32BE(intBuf[1], Number(number & BigInt(mask)), 0)\n\n      amount = concat(intBuf)\n\n      amount[0] |= 0x40\n\n      return new Amount(amount)\n    }\n\n    if (isAmountObjectIOU(value)) {\n      const number = new BigNumber(value.value)\n      Amount.assertIouIsValid(number)\n\n      if (number.isZero()) {\n        amount[0] |= 0x80\n      } else {\n        const integerNumberString = number\n          .times(`1e${-((number.e || 0) - 15)}`)\n          .abs()\n          .toString()\n\n        const num = BigInt(integerNumberString)\n        const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n        writeUInt32BE(intBuf[0], Number(num >> BigInt(32)), 0)\n        writeUInt32BE(intBuf[1], Number(num & BigInt(mask)), 0)\n\n        amount = concat(intBuf)\n\n        amount[0] |= 0x80\n\n        if (number.gt(new BigNumber(0))) {\n          amount[0] |= 0x40\n        }\n\n        const exponent = (number.e || 0) - 15\n        const exponentByte = 97 + exponent\n        amount[0] |= exponentByte >>> 2\n        amount[1] |= (exponentByte & 0x03) << 6\n      }\n\n      const currency = Currency.from(value.currency).toBytes()\n      const issuer = AccountID.from(value.issuer).toBytes()\n      return new Amount(concat([amount, currency, issuer]))\n    }\n\n    if (isAmountObjectMPT(value)) {\n      Amount.assertMptIsValid(value.value)\n\n      let leadingByte = new Uint8Array(1)\n      leadingByte[0] |= 0x60\n\n      const num = BigInt(value.value)\n\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(num >> BigInt(32)), 0)\n      writeUInt32BE(intBuf[1], Number(num & BigInt(mask)), 0)\n\n      amount = concat(intBuf)\n\n      const mptIssuanceID = Hash192.from(value.mpt_issuance_id).toBytes()\n      return new Amount(concat([leadingByte, amount, mptIssuanceID]))\n    }\n\n    throw new Error('Invalid type to construct an Amount')\n  }\n\n  /**\n   * Read an amount from a BinaryParser\n   *\n   * @param parser BinaryParser to read the Amount from\n   * @returns An Amount object\n   */\n  static fromParser(parser: BinaryParser): Amount {\n    const isIOU = parser.peek() & 0x80\n    if (isIOU) return new Amount(parser.read(48))\n\n    // the amount can be either MPT or XRP at this point\n    const isMPT = parser.peek() & 0x20\n    const numBytes = isMPT ? 33 : 8\n    return new Amount(parser.read(numBytes))\n  }\n\n  /**\n   * Get the JSON representation of this Amount\n   *\n   * @returns the JSON interpretation of this.bytes\n   */\n  toJSON(): AmountObject | string {\n    if (this.isNative()) {\n      const bytes = this.bytes\n      const isPositive = bytes[0] & 0x40\n      const sign = isPositive ? '' : '-'\n      bytes[0] &= 0x3f\n\n      const msb = BigInt(readUInt32BE(bytes.slice(0, 4), 0))\n      const lsb = BigInt(readUInt32BE(bytes.slice(4), 0))\n      const num = (msb << BigInt(32)) | lsb\n\n      return `${sign}${num.toString()}`\n    }\n\n    if (this.isIOU()) {\n      const parser = new BinaryParser(this.toString())\n      const mantissa = parser.read(8)\n      const currency = Currency.fromParser(parser) as Currency\n      const issuer = AccountID.fromParser(parser) as AccountID\n\n      const b1 = mantissa[0]\n      const b2 = mantissa[1]\n\n      const isPositive = b1 & 0x40\n      const sign = isPositive ? '' : '-'\n      const exponent = ((b1 & 0x3f) << 2) + ((b2 & 0xff) >> 6) - 97\n\n      mantissa[0] = 0\n      mantissa[1] &= 0x3f\n      const value = new BigNumber(`${sign}0x${bytesToHex(mantissa)}`).times(\n        `1e${exponent}`,\n      )\n      Amount.assertIouIsValid(value)\n\n      return {\n        value: value.toString(),\n        currency: currency.toJSON(),\n        issuer: issuer.toJSON(),\n      }\n    }\n\n    if (this.isMPT()) {\n      const parser = new BinaryParser(this.toString())\n      const leadingByte = parser.read(1)\n      const amount = parser.read(8)\n      const mptID = Hash192.fromParser(parser) as Hash192\n\n      const isPositive = leadingByte[0] & 0x40\n      const sign = isPositive ? '' : '-'\n\n      const msb = BigInt(readUInt32BE(amount.slice(0, 4), 0))\n      const lsb = BigInt(readUInt32BE(amount.slice(4), 0))\n      const num = (msb << BigInt(32)) | lsb\n\n      return {\n        value: `${sign}${num.toString()}`,\n        mpt_issuance_id: mptID.toString(),\n      }\n    }\n\n    throw new Error('Invalid amount to construct JSON')\n  }\n\n  /**\n   * Validate XRP amount\n   *\n   * @param amount String representing XRP amount\n   * @returns void, but will throw if invalid amount\n   */\n  private static assertXrpIsValid(amount: string): void {\n    if (amount.indexOf('.') !== -1) {\n      throw new Error(`${amount.toString()} is an illegal amount`)\n    }\n\n    const decimal = new BigNumber(amount)\n    if (!decimal.isZero()) {\n      if (decimal.lt(MIN_XRP) || decimal.gt(MAX_DROPS)) {\n        throw new Error(`${amount.toString()} is an illegal amount`)\n      }\n    }\n  }\n\n  /**\n   * Validate IOU.value amount\n   *\n   * @param decimal BigNumber object representing IOU.value\n   * @returns void, but will throw if invalid amount\n   */\n  private static assertIouIsValid(decimal: BigNumber): void {\n    if (!decimal.isZero()) {\n      const p = decimal.precision()\n      const e = (decimal.e || 0) - 15\n      if (\n        p > MAX_IOU_PRECISION ||\n        e > MAX_IOU_EXPONENT ||\n        e < MIN_IOU_EXPONENT\n      ) {\n        throw new Error('Decimal precision out of range')\n      }\n      this.verifyNoDecimal(decimal)\n    }\n  }\n\n  /**\n   * Validate MPT.value amount\n   *\n   * @param decimal BigNumber object representing MPT.value\n   * @returns void, but will throw if invalid amount\n   */\n  private static assertMptIsValid(amount: string): void {\n    if (amount.indexOf('.') !== -1) {\n      throw new Error(`${amount.toString()} is an illegal amount`)\n    }\n\n    const decimal = new BigNumber(amount)\n    if (!decimal.isZero()) {\n      if (decimal < BigNumber(0)) {\n        throw new Error(`${amount.toString()} is an illegal amount`)\n      }\n\n      if (Number(BigInt(amount) & BigInt(mptMask)) != 0) {\n        throw new Error(`${amount.toString()} is an illegal amount`)\n      }\n    }\n  }\n\n  /**\n   * Ensure that the value after being multiplied by the exponent does not\n   * contain a decimal.\n   *\n   * @param decimal a Decimal object\n   * @returns a string of the object without a decimal\n   */\n  private static verifyNoDecimal(decimal: BigNumber): void {\n    const integerNumberString = decimal\n      .times(`1e${-((decimal.e || 0) - 15)}`)\n      .abs()\n      .toString()\n\n    if (integerNumberString.indexOf('.') !== -1) {\n      throw new Error('Decimal place found in integerNumberString')\n    }\n  }\n\n  /**\n   * Test if this amount is in units of Native Currency(XRP)\n   *\n   * @returns true if Native (XRP)\n   */\n  private isNative(): boolean {\n    return (this.bytes[0] & 0x80) === 0 && (this.bytes[0] & 0x20) === 0\n  }\n\n  /**\n   * Test if this amount is in units of MPT\n   *\n   * @returns true if MPT\n   */\n  private isMPT(): boolean {\n    return (this.bytes[0] & 0x80) === 0 && (this.bytes[0] & 0x20) !== 0\n  }\n\n  /**\n   * Test if this amount is in units of IOU\n   *\n   * @returns true if IOU\n   */\n  private isIOU(): boolean {\n    return (this.bytes[0] & 0x80) !== 0\n  }\n}\n\nexport { Amount, AmountObject }\n", "import { SerializedType } from './serialized-type'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\n\n/**\n * Variable length encoded type\n */\nclass Blob extends SerializedType {\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n  }\n\n  /**\n   * Defines how to read a Blob from a BinaryParser\n   *\n   * @param parser The binary parser to read the Blob from\n   * @param hint The length of the blob, computed by readVariableLengthLength() and passed in\n   * @returns A Blob object\n   */\n  static fromParser(parser: BinaryParser, hint: number): Blob {\n    return new Blob(parser.read(hint))\n  }\n\n  /**\n   * Create a Blob object from a hex-string\n   *\n   * @param value existing Blob object or a hex-string\n   * @returns A Blob object\n   */\n  static from<T extends Blob | string>(value: T): Blob {\n    if (value instanceof Blob) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      if (!/^[A-F0-9]*$/iu.test(value)) {\n        throw new Error('Cannot construct Blob from a non-hex string')\n      }\n      return new Blob(hexToBytes(value))\n    }\n\n    throw new Error('Cannot construct Blob from value given')\n  }\n}\n\nexport { Blob }\n", "import { Hash } from './hash'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\n/**\n * Hash with a width of 128 bits\n */\nclass Hash128 extends Hash {\n  static readonly width = 16\n  static readonly ZERO_128: Hash128 = new Hash128(new Uint8Array(Hash128.width))\n\n  constructor(bytes: Uint8Array) {\n    if (bytes && bytes.byteLength === 0) {\n      bytes = Hash128.ZERO_128.bytes\n    }\n\n    super(bytes ?? Hash128.ZERO_128.bytes)\n  }\n\n  /**\n   * Get the hex representation of a hash-128 bytes, allowing unset\n   *\n   * @returns hex String of this.bytes\n   */\n  toHex(): string {\n    const hex = bytesToHex(this.toBytes())\n    if (/^0+$/.exec(hex)) {\n      return ''\n    }\n    return hex\n  }\n}\n\nexport { Hash128 }\n", "import { Hash } from './hash'\n\n/**\n * Hash with a width of 256 bits\n */\nclass Hash256 extends Hash {\n  static readonly width = 32\n  static readonly ZERO_256 = new Hash256(new Uint8Array(Hash256.width))\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? Hash256.ZERO_256.bytes)\n  }\n}\n\nexport { Hash256 }\n", "import { concat } from '@xrplf/isomorphic/utils'\nimport { BinaryParser } from '../serdes/binary-parser'\n\nimport { AccountID } from './account-id'\nimport { Currency } from './currency'\nimport { JsonObject, SerializedType } from './serialized-type'\n\n/**\n * Interface for JSON objects that represent amounts\n */\ninterface IssueObject extends JsonObject {\n  currency: string\n  issuer?: string\n}\n\n/**\n * Type guard for AmountObject\n */\nfunction isIssueObject(arg): arg is IssueObject {\n  const keys = Object.keys(arg).sort()\n  if (keys.length === 1) {\n    return keys[0] === 'currency'\n  }\n  return keys.length === 2 && keys[0] === 'currency' && keys[1] === 'issuer'\n}\n\n/**\n * Class for serializing/Deserializing Amounts\n */\nclass Issue extends SerializedType {\n  static readonly ZERO_ISSUED_CURRENCY: Issue = new Issue(new Uint8Array(20))\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? Issue.ZERO_ISSUED_CURRENCY.bytes)\n  }\n\n  /**\n   * Construct an amount from an IOU or string amount\n   *\n   * @param value An Amount, object representing an IOU, or a string\n   *     representing an integer amount\n   * @returns An Amount object\n   */\n  static from<T extends Issue | IssueObject>(value: T): Issue {\n    if (value instanceof Issue) {\n      return value\n    }\n\n    if (isIssueObject(value)) {\n      const currency = Currency.from(value.currency).toBytes()\n      if (value.issuer == null) {\n        return new Issue(currency)\n      }\n      const issuer = AccountID.from(value.issuer).toBytes()\n      return new Issue(concat([currency, issuer]))\n    }\n\n    throw new Error('Invalid type to construct an Amount')\n  }\n\n  /**\n   * Read an amount from a BinaryParser\n   *\n   * @param parser BinaryParser to read the Amount from\n   * @returns An Amount object\n   */\n  static fromParser(parser: BinaryParser): Issue {\n    const currency = parser.read(20)\n    if (new Currency(currency).toJSON() === 'XRP') {\n      return new Issue(currency)\n    }\n    const currencyAndIssuer = [currency, parser.read(20)]\n    return new Issue(concat(currencyAndIssuer))\n  }\n\n  /**\n   * Get the JSON representation of this Amount\n   *\n   * @returns the JSON interpretation of this.bytes\n   */\n  toJSON(): IssueObject {\n    const parser = new BinaryParser(this.toString())\n    const currency = Currency.fromParser(parser) as Currency\n    if (currency.toJSON() === 'XRP') {\n      return { currency: currency.toJSON() }\n    }\n    const issuer = AccountID.fromParser(parser) as AccountID\n\n    return {\n      currency: currency.toJSON(),\n      issuer: issuer.toJSON(),\n    }\n  }\n}\n\nexport { Issue, IssueObject }\n", "import { AccountID } from './account-id'\nimport { Currency } from './currency'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { SerializedType, JsonObject } from './serialized-type'\nimport { bytesToHex, concat } from '@xrplf/isomorphic/utils'\n\n/**\n * Constants for separating Paths in a PathSet\n */\nconst PATHSET_END_BYTE = 0x00\nconst PATH_SEPARATOR_BYTE = 0xff\n\n/**\n * Constant for masking types of a Hop\n */\nconst TYPE_ACCOUNT = 0x01\nconst TYPE_CURRENCY = 0x10\nconst TYPE_ISSUER = 0x20\n\n/**\n * The object representation of a Hop, an issuer AccountID, an account AccountID, and a Currency\n */\ninterface HopObject extends JsonObject {\n  issuer?: string\n  account?: string\n  currency?: string\n}\n\n/**\n * TypeGuard for HopObject\n */\nfunction isHopObject(arg): arg is HopObject {\n  return (\n    arg.issuer !== undefined ||\n    arg.account !== undefined ||\n    arg.currency !== undefined\n  )\n}\n\n/**\n * TypeGuard for PathSet\n */\nfunction isPathSet(arg): arg is Array<Array<HopObject>> {\n  return (\n    (Array.isArray(arg) && arg.length === 0) ||\n    (Array.isArray(arg) && Array.isArray(arg[0]) && arg[0].length === 0) ||\n    (Array.isArray(arg) && Array.isArray(arg[0]) && isHopObject(arg[0][0]))\n  )\n}\n\n/**\n * Serialize and Deserialize a Hop\n */\nclass Hop extends SerializedType {\n  /**\n   * Create a Hop from a HopObject\n   *\n   * @param value Either a hop or HopObject to create a hop with\n   * @returns a Hop\n   */\n  static from(value: Hop | HopObject): Hop {\n    if (value instanceof Hop) {\n      return value\n    }\n\n    const bytes: Array<Uint8Array> = [Uint8Array.from([0])]\n\n    if (value.account) {\n      bytes.push(AccountID.from(value.account).toBytes())\n      bytes[0][0] |= TYPE_ACCOUNT\n    }\n\n    if (value.currency) {\n      bytes.push(Currency.from(value.currency).toBytes())\n      bytes[0][0] |= TYPE_CURRENCY\n    }\n\n    if (value.issuer) {\n      bytes.push(AccountID.from(value.issuer).toBytes())\n      bytes[0][0] |= TYPE_ISSUER\n    }\n\n    return new Hop(concat(bytes))\n  }\n\n  /**\n   * Construct a Hop from a BinaryParser\n   *\n   * @param parser BinaryParser to read the Hop from\n   * @returns a Hop\n   */\n  static fromParser(parser: BinaryParser): Hop {\n    const type = parser.readUInt8()\n    const bytes: Array<Uint8Array> = [Uint8Array.from([type])]\n\n    if (type & TYPE_ACCOUNT) {\n      bytes.push(parser.read(AccountID.width))\n    }\n\n    if (type & TYPE_CURRENCY) {\n      bytes.push(parser.read(Currency.width))\n    }\n\n    if (type & TYPE_ISSUER) {\n      bytes.push(parser.read(AccountID.width))\n    }\n\n    return new Hop(concat(bytes))\n  }\n\n  /**\n   * Get the JSON interpretation of this hop\n   *\n   * @returns a HopObject, an JS object with optional account, issuer, and currency\n   */\n  toJSON(): HopObject {\n    const hopParser = new BinaryParser(bytesToHex(this.bytes))\n    const type = hopParser.readUInt8()\n\n    let account, currency, issuer\n    if (type & TYPE_ACCOUNT) {\n      account = (AccountID.fromParser(hopParser) as AccountID).toJSON()\n    }\n\n    if (type & TYPE_CURRENCY) {\n      currency = (Currency.fromParser(hopParser) as Currency).toJSON()\n    }\n\n    if (type & TYPE_ISSUER) {\n      issuer = (AccountID.fromParser(hopParser) as AccountID).toJSON()\n    }\n\n    const result: HopObject = {}\n    if (account) {\n      result.account = account\n    }\n\n    if (issuer) {\n      result.issuer = issuer\n    }\n\n    if (currency) {\n      result.currency = currency\n    }\n\n    return result\n  }\n\n  /**\n   * get a number representing the type of this hop\n   *\n   * @returns a number to be bitwise and-ed with TYPE_ constants to describe the types in the hop\n   */\n  type(): number {\n    return this.bytes[0]\n  }\n}\n\n/**\n * Class for serializing/deserializing Paths\n */\nclass Path extends SerializedType {\n  /**\n   * construct a Path from an array of Hops\n   *\n   * @param value Path or array of HopObjects to construct a Path\n   * @returns the Path\n   */\n  static from(value: Path | Array<HopObject>): Path {\n    if (value instanceof Path) {\n      return value\n    }\n\n    const bytes: Array<Uint8Array> = []\n    value.forEach((hop: HopObject) => {\n      bytes.push(Hop.from(hop).toBytes())\n    })\n\n    return new Path(concat(bytes))\n  }\n\n  /**\n   * Read a Path from a BinaryParser\n   *\n   * @param parser BinaryParser to read Path from\n   * @returns the Path represented by the bytes read from the BinaryParser\n   */\n  static fromParser(parser: BinaryParser): Path {\n    const bytes: Array<Uint8Array> = []\n    while (!parser.end()) {\n      bytes.push(Hop.fromParser(parser).toBytes())\n\n      if (\n        parser.peek() === PATHSET_END_BYTE ||\n        parser.peek() === PATH_SEPARATOR_BYTE\n      ) {\n        break\n      }\n    }\n    return new Path(concat(bytes))\n  }\n\n  /**\n   * Get the JSON representation of this Path\n   *\n   * @returns an Array of HopObject constructed from this.bytes\n   */\n  toJSON(): Array<HopObject> {\n    const json: Array<HopObject> = []\n    const pathParser = new BinaryParser(this.toString())\n\n    while (!pathParser.end()) {\n      json.push(Hop.fromParser(pathParser).toJSON())\n    }\n\n    return json\n  }\n}\n\n/**\n * Deserialize and Serialize the PathSet type\n */\nclass PathSet extends SerializedType {\n  /**\n   * Construct a PathSet from an Array of Arrays representing paths\n   *\n   * @param value A PathSet or Array of Array of HopObjects\n   * @returns the PathSet constructed from value\n   */\n  static from<T extends PathSet | Array<Array<HopObject>>>(value: T): PathSet {\n    if (value instanceof PathSet) {\n      return value\n    }\n\n    if (isPathSet(value)) {\n      const bytes: Array<Uint8Array> = []\n\n      value.forEach((path: Array<HopObject>) => {\n        bytes.push(Path.from(path).toBytes())\n        bytes.push(Uint8Array.from([PATH_SEPARATOR_BYTE]))\n      })\n\n      bytes[bytes.length - 1] = Uint8Array.from([PATHSET_END_BYTE])\n\n      return new PathSet(concat(bytes))\n    }\n\n    throw new Error('Cannot construct PathSet from given value')\n  }\n\n  /**\n   * Construct a PathSet from a BinaryParser\n   *\n   * @param parser A BinaryParser to read PathSet from\n   * @returns the PathSet read from parser\n   */\n  static fromParser(parser: BinaryParser): PathSet {\n    const bytes: Array<Uint8Array> = []\n\n    while (!parser.end()) {\n      bytes.push(Path.fromParser(parser).toBytes())\n      bytes.push(parser.read(1))\n\n      if (bytes[bytes.length - 1][0] == PATHSET_END_BYTE) {\n        break\n      }\n    }\n\n    return new PathSet(concat(bytes))\n  }\n\n  /**\n   * Get the JSON representation of this PathSet\n   *\n   * @returns an Array of Array of HopObjects, representing this PathSet\n   */\n  toJSON(): Array<Array<HopObject>> {\n    const json: Array<Array<HopObject>> = []\n    const pathParser = new BinaryParser(this.toString())\n\n    while (!pathParser.end()) {\n      json.push(Path.fromParser(pathParser).toJSON())\n      pathParser.skip(1)\n    }\n\n    return json\n  }\n}\n\nexport { PathSet }\n", "import { Comparable } from './serialized-type'\n\n/**\n * Compare numbers and bigInts n1 and n2\n *\n * @param n1 First object to compare\n * @param n2 Second object to compare\n * @returns -1, 0, or 1, depending on how the two objects compare\n */\nfunction compare(n1: number | bigint, n2: number | bigint): number {\n  return n1 < n2 ? -1 : n1 == n2 ? 0 : 1\n}\n\n/**\n * Base class for serializing and deserializing unsigned integers.\n */\nabstract class UInt extends Comparable<UInt | number> {\n  protected static width: number\n\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n  }\n\n  /**\n   * Overload of compareTo for Comparable\n   *\n   * @param other other UInt to compare this to\n   * @returns -1, 0, or 1 depending on how the objects relate to each other\n   */\n  compareTo(other: UInt | number): number {\n    return compare(this.valueOf(), other.valueOf())\n  }\n\n  /**\n   * Convert a UInt object to JSON\n   *\n   * @returns number or string represented by this.bytes\n   */\n  toJSON(): number | string {\n    const val = this.valueOf()\n    return typeof val === 'number' ? val : val.toString()\n  }\n\n  /**\n   * Get the value of the UInt represented by this.bytes\n   *\n   * @returns the value\n   */\n  abstract valueOf(): number | bigint\n\n  static checkUintRange(val: number, min: number, max: number): void {\n    if (val < min || val > max) {\n      throw new Error(\n        `Invalid ${this.constructor.name}: ${val} must be >= ${min} and <= ${max}`,\n      )\n    }\n  }\n}\n\nexport { UInt }\n", "import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { bytesToHex, concat, hexToBytes } from '@xrplf/isomorphic/utils'\nimport { readUInt32BE, writeUInt32BE } from '../utils'\nimport { DEFAULT_DEFINITIONS, XrplDefinitionsBase } from '../enums'\n\nconst HEX_REGEX = /^[a-fA-F0-9]{1,16}$/\nconst BASE10_REGEX = /^[0-9]{1,20}$/\nconst mask = BigInt(0x00000000ffffffff)\n\nfunction useBase10(fieldName: string): boolean {\n  return (\n    fieldName === 'MaximumAmount' ||\n    fieldName === 'OutstandingAmount' ||\n    fieldName === 'MPTAmount'\n  )\n}\n\n/**\n * Derived UInt class for serializing/deserializing 64 bit UInt\n */\nclass UInt64 extends UInt {\n  protected static readonly width: number = 64 / 8 // 8\n  static readonly defaultUInt64: UInt64 = new UInt64(\n    new Uint8Array(UInt64.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt64.defaultUInt64.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt64(parser.read(UInt64.width))\n  }\n\n  /**\n   * Construct a UInt64 object\n   *\n   * @param val A UInt64, hex-string, bigInt, or number\n   * @returns A UInt64 object\n   */\n  static from<T extends UInt64 | string | bigint | number>(\n    val: T,\n    fieldName = '',\n  ): UInt64 {\n    if (val instanceof UInt64) {\n      return val\n    }\n\n    let buf = new Uint8Array(UInt64.width)\n\n    if (typeof val === 'number') {\n      if (val < 0) {\n        throw new Error('value must be an unsigned integer')\n      }\n\n      const number = BigInt(val)\n\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(number >> BigInt(32)), 0)\n      writeUInt32BE(intBuf[1], Number(number & BigInt(mask)), 0)\n\n      return new UInt64(concat(intBuf))\n    }\n\n    if (typeof val === 'string') {\n      if (useBase10(fieldName)) {\n        if (!BASE10_REGEX.test(val)) {\n          throw new Error(`${fieldName} ${val} is not a valid base 10 string`)\n        }\n        val = BigInt(val).toString(16) as T\n      }\n\n      if (typeof val === 'string' && !HEX_REGEX.test(val)) {\n        throw new Error(`${val} is not a valid hex-string`)\n      }\n\n      const strBuf = (val as string).padStart(16, '0')\n      buf = hexToBytes(strBuf)\n      return new UInt64(buf)\n    }\n\n    if (typeof val === 'bigint') {\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(Number(val >> BigInt(32))), 0)\n      writeUInt32BE(intBuf[1], Number(val & BigInt(mask)), 0)\n\n      return new UInt64(concat(intBuf))\n    }\n\n    throw new Error('Cannot construct UInt64 from given value')\n  }\n\n  /**\n   * The JSON representation of a UInt64 object\n   *\n   * @returns a hex-string\n   */\n  toJSON(\n    _definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n    fieldName = '',\n  ): string {\n    const hexString = bytesToHex(this.bytes)\n    if (useBase10(fieldName)) {\n      return BigInt('0x' + hexString).toString(10)\n    }\n\n    return hexString\n  }\n\n  /**\n   * Get the value of the UInt64\n   *\n   * @returns the number represented buy this.bytes\n   */\n  valueOf(): bigint {\n    const msb = BigInt(readUInt32BE(this.bytes.slice(0, 4), 0))\n    const lsb = BigInt(readUInt32BE(this.bytes.slice(4), 0))\n    return (msb << BigInt(32)) | lsb\n  }\n\n  /**\n   * Get the bytes representation of the UInt64 object\n   *\n   * @returns 8 bytes representing the UInt64\n   */\n  toBytes(): Uint8Array {\n    return this.bytes\n  }\n}\n\nexport { UInt64 }\n", "import {\n  DEFAULT_DEFINITIONS,\n  FieldInstance,\n  Bytes,\n  XrplDefinitionsBase,\n} from '../enums'\nimport { SerializedType, JsonObject } from './serialized-type'\nimport { xAddressToClassicAddress, isValidXAddress } from 'ripple-address-codec'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { BinarySerializer, BytesList } from '../serdes/binary-serializer'\n\nimport { STArray } from './st-array'\nimport { UInt64 } from './uint-64'\n\nconst OBJECT_END_MARKER_BYTE = Uint8Array.from([0xe1])\nconst OBJECT_END_MARKER = 'ObjectEndMarker'\nconst ST_OBJECT = 'STObject'\nconst DESTINATION = 'Destination'\nconst ACCOUNT = 'Account'\nconst SOURCE_TAG = 'SourceTag'\nconst DEST_TAG = 'DestinationTag'\n\n/**\n * Break down an X-Address into an account and a tag\n *\n * @param field Name of field\n * @param xAddress X-Address corresponding to the field\n */\nfunction handleXAddress(field: string, xAddress: string): JsonObject {\n  const decoded = xAddressToClassicAddress(xAddress)\n\n  let tagName\n  if (field === DESTINATION) tagName = DEST_TAG\n  else if (field === ACCOUNT) tagName = SOURCE_TAG\n  else if (decoded.tag !== false)\n    throw new Error(`${field} cannot have an associated tag`)\n\n  return decoded.tag !== false\n    ? { [field]: decoded.classicAddress, [tagName]: decoded.tag }\n    : { [field]: decoded.classicAddress }\n}\n\n/**\n * Validate that two objects don't both have the same tag fields\n *\n * @param obj1 First object to check for tags\n * @param obj2 Second object to check for tags\n * @throws When both objects have SourceTag or DestinationTag\n */\nfunction checkForDuplicateTags(obj1: JsonObject, obj2: JsonObject): void {\n  if (!(obj1[SOURCE_TAG] === undefined || obj2[SOURCE_TAG] === undefined))\n    throw new Error('Cannot have Account X-Address and SourceTag')\n  if (!(obj1[DEST_TAG] === undefined || obj2[DEST_TAG] === undefined))\n    throw new Error('Cannot have Destination X-Address and DestinationTag')\n}\n\n/**\n * Class for Serializing/Deserializing objects\n */\nclass STObject extends SerializedType {\n  /**\n   * Construct a STObject from a BinaryParser\n   *\n   * @param parser BinaryParser to read STObject from\n   * @returns A STObject object\n   */\n  static fromParser(parser: BinaryParser): STObject {\n    const list: BytesList = new BytesList()\n    const bytes: BinarySerializer = new BinarySerializer(list)\n\n    while (!parser.end()) {\n      const field = parser.readField()\n      if (field.name === OBJECT_END_MARKER) {\n        break\n      }\n\n      const associatedValue = parser.readFieldValue(field)\n\n      bytes.writeFieldAndValue(field, associatedValue)\n      if (field.type.name === ST_OBJECT) {\n        bytes.put(OBJECT_END_MARKER_BYTE)\n      }\n    }\n\n    return new STObject(list.toBytes())\n  }\n\n  /**\n   * Construct a STObject from a JSON object\n   *\n   * @param value An object to include\n   * @param filter optional, denote which field to include in serialized object\n   * @param definitions optional, types and values to use to encode/decode a transaction\n   * @returns a STObject object\n   */\n  static from<T extends STObject | JsonObject>(\n    value: T,\n    filter?: (...any) => boolean,\n    definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n  ): STObject {\n    if (value instanceof STObject) {\n      return value\n    }\n\n    const list: BytesList = new BytesList()\n    const bytes: BinarySerializer = new BinarySerializer(list)\n\n    let isUnlModify = false\n\n    const xAddressDecoded = Object.entries(value).reduce((acc, [key, val]) => {\n      let handled: JsonObject | undefined = undefined\n      if (val && isValidXAddress(val.toString())) {\n        handled = handleXAddress(key, val.toString())\n        checkForDuplicateTags(handled, value)\n      }\n      return Object.assign(acc, handled ?? { [key]: val })\n    }, {})\n\n    let sorted = Object.keys(xAddressDecoded)\n      .map((f: string): FieldInstance => definitions.field[f] as FieldInstance)\n      .filter(\n        (f: FieldInstance): boolean =>\n          f !== undefined &&\n          xAddressDecoded[f.name] !== undefined &&\n          f.isSerialized,\n      )\n      .sort((a, b) => {\n        return a.ordinal - b.ordinal\n      })\n\n    if (filter !== undefined) {\n      sorted = sorted.filter(filter)\n    }\n\n    sorted.forEach((field) => {\n      const associatedValue =\n        field.type.name === ST_OBJECT\n          ? this.from(xAddressDecoded[field.name], undefined, definitions)\n          : field.type.name === 'STArray'\n          ? STArray.from(xAddressDecoded[field.name], definitions)\n          : field.type.name === 'UInt64'\n          ? UInt64.from(xAddressDecoded[field.name], field.name)\n          : field.associatedType.from(xAddressDecoded[field.name])\n\n      if (associatedValue == undefined) {\n        throw new TypeError(\n          `Unable to interpret \"${field.name}: ${\n            xAddressDecoded[field.name]\n          }\".`,\n        )\n      }\n\n      if ((associatedValue as unknown as Bytes).name === 'UNLModify') {\n        // triggered when the TransactionType field has a value of 'UNLModify'\n        isUnlModify = true\n      }\n      // true when in the UNLModify pseudotransaction (after the transaction type has been processed) and working with the\n      // Account field\n      // The Account field must not be a part of the UNLModify pseudotransaction encoding, due to a bug in rippled\n      const isUnlModifyWorkaround = field.name == 'Account' && isUnlModify\n      bytes.writeFieldAndValue(field, associatedValue, isUnlModifyWorkaround)\n      if (field.type.name === ST_OBJECT) {\n        bytes.put(OBJECT_END_MARKER_BYTE)\n      }\n    })\n\n    return new STObject(list.toBytes())\n  }\n\n  /**\n   * Get the JSON interpretation of this.bytes\n   * @param definitions rippled definitions used to parse the values of transaction types and such.\n   *                          Can be customized for sidechains and amendments.\n   * @returns a JSON object\n   */\n  toJSON(definitions?: XrplDefinitionsBase): JsonObject {\n    const objectParser = new BinaryParser(this.toString(), definitions)\n    const accumulator = {}\n\n    while (!objectParser.end()) {\n      const field = objectParser.readField()\n      if (field.name === OBJECT_END_MARKER) {\n        break\n      }\n\n      accumulator[field.name] = objectParser\n        .readFieldValue(field)\n        .toJSON(definitions, field.name)\n    }\n\n    return accumulator\n  }\n}\n\nexport { STObject }\n", "import { DEFAULT_DEFINITIONS, XrplDefinitionsBase } from '../enums'\nimport { SerializedType, JsonObject } from './serialized-type'\nimport { STObject } from './st-object'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { concat } from '@xrplf/isomorphic/utils'\n\nconst ARRAY_END_MARKER = Uint8Array.from([0xf1])\nconst ARRAY_END_MARKER_NAME = 'ArrayEndMarker'\n\nconst OBJECT_END_MARKER = Uint8Array.from([0xe1])\n\n/**\n * TypeGuard for Array<JsonObject>\n */\nfunction isObjects(args): args is Array<JsonObject> {\n  return (\n    Array.isArray(args) &&\n    args.every(\n      (arg) =>\n        typeof arg === 'object' &&\n        Object.keys(arg).length === 1 &&\n        typeof Object.values(arg)[0] === 'object',\n    )\n  )\n}\n\n/**\n * Class for serializing and deserializing Arrays of Objects\n */\nclass STArray extends SerializedType {\n  /**\n   * Construct an STArray from a BinaryParser\n   *\n   * @param parser BinaryParser to parse an STArray from\n   * @returns An STArray Object\n   */\n  static fromParser(parser: BinaryParser): STArray {\n    const bytes: Array<Uint8Array> = []\n\n    while (!parser.end()) {\n      const field = parser.readField()\n      if (field.name === ARRAY_END_MARKER_NAME) {\n        break\n      }\n\n      bytes.push(\n        field.header,\n        parser.readFieldValue(field).toBytes(),\n        OBJECT_END_MARKER,\n      )\n    }\n\n    bytes.push(ARRAY_END_MARKER)\n    return new STArray(concat(bytes))\n  }\n\n  /**\n   * Construct an STArray from an Array of JSON Objects\n   *\n   * @param value STArray or Array of Objects to parse into an STArray\n   * @param definitions optional, types and values to use to encode/decode a transaction\n   * @returns An STArray object\n   */\n  static from<T extends STArray | Array<JsonObject>>(\n    value: T,\n    definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n  ): STArray {\n    if (value instanceof STArray) {\n      return value\n    }\n\n    if (isObjects(value)) {\n      const bytes: Array<Uint8Array> = []\n      value.forEach((obj) => {\n        bytes.push(STObject.from(obj, undefined, definitions).toBytes())\n      })\n\n      bytes.push(ARRAY_END_MARKER)\n      return new STArray(concat(bytes))\n    }\n\n    throw new Error('Cannot construct STArray from value given')\n  }\n\n  /**\n   * Return the JSON representation of this.bytes\n   *\n   * @param definitions optional, types and values to use to encode/decode a transaction\n   * @returns An Array of JSON objects\n   */\n  toJSON(\n    definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n  ): Array<JsonObject> {\n    const result: Array<JsonObject> = []\n\n    const arrayParser = new BinaryParser(this.toString(), definitions)\n\n    while (!arrayParser.end()) {\n      const field = arrayParser.readField()\n      if (field.name === ARRAY_END_MARKER_NAME) {\n        break\n      }\n\n      const outer = {}\n      outer[field.name] = STObject.fromParser(arrayParser).toJSON(definitions)\n      result.push(outer)\n    }\n\n    return result\n  }\n}\n\nexport { STArray }\n", "import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { readUInt16BE, writeUInt16BE } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 16 bit UInt\n */\nclass UInt16 extends UInt {\n  protected static readonly width: number = 16 / 8 // 2\n  static readonly defaultUInt16: UInt16 = new UInt16(\n    new Uint8Array(UInt16.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt16.defaultUInt16.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt16(parser.read(UInt16.width))\n  }\n\n  /**\n   * Construct a UInt16 object from a number\n   *\n   * @param val UInt16 object or number\n   */\n  static from<T extends UInt16 | number>(val: T): UInt16 {\n    if (val instanceof UInt16) {\n      return val\n    }\n\n    if (typeof val === 'number') {\n      UInt16.checkUintRange(val, 0, 0xffff)\n\n      const buf = new Uint8Array(UInt16.width)\n      writeUInt16BE(buf, val, 0)\n      return new UInt16(buf)\n    }\n\n    throw new Error('Can not construct UInt16 with given value')\n  }\n\n  /**\n   * get the value of a UInt16 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(readUInt16BE(this.bytes, 0))\n  }\n}\n\nexport { UInt16 }\n", "import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { readUInt32BE, writeUInt32BE } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 32 bit UInt\n */\nclass UInt32 extends UInt {\n  protected static readonly width: number = 32 / 8 // 4\n  static readonly defaultUInt32: UInt32 = new UInt32(\n    new Uint8Array(UInt32.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt32.defaultUInt32.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt32(parser.read(UInt32.width))\n  }\n\n  /**\n   * Construct a UInt32 object from a number\n   *\n   * @param val UInt32 object or number\n   */\n  static from<T extends UInt32 | number | string>(val: T): UInt32 {\n    if (val instanceof UInt32) {\n      return val\n    }\n\n    const buf = new Uint8Array(UInt32.width)\n\n    if (typeof val === 'string') {\n      const num = Number.parseInt(val)\n      writeUInt32BE(buf, num, 0)\n      return new UInt32(buf)\n    }\n\n    if (typeof val === 'number') {\n      UInt32.checkUintRange(val, 0, 0xffffffff)\n      writeUInt32BE(buf, val, 0)\n      return new UInt32(buf)\n    }\n\n    throw new Error('Cannot construct UInt32 from given value')\n  }\n\n  /**\n   * get the value of a UInt32 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(readUInt32BE(this.bytes, 0), 10)\n  }\n}\n\nexport { UInt32 }\n", "import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport { writeUInt8 } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 8 bit UInt\n */\nclass UInt8 extends UInt {\n  protected static readonly width: number = 8 / 8 // 1\n  static readonly defaultUInt8: UInt8 = new UInt8(new Uint8Array(UInt8.width))\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt8.defaultUInt8.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt8(parser.read(UInt8.width))\n  }\n\n  /**\n   * Construct a UInt8 object from a number\n   *\n   * @param val UInt8 object or number\n   */\n  static from<T extends UInt8 | number>(val: T): UInt8 {\n    if (val instanceof UInt8) {\n      return val\n    }\n\n    if (typeof val === 'number') {\n      UInt8.checkUintRange(val, 0, 0xff)\n\n      const buf = new Uint8Array(UInt8.width)\n      writeUInt8(buf, val, 0)\n      return new UInt8(buf)\n    }\n\n    throw new Error('Cannot construct UInt8 from given value')\n  }\n\n  /**\n   * get the value of a UInt8 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(bytesToHex(this.bytes), 16)\n  }\n}\n\nexport { UInt8 }\n", "import { SerializedType } from './serialized-type'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { Hash256 } from './hash-256'\nimport { BytesList } from '../serdes/binary-serializer'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\n/**\n * TypeGuard for Array<string>\n */\nfunction isStrings(arg): arg is Array<string> {\n  return Array.isArray(arg) && (arg.length === 0 || typeof arg[0] === 'string')\n}\n\n/**\n * Class for serializing and deserializing vectors of Hash256\n */\nclass Vector256 extends SerializedType {\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n  }\n\n  /**\n   * Construct a Vector256 from a BinaryParser\n   *\n   * @param parser BinaryParser to\n   * @param hint length of the vector, in bytes, optional\n   * @returns a Vector256 object\n   */\n  static fromParser(parser: BinaryParser, hint?: number): Vector256 {\n    const bytesList = new BytesList()\n    const bytes = hint ?? parser.size()\n    const hashes = bytes / 32\n    for (let i = 0; i < hashes; i++) {\n      Hash256.fromParser(parser).toBytesSink(bytesList)\n    }\n    return new Vector256(bytesList.toBytes())\n  }\n\n  /**\n   * Construct a Vector256 object from an array of hashes\n   *\n   * @param value A Vector256 object or array of hex-strings representing Hash256's\n   * @returns a Vector256 object\n   */\n  static from<T extends Vector256 | Array<string>>(value: T): Vector256 {\n    if (value instanceof Vector256) {\n      return value\n    }\n\n    if (isStrings(value)) {\n      const bytesList = new BytesList()\n      value.forEach((hash) => {\n        Hash256.from(hash).toBytesSink(bytesList)\n      })\n      return new Vector256(bytesList.toBytes())\n    }\n\n    throw new Error('Cannot construct Vector256 from given value')\n  }\n\n  /**\n   * Return an Array of hex-strings represented by this.bytes\n   *\n   * @returns An Array of strings representing the Hash256 objects\n   */\n  toJSON(): Array<string> {\n    if (this.bytes.byteLength % 32 !== 0) {\n      throw new Error('Invalid bytes for Vector256')\n    }\n\n    const result: Array<string> = []\n    for (let i = 0; i < this.bytes.byteLength; i += 32) {\n      result.push(bytesToHex(this.bytes.slice(i, i + 32)))\n    }\n    return result\n  }\n}\n\nexport { Vector256 }\n", "import { BinaryParser } from '../serdes/binary-parser'\n\nimport { AccountID } from './account-id'\nimport { JsonObject, SerializedType } from './serialized-type'\nimport { Issue, IssueObject } from './issue'\nimport { concat } from '@xrplf/isomorphic/utils'\n\n/**\n * Interface for JSON objects that represent cross-chain bridges\n */\ninterface XChainBridgeObject extends JsonObject {\n  LockingChainDoor: string\n  LockingChainIssue: IssueObject | string\n  IssuingChainDoor: string\n  IssuingChainIssue: IssueObject | string\n}\n\n/**\n * Type guard for XChainBridgeObject\n */\nfunction isXChainBridgeObject(arg): arg is XChainBridgeObject {\n  const keys = Object.keys(arg).sort()\n  return (\n    keys.length === 4 &&\n    keys[0] === 'IssuingChainDoor' &&\n    keys[1] === 'IssuingChainIssue' &&\n    keys[2] === 'LockingChainDoor' &&\n    keys[3] === 'LockingChainIssue'\n  )\n}\n\n/**\n * Class for serializing/deserializing XChainBridges\n */\nclass XChainBridge extends SerializedType {\n  static readonly ZERO_XCHAIN_BRIDGE: XChainBridge = new XChainBridge(\n    concat([\n      Uint8Array.from([0x14]),\n      new Uint8Array(40),\n      Uint8Array.from([0x14]),\n      new Uint8Array(40),\n    ]),\n  )\n\n  static readonly TYPE_ORDER: { name: string; type: typeof SerializedType }[] =\n    [\n      { name: 'LockingChainDoor', type: AccountID },\n      { name: 'LockingChainIssue', type: Issue },\n      { name: 'IssuingChainDoor', type: AccountID },\n      { name: 'IssuingChainIssue', type: Issue },\n    ]\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? XChainBridge.ZERO_XCHAIN_BRIDGE.bytes)\n  }\n\n  /**\n   * Construct a cross-chain bridge from a JSON\n   *\n   * @param value XChainBridge or JSON to parse into an XChainBridge\n   * @returns An XChainBridge object\n   */\n  static from<T extends XChainBridge | XChainBridgeObject>(\n    value: T,\n  ): XChainBridge {\n    if (value instanceof XChainBridge) {\n      return value\n    }\n\n    if (!isXChainBridgeObject(value)) {\n      throw new Error('Invalid type to construct an XChainBridge')\n    }\n\n    const bytes: Array<Uint8Array> = []\n    this.TYPE_ORDER.forEach((item) => {\n      const { name, type } = item\n      if (type === AccountID) {\n        bytes.push(Uint8Array.from([0x14]))\n      }\n      const object = type.from(value[name])\n      bytes.push(object.toBytes())\n    })\n    return new XChainBridge(concat(bytes))\n  }\n\n  /**\n   * Read an XChainBridge from a BinaryParser\n   *\n   * @param parser BinaryParser to read the XChainBridge from\n   * @returns An XChainBridge object\n   */\n  static fromParser(parser: BinaryParser): XChainBridge {\n    const bytes: Array<Uint8Array> = []\n\n    this.TYPE_ORDER.forEach((item) => {\n      const { type } = item\n      if (type === AccountID) {\n        parser.skip(1)\n        bytes.push(Uint8Array.from([0x14]))\n      }\n      const object = type.fromParser(parser)\n      bytes.push(object.toBytes())\n    })\n\n    return new XChainBridge(concat(bytes))\n  }\n\n  /**\n   * Get the JSON representation of this XChainBridge\n   *\n   * @returns the JSON interpretation of this.bytes\n   */\n  toJSON(): XChainBridgeObject {\n    const parser = new BinaryParser(this.toString())\n    const json = {}\n    XChainBridge.TYPE_ORDER.forEach((item) => {\n      const { name, type } = item\n      if (type === AccountID) {\n        parser.skip(1)\n      }\n      const object = type.fromParser(parser).toJSON()\n      json[name] = object\n    })\n    return json as XChainBridgeObject\n  }\n}\n\nexport { XChainBridge, XChainBridgeObject }\n", "import { AccountID } from './account-id'\nimport { Amount } from './amount'\nimport { Blob } from './blob'\nimport { Currency } from './currency'\nimport { Hash128 } from './hash-128'\nimport { Hash160 } from './hash-160'\nimport { Hash192 } from './hash-192'\nimport { Hash256 } from './hash-256'\nimport { Issue } from './issue'\nimport { PathSet } from './path-set'\nimport { STArray } from './st-array'\nimport { STObject } from './st-object'\nimport { UInt16 } from './uint-16'\nimport { UInt32 } from './uint-32'\nimport { UInt64 } from './uint-64'\nimport { UInt8 } from './uint-8'\nimport { Vector256 } from './vector-256'\nimport { XChainBridge } from './xchain-bridge'\nimport { type SerializedType } from './serialized-type'\nimport { DEFAULT_DEFINITIONS } from '../enums'\n\nconst coreTypes: Record<string, typeof SerializedType> = {\n  AccountID,\n  Amount,\n  Blob,\n  Currency,\n  Hash128,\n  Hash160,\n  Hash192,\n  Hash256,\n  Issue,\n  PathSet,\n  STArray,\n  STObject,\n  UInt8,\n  UInt16,\n  UInt32,\n  UInt64,\n  Vector256,\n  XChainBridge,\n}\n\n// Ensures that the DEFAULT_DEFINITIONS object connects these types to fields for serializing/deserializing\n// This is done here instead of in enums/index.ts to avoid a circular dependency\n// because some of the above types depend on BinarySerializer which depends on enums/index.ts.\nDEFAULT_DEFINITIONS.associateTypes(coreTypes)\n\nexport {\n  coreTypes,\n  AccountID,\n  Amount,\n  Blob,\n  Currency,\n  Hash128,\n  Hash160,\n  Hash192,\n  Hash256,\n  PathSet,\n  STArray,\n  STObject,\n  UInt8,\n  UInt16,\n  UInt32,\n  UInt64,\n  Vector256,\n}\n", "import { writeUInt32BE } from './utils'\n\n/**\n * Write a 32 bit integer to a Uint8Array\n *\n * @param uint32 32 bit integer to write to Uint8Array\n * @returns a Uint8Array with the bytes representation of uint32\n */\nfunction bytes(uint32: number): Uint8Array {\n  const result = new Uint8Array(4)\n  writeUInt32BE(result, uint32, 0)\n  return result\n}\n\n/**\n * Maps HashPrefix names to their byte representation\n */\nconst HashPrefix: Record<string, Uint8Array> = {\n  transactionID: bytes(0x54584e00),\n  // transaction plus metadata\n  transaction: bytes(0x534e4400),\n  // account state\n  accountStateEntry: bytes(0x4d4c4e00),\n  // inner node in tree\n  innerNode: bytes(0x4d494e00),\n  // ledger master data for signing\n  ledgerHeader: bytes(0x4c575200),\n  // inner transaction to sign\n  transactionSig: bytes(0x53545800),\n  // inner transaction to sign\n  transactionMultiSig: bytes(0x534d5400),\n  // validation for signing\n  validation: bytes(0x56414c00),\n  // proposal for signing\n  proposal: bytes(0x50525000),\n  // payment channel claim\n  paymentChannelClaim: bytes(0x434c4d00),\n}\n\nexport { HashPrefix }\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA384 as SHA384n,\n  sha384 as sha384n,\n  sha512_224 as sha512_224n,\n  SHA512_224 as SHA512_224n,\n  sha512_256 as sha512_256n,\n  SHA512_256 as SHA512_256n,\n  SHA512 as SHA512n,\n  sha512 as sha512n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512: typeof SHA512n = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512: typeof sha512n = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384: typeof SHA384n = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384: typeof sha384n = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224: typeof SHA512_224n = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224: typeof sha512_224n = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256: typeof SHA512_256n = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256: typeof sha512_256n = sha512_256n;\n", "import { sha512 as nobleImpl } from '@noble/hashes/sha512'\n\nimport wrapNoble from '../internal/wrapNoble'\n\n/**\n * Wrap noble-libs's sha512 implementation in HashFn\n */\nexport const sha512 = wrapNoble(nobleImpl)\n", "import { HashPrefix } from './hash-prefixes'\nimport { Hash256 } from './types'\nimport { BytesList } from './serdes/binary-serializer'\nimport { sha512 } from '@xrplf/isomorphic/sha512'\n\n/**\n * Class for hashing with SHA512\n * @extends BytesList So SerializedTypes can write bytes to a Sha512Half\n */\nclass Sha512Half extends BytesList {\n  private hash = sha512.create()\n\n  /**\n   * Construct a new Sha512Hash and write bytes this.hash\n   *\n   * @param bytes bytes to write to this.hash\n   * @returns the new Sha512Hash object\n   */\n  static put(bytes: Uint8Array): Sha512Half {\n    return new Sha512Half().put(bytes)\n  }\n\n  /**\n   * Write bytes to an existing Sha512Hash\n   *\n   * @param bytes bytes to write to object\n   * @returns the Sha512 object\n   */\n  put(bytes: Uint8Array): Sha512Half {\n    this.hash.update(bytes)\n    return this\n  }\n\n  /**\n   * Compute SHA512 hash and slice in half\n   *\n   * @returns half of a SHA512 hash\n   */\n  finish256(): Uint8Array {\n    return Uint8Array.from(this.hash.digest().slice(0, 32))\n  }\n\n  /**\n   * Constructs a Hash256 from the Sha512Half object\n   *\n   * @returns a Hash256 object\n   */\n  finish(): Hash256 {\n    return new Hash256(this.finish256())\n  }\n}\n\n/**\n * compute SHA512 hash of a list of bytes\n *\n * @param args zero or more arguments to hash\n * @returns the sha512half hash of the arguments.\n */\nfunction sha512Half(...args: Uint8Array[]): Uint8Array {\n  const hash = new Sha512Half()\n  args.forEach((a) => hash.put(a))\n  return hash.finish256()\n}\n\n/**\n * Construct a transactionID from a Serialized Transaction\n *\n * @param serialized bytes to hash\n * @returns a Hash256 object\n */\nfunction transactionID(serialized: Uint8Array): Hash256 {\n  return new Hash256(sha512Half(HashPrefix.transactionID, serialized))\n}\n\nexport { Sha512Half, sha512Half, transactionID }\n", "/* eslint-disable func-style */\n\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport { coreTypes } from './types'\nimport { BinaryParser } from './serdes/binary-parser'\nimport { AccountID } from './types/account-id'\nimport { HashPrefix } from './hash-prefixes'\nimport { BinarySerializer, BytesList } from './serdes/binary-serializer'\nimport { sha512Half, transactionID } from './hashes'\nimport {\n  type XrplDefinitionsBase,\n  DEFAULT_DEFINITIONS,\n  type FieldInstance,\n} from './enums'\nimport { STObject } from './types/st-object'\nimport { JsonObject } from './types/serialized-type'\n\n/**\n * Construct a BinaryParser\n *\n * @param bytes hex-string or Uint8Array to construct BinaryParser from\n * @param definitions rippled definitions used to parse the values of transaction types and such.\n *                          Can be customized for sidechains and amendments.\n * @returns BinaryParser\n */\nconst makeParser = (\n  bytes: string | Uint8Array,\n  definitions?: XrplDefinitionsBase,\n): BinaryParser =>\n  new BinaryParser(\n    bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes,\n    definitions,\n  )\n\n/**\n * Parse BinaryParser into JSON\n *\n * @param parser BinaryParser object\n * @param definitions rippled definitions used to parse the values of transaction types and such.\n *                          Can be customized for sidechains and amendments.\n * @returns JSON for the bytes in the BinaryParser\n */\nconst readJSON = (\n  parser: BinaryParser,\n  definitions: XrplDefinitionsBase = DEFAULT_DEFINITIONS,\n): JsonObject =>\n  (parser.readType(coreTypes.STObject) as STObject).toJSON(definitions)\n\n/**\n * Parse a hex-string into its JSON interpretation\n *\n * @param bytes hex-string to parse into JSON\n * @param definitions rippled definitions used to parse the values of transaction types and such.\n *                          Can be customized for sidechains and amendments.\n * @returns JSON\n */\nconst binaryToJSON = (\n  bytes: string,\n  definitions?: XrplDefinitionsBase,\n): JsonObject => readJSON(makeParser(bytes, definitions), definitions)\n\n/**\n * Interface for passing parameters to SerializeObject\n *\n * @field set signingFieldOnly to true if you want to serialize only signing fields\n */\ninterface OptionObject {\n  prefix?: Uint8Array\n  suffix?: Uint8Array\n  signingFieldsOnly?: boolean\n  definitions?: XrplDefinitionsBase\n}\n\n/**\n * Function to serialize JSON object representing a transaction\n *\n * @param object JSON object to serialize\n * @param opts options for serializing, including optional prefix, suffix, signingFieldOnly, and definitions\n * @returns A Uint8Array containing the serialized object\n */\nfunction serializeObject(\n  object: JsonObject,\n  opts: OptionObject = {},\n): Uint8Array {\n  const { prefix, suffix, signingFieldsOnly = false, definitions } = opts\n  const bytesList = new BytesList()\n\n  if (prefix) {\n    bytesList.put(prefix)\n  }\n\n  const filter = signingFieldsOnly\n    ? (f: FieldInstance): boolean => f.isSigningField\n    : undefined\n  ;(coreTypes.STObject as typeof STObject)\n    .from(object, filter, definitions)\n    .toBytesSink(bytesList)\n\n  if (suffix) {\n    bytesList.put(suffix)\n  }\n\n  return bytesList.toBytes()\n}\n\n/**\n * Serialize an object for signing\n *\n * @param transaction Transaction to serialize\n * @param prefix Prefix bytes to put before the serialized object\n * @param opts.definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns A Uint8Array with the serialized object\n */\nfunction signingData(\n  transaction: JsonObject,\n  prefix: Uint8Array = HashPrefix.transactionSig,\n  opts: { definitions?: XrplDefinitionsBase } = {},\n): Uint8Array {\n  return serializeObject(transaction, {\n    prefix,\n    signingFieldsOnly: true,\n    definitions: opts.definitions,\n  })\n}\n\n/**\n * Interface describing fields required for a Claim\n */\ninterface ClaimObject extends JsonObject {\n  channel: string\n  amount: string | number\n}\n\n/**\n * Serialize a signingClaim\n *\n * @param claim A claim object to serialize\n * @param opts.definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns the serialized object with appropriate prefix\n */\nfunction signingClaimData(claim: ClaimObject): Uint8Array {\n  const num = BigInt(String(claim.amount))\n  const prefix = HashPrefix.paymentChannelClaim\n  const channel = coreTypes.Hash256.from(claim.channel).toBytes()\n  const amount = coreTypes.UInt64.from(num).toBytes()\n\n  const bytesList = new BytesList()\n\n  bytesList.put(prefix)\n  bytesList.put(channel)\n  bytesList.put(amount)\n  return bytesList.toBytes()\n}\n\n/**\n * Serialize a transaction object for multiSigning\n *\n * @param transaction transaction to serialize\n * @param signingAccount Account to sign the transaction with\n * @param opts.definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns serialized transaction with appropriate prefix and suffix\n */\nfunction multiSigningData(\n  transaction: JsonObject,\n  signingAccount: string | AccountID,\n  opts: { definitions: XrplDefinitionsBase } = {\n    definitions: DEFAULT_DEFINITIONS,\n  },\n): Uint8Array {\n  const prefix = HashPrefix.transactionMultiSig\n  const suffix = coreTypes.AccountID.from(signingAccount).toBytes()\n  return serializeObject(transaction, {\n    prefix,\n    suffix,\n    signingFieldsOnly: true,\n    definitions: opts.definitions,\n  })\n}\n\nexport {\n  BinaryParser,\n  BinarySerializer,\n  BytesList,\n  ClaimObject,\n  makeParser,\n  serializeObject,\n  readJSON,\n  multiSigningData,\n  signingData,\n  signingClaimData,\n  binaryToJSON,\n  sha512Half,\n  transactionID,\n}\n", "import { coreTypes } from './types'\nimport { HashPrefix } from './hash-prefixes'\nimport { Sha512Half } from './hashes'\nimport { Hash256 } from './types/hash-256'\nimport { BytesList } from './serdes/binary-serializer'\n\n/**\n * Abstract class describing a SHAMapNode\n */\nabstract class ShaMapNode {\n  abstract hashPrefix(): Uint8Array\n  abstract isLeaf(): boolean\n  abstract isInner(): boolean\n  abstract toBytesSink(list: BytesList): void\n  abstract hash(): Hash256\n}\n\n/**\n * Class describing a Leaf of SHAMap\n */\nclass ShaMapLeaf extends ShaMapNode {\n  constructor(public index: Hash256, public item?: ShaMapNode) {\n    super()\n  }\n\n  /**\n   * @returns true as ShaMapLeaf is a leaf node\n   */\n  isLeaf(): boolean {\n    return true\n  }\n\n  /**\n   * @returns false as ShaMapLeaf is not an inner node\n   */\n  isInner(): boolean {\n    return false\n  }\n\n  /**\n   * Get the prefix of the this.item\n   *\n   * @returns The hash prefix, unless this.item is undefined, then it returns an empty Uint8Array\n   */\n  hashPrefix(): Uint8Array {\n    return this.item === undefined ? new Uint8Array(0) : this.item.hashPrefix()\n  }\n\n  /**\n   * Hash the bytes representation of this\n   *\n   * @returns hash of this.item concatenated with this.index\n   */\n  hash(): Hash256 {\n    const hash = Sha512Half.put(this.hashPrefix())\n    this.toBytesSink(hash)\n    return hash.finish()\n  }\n\n  /**\n   * Write the bytes representation of this to a BytesList\n   * @param list BytesList to write bytes to\n   */\n  toBytesSink(list: BytesList): void {\n    if (this.item !== undefined) {\n      this.item.toBytesSink(list)\n    }\n    this.index.toBytesSink(list)\n  }\n}\n\n/**\n * Class defining an Inner Node of a SHAMap\n */\nclass ShaMapInner extends ShaMapNode {\n  private slotBits = 0\n  private branches: Array<ShaMapNode> = Array(16)\n\n  constructor(private depth: number = 0) {\n    super()\n  }\n\n  /**\n   * @returns true as ShaMapInner is an inner node\n   */\n  isInner(): boolean {\n    return true\n  }\n\n  /**\n   * @returns false as ShaMapInner is not a leaf node\n   */\n  isLeaf(): boolean {\n    return false\n  }\n\n  /**\n   * Get the hash prefix for this node\n   *\n   * @returns hash prefix describing an inner node\n   */\n  hashPrefix(): Uint8Array {\n    return HashPrefix.innerNode\n  }\n\n  /**\n   * Set a branch of this node to be another node\n   *\n   * @param slot Slot to add branch to this.branches\n   * @param branch Branch to add\n   */\n  setBranch(slot: number, branch: ShaMapNode): void {\n    this.slotBits = this.slotBits | (1 << slot)\n    this.branches[slot] = branch\n  }\n\n  /**\n   * @returns true if node is empty\n   */\n  empty(): boolean {\n    return this.slotBits === 0\n  }\n\n  /**\n   * Compute the hash of this node\n   *\n   * @returns The hash of this node\n   */\n  hash(): Hash256 {\n    if (this.empty()) {\n      return (coreTypes.Hash256 as typeof Hash256).ZERO_256\n    }\n    const hash = Sha512Half.put(this.hashPrefix())\n    this.toBytesSink(hash)\n    return hash.finish()\n  }\n\n  /**\n   * Writes the bytes representation of this node to a BytesList\n   *\n   * @param list BytesList to write bytes to\n   */\n  toBytesSink(list: BytesList): void {\n    for (let i = 0; i < this.branches.length; i++) {\n      const branch = this.branches[i]\n      const hash = branch\n        ? branch.hash()\n        : (coreTypes.Hash256 as typeof Hash256).ZERO_256\n      hash.toBytesSink(list)\n    }\n  }\n\n  /**\n   * Add item to the SHAMap\n   *\n   * @param index Hash of the index of the item being inserted\n   * @param item Item to insert in the map\n   * @param leaf Leaf node to insert when branch doesn't exist\n   */\n  addItem(index?: Hash256, item?: ShaMapNode, leaf?: ShaMapLeaf): void {\n    if (index === undefined) {\n      throw new Error()\n    }\n    if (index !== undefined) {\n      const nibble = index.nibblet(this.depth)\n      const existing = this.branches[nibble]\n\n      if (existing === undefined) {\n        this.setBranch(nibble, leaf || new ShaMapLeaf(index, item))\n      } else if (existing instanceof ShaMapLeaf) {\n        const newInner = new ShaMapInner(this.depth + 1)\n        newInner.addItem(existing.index, undefined, existing)\n        newInner.addItem(index, item, leaf)\n        this.setBranch(nibble, newInner)\n      } else if (existing instanceof ShaMapInner) {\n        existing.addItem(index, item, leaf)\n      } else {\n        throw new Error('invalid ShaMap.addItem call')\n      }\n    }\n  }\n}\n\nclass ShaMap extends ShaMapInner {}\n\nexport { ShaMap, ShaMapNode, ShaMapLeaf }\n", "import { ShaMap, ShaMapNode, ShaMapLeaf } from './shamap'\nimport { HashPrefix } from './hash-prefixes'\nimport { Sha512Half } from './hashes'\nimport { BinarySerializer, serializeObject } from './binary'\nimport { Hash256 } from './types/hash-256'\nimport { STObject } from './types/st-object'\nimport { UInt64 } from './types/uint-64'\nimport { UInt32 } from './types/uint-32'\nimport { UInt8 } from './types/uint-8'\nimport { BinaryParser } from './serdes/binary-parser'\nimport { JsonObject } from './types/serialized-type'\nimport { XrplDefinitionsBase } from './enums'\n\n/**\n * Computes the hash of a list of objects\n *\n * @param itemizer Converts an item into a format that can be added to SHAMap\n * @param itemsJson Array of items to add to a SHAMap\n * @returns the hash of the SHAMap\n */\nfunction computeHash(\n  itemizer: (item: JsonObject) => [Hash256?, ShaMapNode?, ShaMapLeaf?],\n  itemsJson: Array<JsonObject>,\n): Hash256 {\n  const map = new ShaMap()\n  itemsJson.forEach((item) => map.addItem(...itemizer(item)))\n  return map.hash()\n}\n\n/**\n * Interface describing a transaction item\n */\ninterface transactionItemObject extends JsonObject {\n  hash: string\n  metaData: JsonObject\n}\n\n/**\n * Convert a transaction into an index and an item\n *\n * @param json transaction with metadata\n * @returns a tuple of index and item to be added to SHAMap\n */\nfunction transactionItemizer(\n  json: transactionItemObject,\n): [Hash256, ShaMapNode, undefined] {\n  if (!json.hash) {\n    throw new Error()\n  }\n  const index = Hash256.from(json.hash)\n  const item = {\n    hashPrefix() {\n      return HashPrefix.transaction\n    },\n    toBytesSink(sink) {\n      const serializer = new BinarySerializer(sink)\n      serializer.writeLengthEncoded(STObject.from(json))\n      serializer.writeLengthEncoded(STObject.from(json.metaData))\n    },\n  } as ShaMapNode\n  return [index, item, undefined]\n}\n\n/**\n * Interface describing an entry item\n */\ninterface entryItemObject extends JsonObject {\n  index: string\n}\n\n/**\n * Convert an entry to a pair Hash256 and ShaMapNode\n *\n * @param json JSON describing a ledger entry item\n * @returns a tuple of index and item to be added to SHAMap\n */\nfunction entryItemizer(\n  json: entryItemObject,\n): [Hash256, ShaMapNode, undefined] {\n  const index = Hash256.from(json.index)\n  const bytes = serializeObject(json)\n  const item = {\n    hashPrefix() {\n      return HashPrefix.accountStateEntry\n    },\n    toBytesSink(sink) {\n      sink.put(bytes)\n    },\n  } as ShaMapNode\n  return [index, item, undefined]\n}\n\n/**\n * Function computing the hash of a transaction tree\n *\n * @param param An array of transaction objects to hash\n * @returns A Hash256 object\n */\nfunction transactionTreeHash(param: Array<JsonObject>): Hash256 {\n  const itemizer = transactionItemizer as (\n    json: JsonObject,\n  ) => [Hash256, ShaMapNode, undefined]\n  return computeHash(itemizer, param)\n}\n\n/**\n * Function computing the hash of accountState\n *\n * @param param A list of accountStates hash\n * @returns A Hash256 object\n */\nfunction accountStateHash(param: Array<JsonObject>): Hash256 {\n  const itemizer = entryItemizer as (\n    json: JsonObject,\n  ) => [Hash256, ShaMapNode, undefined]\n  return computeHash(itemizer, param)\n}\n\n/**\n * Interface describing a ledger header\n */\ninterface ledgerObject {\n  ledger_index: number\n  total_coins: string | number | bigint\n  parent_hash: string\n  transaction_hash: string\n  account_hash: string\n  parent_close_time: number\n  close_time: number\n  close_time_resolution: number\n  close_flags: number\n}\n\n/**\n * Serialize and hash a ledger header\n *\n * @param header a ledger header\n * @returns the hash of header\n */\nfunction ledgerHash(header: ledgerObject): Hash256 {\n  const hash = new Sha512Half()\n  hash.put(HashPrefix.ledgerHeader)\n  if (\n    header.parent_close_time === undefined ||\n    header.close_flags === undefined\n  ) {\n    throw new Error()\n  }\n\n  UInt32.from<number>(header.ledger_index).toBytesSink(hash)\n  UInt64.from<bigint>(BigInt(String(header.total_coins))).toBytesSink(hash)\n  Hash256.from<string>(header.parent_hash).toBytesSink(hash)\n  Hash256.from<string>(header.transaction_hash).toBytesSink(hash)\n  Hash256.from<string>(header.account_hash).toBytesSink(hash)\n  UInt32.from<number>(header.parent_close_time).toBytesSink(hash)\n  UInt32.from<number>(header.close_time).toBytesSink(hash)\n  UInt8.from<number>(header.close_time_resolution).toBytesSink(hash)\n  UInt8.from<number>(header.close_flags).toBytesSink(hash)\n  return hash.finish()\n}\n\n/**\n * Decodes a serialized ledger header\n *\n * @param binary A serialized ledger header\n * @param definitions Type definitions to parse the ledger objects.\n *      Used if there are non-default ledger objects to decode.\n * @returns A JSON object describing a ledger header\n */\nfunction decodeLedgerData(\n  binary: string,\n  definitions?: XrplDefinitionsBase,\n): object {\n  if (typeof binary !== 'string') {\n    throw new Error('binary must be a hex string')\n  }\n  const parser = new BinaryParser(binary, definitions)\n  return {\n    ledger_index: parser.readUInt32(),\n    total_coins: parser.readType(UInt64).valueOf().toString(),\n    parent_hash: parser.readType(Hash256).toHex(),\n    transaction_hash: parser.readType(Hash256).toHex(),\n    account_hash: parser.readType(Hash256).toHex(),\n    parent_close_time: parser.readUInt32(),\n    close_time: parser.readUInt32(),\n    close_time_resolution: parser.readUInt8(),\n    close_flags: parser.readUInt8(),\n  }\n}\n\nexport { accountStateHash, transactionTreeHash, ledgerHash, decodeLedgerData }\n", "import { coreTypes } from './types'\nimport BigNumber from 'bignumber.js'\nimport { bytesToHex, hexToBytes } from '@xrplf/isomorphic/utils'\n\n/**\n * class for encoding and decoding quality\n */\nclass quality {\n  /**\n   * Encode quality amount\n   *\n   * @param arg string representation of an amount\n   * @returns Serialized quality\n   */\n  static encode(quality: string): Uint8Array {\n    const decimal = BigNumber(quality)\n    const exponent = (decimal?.e || 0) - 15\n    const qualityString = decimal.times(`1e${-exponent}`).abs().toString()\n    const bytes = coreTypes.UInt64.from(BigInt(qualityString)).toBytes()\n    bytes[0] = exponent + 100\n    return bytes\n  }\n\n  /**\n   * Decode quality amount\n   *\n   * @param arg hex-string denoting serialized quality\n   * @returns deserialized quality\n   */\n  static decode(quality: string): BigNumber {\n    const bytes = hexToBytes(quality).slice(-8)\n    const exponent = bytes[0] - 100\n    const mantissa = new BigNumber(`0x${bytesToHex(bytes.slice(1))}`)\n    return mantissa.times(`1e${exponent}`)\n  }\n}\n\nexport { quality }\n", "import {\n  DEFAULT_DEFINITIONS,\n  Field,\n  TransactionType,\n  LedgerEntryType,\n  Type,\n  TransactionResult,\n} from './enums'\nimport * as types from './types'\nimport * as binary from './binary'\nimport { ShaMap } from './shamap'\nimport * as ledgerHashes from './ledger-hashes'\nimport * as hashes from './hashes'\nimport { quality } from './quality'\nimport { HashPrefix } from './hash-prefixes'\n\nexport {\n  hashes,\n  binary,\n  ledgerHashes,\n  DEFAULT_DEFINITIONS,\n  Field,\n  TransactionType,\n  LedgerEntryType,\n  Type,\n  TransactionResult,\n  quality,\n  HashPrefix,\n  ShaMap,\n  types,\n}\n", "import {\n  type DefinitionsData,\n  XrplDefinitionsBase,\n} from './xrpl-definitions-base'\nimport { coreTypes } from '../types'\nimport { SerializedType } from '../types/serialized-type'\n\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * Should be used instead of XrplDefinitionsBase since this defines default `types` for serializing/deserializing\n * ledger data.\n */\nexport class XrplDefinitions extends XrplDefinitionsBase {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.\n   *              These types will be included in addition to the coreTypes used on mainnet.\n   */\n  constructor(\n    enums: DefinitionsData,\n    additionalTypes?: Record<string, typeof SerializedType>,\n  ) {\n    const types = Object.assign({}, coreTypes, additionalTypes)\n    super(enums, types)\n  }\n}\n", "import { quality, binary, HashPrefix } from './coretypes'\nimport { decodeLedgerData } from './ledger-hashes'\nimport { ClaimObject } from './binary'\nimport { JsonObject } from './types/serialized-type'\nimport {\n  XrplDefinitionsBase,\n  TRANSACTION_TYPES,\n  DEFAULT_DEFINITIONS,\n} from './enums'\nimport { XrplDefinitions } from './enums/xrpl-definitions'\nimport { coreTypes } from './types'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\nconst {\n  signingData,\n  signingClaimData,\n  multiSigningData,\n  binaryToJSON,\n  serializeObject,\n} = binary\n\n/**\n * Decode a transaction\n *\n * @param binary hex-string of the encoded transaction\n * @param definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns the JSON representation of the transaction\n */\nfunction decode(binary: string, definitions?: XrplDefinitionsBase): JsonObject {\n  if (typeof binary !== 'string') {\n    throw new Error('binary must be a hex string')\n  }\n  return binaryToJSON(binary, definitions)\n}\n\n/**\n * Encode a transaction\n *\n * @param json The JSON representation of a transaction\n * @param definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n *\n * @returns A hex-string of the encoded transaction\n */\nfunction encode(json: object, definitions?: XrplDefinitionsBase): string {\n  if (typeof json !== 'object') {\n    throw new Error()\n  }\n  return bytesToHex(serializeObject(json as JsonObject, { definitions }))\n}\n\n/**\n * Encode a transaction and prepare for signing\n *\n * @param json JSON object representing the transaction\n * @param signer string representing the account to sign the transaction with\n * @param definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns a hex string of the encoded transaction\n */\nfunction encodeForSigning(\n  json: object,\n  definitions?: XrplDefinitionsBase,\n): string {\n  if (typeof json !== 'object') {\n    throw new Error()\n  }\n  return bytesToHex(\n    signingData(json as JsonObject, HashPrefix.transactionSig, {\n      definitions,\n    }),\n  )\n}\n\n/**\n * Encode a transaction and prepare for signing with a claim\n *\n * @param json JSON object representing the transaction\n * @param signer string representing the account to sign the transaction with\n * @param definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns a hex string of the encoded transaction\n */\nfunction encodeForSigningClaim(json: object): string {\n  if (typeof json !== 'object') {\n    throw new Error()\n  }\n  return bytesToHex(signingClaimData(json as ClaimObject))\n}\n\n/**\n * Encode a transaction and prepare for multi-signing\n *\n * @param json JSON object representing the transaction\n * @param signer string representing the account to sign the transaction with\n * @param definitions Custom rippled types to use instead of the default. Used for sidechains and amendments.\n * @returns a hex string of the encoded transaction\n */\nfunction encodeForMultisigning(\n  json: object,\n  signer: string,\n  definitions?: XrplDefinitionsBase,\n): string {\n  if (typeof json !== 'object') {\n    throw new Error()\n  }\n  if (json['SigningPubKey'] !== '') {\n    throw new Error()\n  }\n  const definitionsOpt = definitions ? { definitions } : undefined\n  return bytesToHex(\n    multiSigningData(json as JsonObject, signer, definitionsOpt),\n  )\n}\n\n/**\n * Encode a quality value\n *\n * @param value string representation of a number\n * @returns a hex-string representing the quality\n */\nfunction encodeQuality(value: string): string {\n  if (typeof value !== 'string') {\n    throw new Error()\n  }\n  return bytesToHex(quality.encode(value))\n}\n\n/**\n * Decode a quality value\n *\n * @param value hex-string of a quality\n * @returns a string representing the quality\n */\nfunction decodeQuality(value: string): string {\n  if (typeof value !== 'string') {\n    throw new Error()\n  }\n  return quality.decode(value).toString()\n}\n\nexport {\n  decode,\n  encode,\n  encodeForSigning,\n  encodeForSigningClaim,\n  encodeForMultisigning,\n  encodeQuality,\n  decodeQuality,\n  decodeLedgerData,\n  TRANSACTION_TYPES,\n  XrplDefinitions,\n  XrplDefinitionsBase,\n  DEFAULT_DEFINITIONS,\n  coreTypes,\n}\n", "const HEX_REGEX = /^[0-9A-Fa-f]+$/u\nexport const INTEGER_SANITY_CHECK = /^[0-9]+$/u\n\n/**\n * Verify that all fields of an object are in fields.\n *\n * @param obj - Object to verify fields.\n * @param fields - Fields to verify.\n * @returns True if keys in object are all in fields.\n */\nexport function onlyHasFields(\n  obj: Record<string, unknown>,\n  fields: string[],\n): boolean {\n  return Object.keys(obj).every((key: string) => fields.includes(key))\n}\n\n/**\n * Perform bitwise AND (&) to check if a flag is enabled within Flags (as a number).\n *\n * @param Flags - A number that represents flags enabled.\n * @param checkFlag - A specific flag to check if it's enabled within Flags.\n * @returns True if checkFlag is enabled within Flags.\n */\nexport function isFlagEnabled(Flags: number, checkFlag: number): boolean {\n  // eslint-disable-next-line no-bitwise -- flags need bitwise\n  return (BigInt(checkFlag) & BigInt(Flags)) === BigInt(checkFlag)\n}\n\n/**\n * Check if string is in hex format.\n *\n * @param str - The string to check if it's in hex format.\n * @returns True if string is in hex format\n */\nexport function isHex(str: string): boolean {\n  return HEX_REGEX.test(str)\n}\n", "/* eslint-disable max-lines -- common utility file */\nimport { HEX_REGEX } from '@xrplf/isomorphic/utils'\nimport { isValidClassicAddress, isValidXAddress } from 'ripple-address-codec'\nimport { TRANSACTION_TYPES } from 'ripple-binary-codec'\n\nimport { ValidationError } from '../../errors'\nimport {\n  Amount,\n  AuthorizeCredential,\n  Currency,\n  IssuedCurrencyAmount,\n  MPTAmount,\n  Memo,\n  Signer,\n  XChainBridge,\n} from '../common'\nimport { onlyHasFields } from '../utils'\n\nconst MEMO_SIZE = 3\nexport const MAX_AUTHORIZED_CREDENTIALS = 8\nconst MAX_CREDENTIAL_BYTE_LENGTH = 64\nconst MAX_CREDENTIAL_TYPE_LENGTH = MAX_CREDENTIAL_BYTE_LENGTH * 2\n\nfunction isMemo(obj: { Memo?: unknown }): boolean {\n  if (obj.Memo == null) {\n    return false\n  }\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n  const memo = obj.Memo as Record<string, unknown>\n  const size = Object.keys(memo).length\n  const validData = memo.MemoData == null || typeof memo.MemoData === 'string'\n  const validFormat =\n    memo.MemoFormat == null || typeof memo.MemoFormat === 'string'\n  const validType = memo.MemoType == null || typeof memo.MemoType === 'string'\n\n  return (\n    size >= 1 &&\n    size <= MEMO_SIZE &&\n    validData &&\n    validFormat &&\n    validType &&\n    onlyHasFields(memo, ['MemoFormat', 'MemoData', 'MemoType'])\n  )\n}\n\nconst SIGNER_SIZE = 3\n\nfunction isSigner(obj: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n  const signerWrapper = obj as Record<string, unknown>\n\n  if (signerWrapper.Signer == null) {\n    return false\n  }\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS and Signer is previously unknown\n  const signer = signerWrapper.Signer as Record<string, unknown>\n  return (\n    Object.keys(signer).length === SIGNER_SIZE &&\n    typeof signer.Account === 'string' &&\n    typeof signer.TxnSignature === 'string' &&\n    typeof signer.SigningPubKey === 'string'\n  )\n}\n\nconst XRP_CURRENCY_SIZE = 1\nconst ISSUE_SIZE = 2\nconst ISSUED_CURRENCY_SIZE = 3\nconst XCHAIN_BRIDGE_SIZE = 4\nconst MPTOKEN_SIZE = 2\nconst AUTHORIZE_CREDENTIAL_SIZE = 1\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === 'object'\n}\n\n/**\n * Verify the form and type of a string at runtime.\n *\n * @param str - The object to check the form and type of.\n * @returns Whether the string is properly formed.\n */\nexport function isString(str: unknown): str is string {\n  return typeof str === 'string'\n}\n\n/**\n * Verify the form and type of a number at runtime.\n *\n * @param num - The object to check the form and type of.\n * @returns Whether the number is properly formed.\n */\nexport function isNumber(num: unknown): num is number {\n  return typeof num === 'number'\n}\n\n/**\n * Verify the form and type of an IssuedCurrency at runtime.\n *\n * @param input - The input to check the form and type of.\n * @returns Whether the IssuedCurrency is properly formed.\n */\nexport function isCurrency(input: unknown): input is Currency {\n  return (\n    isRecord(input) &&\n    ((Object.keys(input).length === ISSUE_SIZE &&\n      typeof input.issuer === 'string' &&\n      typeof input.currency === 'string') ||\n      (Object.keys(input).length === XRP_CURRENCY_SIZE &&\n        input.currency === 'XRP'))\n  )\n}\n\n/**\n * Verify the form and type of an IssuedCurrencyAmount at runtime.\n *\n * @param input - The input to check the form and type of.\n * @returns Whether the IssuedCurrencyAmount is properly formed.\n */\nexport function isIssuedCurrency(\n  input: unknown,\n): input is IssuedCurrencyAmount {\n  return (\n    isRecord(input) &&\n    Object.keys(input).length === ISSUED_CURRENCY_SIZE &&\n    typeof input.value === 'string' &&\n    typeof input.issuer === 'string' &&\n    typeof input.currency === 'string'\n  )\n}\n\n/**\n * Verify the form and type of an AuthorizeCredential at runtime\n *\n * @param input - The input to check the form and type of\n * @returns Whether the AuthorizeCredential is properly formed\n */\nexport function isAuthorizeCredential(\n  input: unknown,\n): input is AuthorizeCredential {\n  return (\n    isRecord(input) &&\n    isRecord(input.Credential) &&\n    Object.keys(input).length === AUTHORIZE_CREDENTIAL_SIZE &&\n    typeof input.Credential.CredentialType === 'string' &&\n    typeof input.Credential.Issuer === 'string'\n  )\n}\n\n/**\n * Verify the form and type of an MPT at runtime.\n *\n * @param input - The input to check the form and type of.\n * @returns Whether the MPTAmount is properly formed.\n */\nexport function isMPTAmount(input: unknown): input is MPTAmount {\n  return (\n    isRecord(input) &&\n    Object.keys(input).length === MPTOKEN_SIZE &&\n    typeof input.value === 'string' &&\n    typeof input.mpt_issuance_id === 'string'\n  )\n}\n\n/**\n * Must be a valid account address\n */\nexport type Account = string\n\n/**\n * Verify a string is in fact a valid account address.\n *\n * @param account - The object to check the form and type of.\n * @returns Whether the account is properly formed account for a transaction.\n */\nexport function isAccount(account: unknown): account is Account {\n  return (\n    typeof account === 'string' &&\n    (isValidClassicAddress(account) || isValidXAddress(account))\n  )\n}\n\n/**\n * Verify the form and type of an Amount at runtime.\n *\n * @param amount - The object to check the form and type of.\n * @returns Whether the Amount is properly formed.\n */\nexport function isAmount(amount: unknown): amount is Amount {\n  return (\n    typeof amount === 'string' ||\n    isIssuedCurrency(amount) ||\n    isMPTAmount(amount)\n  )\n}\n\n/**\n * Verify the form and type of an XChainBridge at runtime.\n *\n * @param input - The input to check the form and type of.\n * @returns Whether the XChainBridge is properly formed.\n */\nexport function isXChainBridge(input: unknown): input is XChainBridge {\n  return (\n    isRecord(input) &&\n    Object.keys(input).length === XCHAIN_BRIDGE_SIZE &&\n    typeof input.LockingChainDoor === 'string' &&\n    isCurrency(input.LockingChainIssue) &&\n    typeof input.IssuingChainDoor === 'string' &&\n    isCurrency(input.IssuingChainIssue)\n  )\n}\n\n/* eslint-disable @typescript-eslint/restrict-template-expressions -- tx.TransactionType is checked before any calls */\n\n/**\n * Verify the form and type of a required type for a transaction at runtime.\n *\n * @param tx - The transaction input to check the form and type of.\n * @param paramName - The name of the transaction parameter.\n * @param checkValidity - The function to use to check the type.\n * @throws\n */\nexport function validateRequiredField(\n  tx: Record<string, unknown>,\n  paramName: string,\n  checkValidity: (inp: unknown) => boolean,\n): void {\n  if (tx[paramName] == null) {\n    throw new ValidationError(\n      `${tx.TransactionType}: missing field ${paramName}`,\n    )\n  }\n\n  if (!checkValidity(tx[paramName])) {\n    throw new ValidationError(\n      `${tx.TransactionType}: invalid field ${paramName}`,\n    )\n  }\n}\n\n/**\n * Verify the form and type of an optional type for a transaction at runtime.\n *\n * @param tx - The transaction input to check the form and type of.\n * @param paramName - The name of the transaction parameter.\n * @param checkValidity - The function to use to check the type.\n * @throws\n */\nexport function validateOptionalField(\n  tx: Record<string, unknown>,\n  paramName: string,\n  checkValidity: (inp: unknown) => boolean,\n): void {\n  if (tx[paramName] !== undefined && !checkValidity(tx[paramName])) {\n    throw new ValidationError(\n      `${tx.TransactionType}: invalid field ${paramName}`,\n    )\n  }\n}\n\n/* eslint-enable @typescript-eslint/restrict-template-expressions -- checked before */\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface -- no global flags right now, so this is fine\nexport interface GlobalFlags {}\n\n/**\n * Every transaction has the same set of common fields.\n */\nexport interface BaseTransaction {\n  /** The unique address of the transaction sender. */\n  Account: Account\n  /**\n   * The type of transaction. Valid types include: `Payment`, `OfferCreate`,\n   * `TrustSet`, and many others.\n   */\n  TransactionType: string\n  /**\n   * Integer amount of XRP, in drops, to be destroyed as a cost for\n   * distributing this transaction to the network. Some transaction types have\n   * different minimum requirements.\n   */\n  Fee?: string\n  /**\n   * The sequence number of the account sending the transaction. A transaction\n   * is only valid if the Sequence number is exactly 1 greater than the previous\n   * transaction from the same account. The special case 0 means the transaction\n   * is using a Ticket instead.\n   */\n  Sequence?: number\n  /**\n   * Hash value identifying another transaction. If provided, this transaction\n   * is only valid if the sending account's previously-sent transaction matches\n   * the provided hash.\n   */\n  AccountTxnID?: string\n  /** Set of bit-flags for this transaction. */\n  Flags?: number | GlobalFlags\n  /**\n   * Highest ledger index this transaction can appear in. Specifying this field\n   * places a strict upper limit on how long the transaction can wait to be\n   * validated or rejected.\n   */\n  LastLedgerSequence?: number\n  /**\n   * Additional arbitrary information used to identify this transaction.\n   */\n  Memos?: Memo[]\n  /**\n   * Array of objects that represent a multi-signature which authorizes this\n   * transaction.\n   */\n  Signers?: Signer[]\n  /**\n   * Arbitrary integer used to identify the reason for this payment, or a sender\n   * on whose behalf this transaction is made. Conventionally, a refund should\n   * specify the initial payment's SourceTag as the refund payment's\n   * DestinationTag.\n   */\n  SourceTag?: number\n  /**\n   * Hex representation of the public key that corresponds to the private key\n   * used to sign this transaction. If an empty string, indicates a\n   * multi-signature is present in the Signers field instead.\n   */\n  SigningPubKey?: string\n  /**\n   * The sequence number of the ticket to use in place of a Sequence number. If\n   * this is provided, Sequence must be 0. Cannot be used with AccountTxnID.\n   */\n  TicketSequence?: number\n  /**\n   * The signature that verifies this transaction as originating from the\n   * account it says it is from.\n   */\n  TxnSignature?: string\n  /**\n   * The network id of the transaction.\n   */\n  NetworkID?: number\n}\n\n/**\n * Verify the common fields of a transaction. The validate functionality will be\n * optional, and will check transaction form at runtime. This should be called\n * any time a transaction will be verified.\n *\n * @param common - An interface w/ common transaction fields.\n * @throws When the common param is malformed.\n */\nexport function validateBaseTransaction(common: Record<string, unknown>): void {\n  if (common.TransactionType === undefined) {\n    throw new ValidationError('BaseTransaction: missing field TransactionType')\n  }\n\n  if (typeof common.TransactionType !== 'string') {\n    throw new ValidationError('BaseTransaction: TransactionType not string')\n  }\n\n  if (!TRANSACTION_TYPES.includes(common.TransactionType)) {\n    throw new ValidationError('BaseTransaction: Unknown TransactionType')\n  }\n\n  validateRequiredField(common, 'Account', isString)\n\n  validateOptionalField(common, 'Fee', isString)\n\n  validateOptionalField(common, 'Sequence', isNumber)\n\n  validateOptionalField(common, 'AccountTxnID', isString)\n\n  validateOptionalField(common, 'LastLedgerSequence', isNumber)\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n  const memos = common.Memos as Array<{ Memo?: unknown }> | undefined\n  if (memos !== undefined && !memos.every(isMemo)) {\n    throw new ValidationError('BaseTransaction: invalid Memos')\n  }\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n  const signers = common.Signers as Array<Record<string, unknown>> | undefined\n\n  if (\n    signers !== undefined &&\n    (signers.length === 0 || !signers.every(isSigner))\n  ) {\n    throw new ValidationError('BaseTransaction: invalid Signers')\n  }\n\n  validateOptionalField(common, 'SourceTag', isNumber)\n\n  validateOptionalField(common, 'SigningPubKey', isString)\n\n  validateOptionalField(common, 'TicketSequence', isNumber)\n\n  validateOptionalField(common, 'TxnSignature', isString)\n\n  validateOptionalField(common, 'NetworkID', isNumber)\n}\n\n/**\n * Parse the value of an amount, expressed either in XRP or as an Issued Currency, into a number.\n *\n * @param amount - An Amount to parse for its value.\n * @returns The parsed amount value, or NaN if the amount count not be parsed.\n */\nexport function parseAmountValue(amount: unknown): number {\n  if (!isAmount(amount)) {\n    return NaN\n  }\n  if (typeof amount === 'string') {\n    return parseFloat(amount)\n  }\n  return parseFloat(amount.value)\n}\n\n/**\n * Verify the form and type of a CredentialType at runtime.\n *\n * @param tx A CredentialType Transaction.\n * @throws when the CredentialType is malformed.\n */\nexport function validateCredentialType(tx: Record<string, unknown>): void {\n  if (typeof tx.TransactionType !== 'string') {\n    throw new ValidationError('Invalid TransactionType')\n  }\n  if (tx.CredentialType === undefined) {\n    throw new ValidationError(\n      `${tx.TransactionType}: missing field CredentialType`,\n    )\n  }\n\n  if (!isString(tx.CredentialType)) {\n    throw new ValidationError(\n      `${tx.TransactionType}: CredentialType must be a string`,\n    )\n  }\n  if (tx.CredentialType.length === 0) {\n    throw new ValidationError(\n      `${tx.TransactionType}: CredentialType cannot be an empty string`,\n    )\n  } else if (tx.CredentialType.length > MAX_CREDENTIAL_TYPE_LENGTH) {\n    throw new ValidationError(\n      `${tx.TransactionType}: CredentialType length cannot be > ${MAX_CREDENTIAL_TYPE_LENGTH}`,\n    )\n  }\n\n  if (!HEX_REGEX.test(tx.CredentialType)) {\n    throw new ValidationError(\n      `${tx.TransactionType}: CredentialType must be encoded in hex`,\n    )\n  }\n}\n\n/**\n * Check a CredentialAuthorize array for parameter errors\n *\n * @param credentials An array of credential IDs to check for errors\n * @param transactionType The transaction type to include in error messages\n * @param isStringID Toggle for if array contains IDs instead of AuthorizeCredential objects\n * @param maxCredentials The maximum length of the credentials array.\n *        PermissionedDomainSet transaction uses 10, other transactions use 8.\n * @throws Validation Error if the formatting is incorrect\n */\n// eslint-disable-next-line max-lines-per-function, max-params -- separating logic further will add unnecessary complexity\nexport function validateCredentialsList(\n  credentials: unknown,\n  transactionType: string,\n  isStringID: boolean,\n  maxCredentials: number,\n): void {\n  if (credentials == null) {\n    return\n  }\n  if (!Array.isArray(credentials)) {\n    throw new ValidationError(\n      `${transactionType}: Credentials must be an array`,\n    )\n  }\n  if (credentials.length > maxCredentials) {\n    throw new ValidationError(\n      `${transactionType}: Credentials length cannot exceed ${maxCredentials} elements`,\n    )\n  } else if (credentials.length === 0) {\n    throw new ValidationError(\n      `${transactionType}: Credentials cannot be an empty array`,\n    )\n  }\n  credentials.forEach((credential) => {\n    if (isStringID) {\n      if (!isString(credential)) {\n        throw new ValidationError(\n          `${transactionType}: Invalid Credentials ID list format`,\n        )\n      }\n    } else if (!isAuthorizeCredential(credential)) {\n      throw new ValidationError(\n        `${transactionType}: Invalid Credentials format`,\n      )\n    }\n  })\n  if (containsDuplicates(credentials)) {\n    throw new ValidationError(\n      `${transactionType}: Credentials cannot contain duplicate elements`,\n    )\n  }\n}\n\n// Type guard to ensure we're working with AuthorizeCredential[]\n// Note: This is not a rigorous type-guard. A more thorough solution would be to iterate over the array and check each item.\nfunction isAuthorizeCredentialArray(\n  list: AuthorizeCredential[] | string[],\n): list is AuthorizeCredential[] {\n  return typeof list[0] !== 'string'\n}\n\n/**\n * Check if an array of objects contains any duplicates.\n *\n * @param objectList - Array of objects to check for duplicates\n * @returns True if duplicates exist, false otherwise\n */\nexport function containsDuplicates(\n  objectList: AuthorizeCredential[] | string[],\n): boolean {\n  // Case-1: Process a list of string-IDs\n  if (typeof objectList[0] === 'string') {\n    const objSet = new Set(objectList.map((obj) => JSON.stringify(obj)))\n    return objSet.size !== objectList.length\n  }\n\n  // Case-2: Process a list of nested objects\n  const seen = new Set<string>()\n\n  if (isAuthorizeCredentialArray(objectList)) {\n    for (const item of objectList) {\n      const key = `${item.Credential.Issuer}-${item.Credential.CredentialType}`\n      // eslint-disable-next-line max-depth -- necessary to check for type-guards\n      if (seen.has(key)) {\n        return true\n      }\n      seen.add(key)\n    }\n  }\n\n  return false\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  validateBaseTransaction,\n  validateOptionalField,\n} from './common'\n\n/**\n * Enum for AccountSet Flags.\n *\n * @category Transaction Flags\n */\nexport enum AccountSetAsfFlags {\n  /** Require a destination tag to send transactions to this account. */\n  asfRequireDest = 1,\n  /**\n   * Require authorization for users to hold balances issued by this address\n   * can only be enabled if the address has no trust lines connected to it.\n   */\n  asfRequireAuth = 2,\n  /** XRP should not be sent to this account. */\n  asfDisallowXRP = 3,\n  /**\n   * Disallow use of the master key pair. Can only be enabled if the account\n   * has configured another way to sign transactions, such as a Regular Key or a\n   * Signer List.\n   */\n  asfDisableMaster = 4,\n  /**\n   * Track the ID of this account's most recent transaction. Required for\n   * AccountTxnID.\n   */\n  asfAccountTxnID = 5,\n  /**\n   * Permanently give up the ability to freeze individual trust lines or\n   * disable Global Freeze. This flag can never be disabled after being enabled.\n   */\n  asfNoFreeze = 6,\n  /** Freeze all assets issued by this account. */\n  asfGlobalFreeze = 7,\n  /** Enable rippling on this account's trust lines by default. */\n  asfDefaultRipple = 8,\n  /** Enable Deposit Authorization on this account. */\n  asfDepositAuth = 9,\n  /**\n   * Allow another account to mint and burn tokens on behalf of this account.\n   */\n  asfAuthorizedNFTokenMinter = 10,\n  /** asf 11 is reserved for Hooks amendment */\n  /** Disallow other accounts from creating incoming NFTOffers */\n  asfDisallowIncomingNFTokenOffer = 12,\n  /** Disallow other accounts from creating incoming Checks */\n  asfDisallowIncomingCheck = 13,\n  /** Disallow other accounts from creating incoming PayChannels */\n  asfDisallowIncomingPayChan = 14,\n  /** Disallow other accounts from creating incoming Trustlines */\n  asfDisallowIncomingTrustline = 15,\n  /** Permanently gain the ability to claw back issued IOUs */\n  asfAllowTrustLineClawback = 16,\n}\n\n/**\n * Enum for AccountSet Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AccountSetTfFlags {\n  /** The same as SetFlag: asfRequireDest. */\n  tfRequireDestTag = 0x00010000,\n  /** The same as ClearFlag: asfRequireDest. */\n  tfOptionalDestTag = 0x00020000,\n  /** The same as SetFlag: asfRequireAuth. */\n  tfRequireAuth = 0x00040000,\n  /** The same as ClearFlag: asfRequireAuth. */\n  tfOptionalAuth = 0x00080000,\n  /** The same as SetFlag: asfDisallowXRP. */\n  tfDisallowXRP = 0x00100000,\n  /** The same as ClearFlag: asfDisallowXRP. */\n  tfAllowXRP = 0x00200000,\n}\n\n/**\n * Map of flags to boolean values representing {@link AccountSet} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n *  const accountSetTx: AccountSet = {\n *    TransactionType: 'AccountSet',\n *    Account: 'rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn',\n *    Flags: {\n *      tfOptionalDestTag: true,\n *      tfRequireAuth: true\n *    },\n *  }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(accountSetTx)\n * console.log(autofilledTx)\n * // {\n * //  TransactionType: 'AccountSet',\n * //  Account: 'rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn',\n * //  Flags: 393216,\n * //  Sequence: 1,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21971793\n * // }\n * ```\n */\nexport interface AccountSetFlagsInterface {\n  tfRequireDestTag?: boolean\n  tfOptionalDestTag?: boolean\n  tfRequireAuth?: boolean\n  tfOptionalAuth?: boolean\n  tfDisallowXRP?: boolean\n  tfAllowXRP?: boolean\n}\n\n/**\n * An AccountSet transaction modifies the properties of an account in the XRP\n * Ledger.\n *\n * @category Transaction Models\n */\nexport interface AccountSet extends BaseTransaction {\n  TransactionType: 'AccountSet'\n  Flags?: number | AccountSetFlagsInterface\n  /** Unique identifier of a flag to disable for this account. */\n  ClearFlag?: number\n  /**\n   * The domain that owns this account, as a string of hex representing the.\n   * ASCII for the domain in lowercase.\n   */\n  Domain?: string\n  /** Hash of an email address to be used for generating an avatar image. */\n  EmailHash?: string\n  /** Public key for sending encrypted messages to this account. */\n  MessageKey?: string\n  /** Integer flag to enable for this account. */\n  SetFlag?: AccountSetAsfFlags\n  /**\n   * The fee to charge when users transfer this account's issued currencies,\n   * represented as billionths of a unit. Cannot be more than 2000000000 or less\n   * than 1000000000, except for the special case 0 meaning no fee.\n   */\n  TransferRate?: number\n  /**\n   * Tick size to use for offers involving a currency issued by this address.\n   * The exchange rates of those offers is rounded to this many significant\n   * digits. Valid values are 3 to 15 inclusive, or 0 to disable.\n   */\n  TickSize?: number\n  /**\n   * Sets an alternate account that is allowed to mint NFTokens on this\n   * account's behalf using NFTokenMint's `Issuer` field.\n   */\n  NFTokenMinter?: Account\n}\n\nconst MIN_TICK_SIZE = 3\nconst MAX_TICK_SIZE = 15\n\n/**\n * Verify the form and type of an AccountSet at runtime.\n *\n * @param tx - An AccountSet Transaction.\n * @throws When the AccountSet is Malformed.\n */\n// eslint-disable-next-line max-lines-per-function -- okay for this method, only a little over\nexport function validateAccountSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateOptionalField(tx, 'NFTokenMinter', isAccount)\n\n  if (tx.ClearFlag !== undefined) {\n    if (typeof tx.ClearFlag !== 'number') {\n      throw new ValidationError('AccountSet: invalid ClearFlag')\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.ClearFlag)) {\n      throw new ValidationError('AccountSet: invalid ClearFlag')\n    }\n  }\n\n  if (tx.Domain !== undefined && typeof tx.Domain !== 'string') {\n    throw new ValidationError('AccountSet: invalid Domain')\n  }\n\n  if (tx.EmailHash !== undefined && typeof tx.EmailHash !== 'string') {\n    throw new ValidationError('AccountSet: invalid EmailHash')\n  }\n\n  if (tx.MessageKey !== undefined && typeof tx.MessageKey !== 'string') {\n    throw new ValidationError('AccountSet: invalid MessageKey')\n  }\n\n  if (tx.SetFlag !== undefined) {\n    if (typeof tx.SetFlag !== 'number') {\n      throw new ValidationError('AccountSet: invalid SetFlag')\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.SetFlag)) {\n      throw new ValidationError('AccountSet: invalid SetFlag')\n    }\n  }\n\n  if (tx.TransferRate !== undefined && typeof tx.TransferRate !== 'number') {\n    throw new ValidationError('AccountSet: invalid TransferRate')\n  }\n\n  if (tx.TickSize !== undefined) {\n    if (typeof tx.TickSize !== 'number') {\n      throw new ValidationError('AccountSet: invalid TickSize')\n    }\n    if (\n      tx.TickSize !== 0 &&\n      (tx.TickSize < MIN_TICK_SIZE || tx.TickSize > MAX_TICK_SIZE)\n    ) {\n      throw new ValidationError('AccountSet: invalid TickSize')\n    }\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Currency, IssuedCurrency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  GlobalFlags,\n  isAccount,\n  isAmount,\n  isCurrency,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Enum representing values for AMMClawback Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AMMClawbackFlags {\n  tfClawTwoAssets = 0x00000001,\n}\n\n/**\n * Map of flags to boolean values representing {@link AMMClawback} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface AMMClawbackFlagsInterface extends GlobalFlags {\n  tfClawTwoAssets?: boolean\n}\n\n/**\n * Claw back tokens from a holder that has deposited your issued tokens into an AMM pool.\n *\n * Clawback is disabled by default. To use clawback, you must send an AccountSet transaction to enable the\n * Allow Trust Line Clawback setting. An issuer with any existing tokens cannot enable clawback. You can\n * only enable Allow Trust Line Clawback if you have a completely empty owner directory, meaning you must\n * do so before you set up any trust lines, offers, escrows, payment channels, checks, or signer lists.\n * After you enable clawback, it cannot reverted: the account permanently gains the ability to claw back\n * issued assets on trust lines.\n */\nexport interface AMMClawback extends BaseTransaction {\n  TransactionType: 'AMMClawback'\n\n  /**\n   * The account holding the asset to be clawed back.\n   */\n  Holder: Account\n\n  /**\n   * Specifies the asset that the issuer wants to claw back from the AMM pool.\n   * In JSON, this is an object with currency and issuer fields. The issuer field must match with Account.\n   */\n  Asset: IssuedCurrency\n\n  /**\n   * Specifies the other asset in the AMM's pool. In JSON, this is an object with currency and\n   * issuer fields (omit issuer for XRP).\n   */\n  Asset2: Currency\n\n  /**\n   * The maximum amount to claw back from the AMM account. The currency and issuer subfields should match\n   * the Asset subfields. If this field isn't specified, or the value subfield exceeds the holder's available\n   * tokens in the AMM, all of the holder's tokens will be clawed back.\n   */\n  Amount?: IssuedCurrencyAmount\n}\n\n/**\n * Verify the form and type of an AMMClawback at runtime.\n *\n * @param tx - An AMMClawback Transaction.\n * @throws {ValidationError} When the transaction is malformed.\n */\nexport function validateAMMClawback(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Holder', isAccount)\n\n  validateRequiredField(tx, 'Asset', isCurrency)\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- required\n  const asset = tx.Asset as IssuedCurrency\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- required\n  const amount = tx.Amount as IssuedCurrencyAmount\n\n  if (tx.Holder === asset.issuer) {\n    throw new ValidationError(\n      'AMMClawback: Holder and Asset.issuer must be distinct',\n    )\n  }\n\n  if (tx.Account !== asset.issuer) {\n    throw new ValidationError(\n      'AMMClawback: Account must be the same as Asset.issuer',\n    )\n  }\n\n  validateRequiredField(tx, 'Asset2', isCurrency)\n\n  validateOptionalField(tx, 'Amount', isAmount)\n\n  if (tx.Amount != null) {\n    if (amount.currency !== asset.currency) {\n      throw new ValidationError(\n        'AMMClawback: Amount.currency must match Asset.currency',\n      )\n    }\n\n    if (amount.issuer !== asset.issuer) {\n      throw new ValidationError(\n        'AMMClawback: Amount.issuer must match Amount.issuer',\n      )\n    }\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount, Currency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  isCurrency,\n  isIssuedCurrency,\n  validateBaseTransaction,\n} from './common'\n\n/**\n * Enum representing values for AMMDeposit Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AMMDepositFlags {\n  tfLPToken = 0x00010000,\n  tfSingleAsset = 0x00080000,\n  tfTwoAsset = 0x00100000,\n  tfOneAssetLPToken = 0x00200000,\n  tfLimitLPToken = 0x00400000,\n  tfTwoAssetIfEmpty = 0x00800000,\n}\n\nexport interface AMMDepositFlagsInterface extends GlobalFlags {\n  tfLPToken?: boolean\n  tfSingleAsset?: boolean\n  tfTwoAsset?: boolean\n  tfOneAssetLPToken?: boolean\n  tfLimitLPToken?: boolean\n  tfTwoAssetIfEmpty?: boolean\n}\n\n/**\n * Deposit funds into an Automated Market Maker (AMM) instance\n * and receive the AMM's liquidity provider tokens (LP Tokens) in exchange.\n *\n * You can deposit one or both of the assets in the AMM's pool.\n * If successful, this transaction creates a trust line to the AMM Account (limit 0) to hold the LP Tokens.\n */\nexport interface AMMDeposit extends BaseTransaction {\n  TransactionType: 'AMMDeposit'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * The amount of one asset to deposit to the AMM.\n   * If present, this must match the type of one of the assets (tokens or XRP) in the AMM's pool.\n   */\n  Amount?: Amount\n\n  /**\n   * The amount of another asset to add to the AMM.\n   * If present, this must match the type of the other asset in the AMM's pool and cannot be the same asset as Amount.\n   */\n  Amount2?: Amount\n\n  /**\n   * The maximum effective price, in the deposit asset, to pay for each LP Token received.\n   */\n  EPrice?: Amount\n\n  /**\n   * How many of the AMM's LP Tokens to buy.\n   */\n  LPTokenOut?: IssuedCurrencyAmount\n}\n\n/**\n * Verify the form and type of an AMMDeposit at runtime.\n *\n * @param tx - An AMMDeposit Transaction.\n * @throws When the AMMDeposit is Malformed.\n */\nexport function validateAMMDeposit(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMDeposit: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMDeposit: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMDeposit: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMDeposit: Asset2 must be a Currency')\n  }\n\n  if (tx.Amount2 != null && tx.Amount == null) {\n    throw new ValidationError('AMMDeposit: must set Amount with Amount2')\n  } else if (tx.EPrice != null && tx.Amount == null) {\n    throw new ValidationError('AMMDeposit: must set Amount with EPrice')\n  } else if (tx.LPTokenOut == null && tx.Amount == null) {\n    throw new ValidationError(\n      'AMMDeposit: must set at least LPTokenOut or Amount',\n    )\n  }\n\n  if (tx.LPTokenOut != null && !isIssuedCurrency(tx.LPTokenOut)) {\n    throw new ValidationError(\n      'AMMDeposit: LPTokenOut must be an IssuedCurrencyAmount',\n    )\n  }\n\n  if (tx.Amount != null && !isAmount(tx.Amount)) {\n    throw new ValidationError('AMMDeposit: Amount must be an Amount')\n  }\n\n  if (tx.Amount2 != null && !isAmount(tx.Amount2)) {\n    throw new ValidationError('AMMDeposit: Amount2 must be an Amount')\n  }\n\n  if (tx.EPrice != null && !isAmount(tx.EPrice)) {\n    throw new ValidationError('AMMDeposit: EPrice must be an Amount')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount, Currency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  isCurrency,\n  isIssuedCurrency,\n  validateBaseTransaction,\n} from './common'\n\n/**\n * Enum representing values for AMMWithdrawFlags Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AMMWithdrawFlags {\n  tfLPToken = 0x00010000,\n  tfWithdrawAll = 0x00020000,\n  tfOneAssetWithdrawAll = 0x00040000,\n  tfSingleAsset = 0x00080000,\n  tfTwoAsset = 0x00100000,\n  tfOneAssetLPToken = 0x00200000,\n  tfLimitLPToken = 0x00400000,\n}\n\nexport interface AMMWithdrawFlagsInterface extends GlobalFlags {\n  tfLPToken?: boolean\n  tfWithdrawAll?: boolean\n  tfOneAssetWithdrawAll?: boolean\n  tfSingleAsset?: boolean\n  tfTwoAsset?: boolean\n  tfOneAssetLPToken?: boolean\n  tfLimitLPToken?: boolean\n}\n\n/**\n * Withdraw assets from an Automated Market Maker (AMM) instance by returning the AMM's liquidity provider tokens (LP Tokens).\n */\nexport interface AMMWithdraw extends BaseTransaction {\n  TransactionType: 'AMMWithdraw'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * The amount of one asset to withdraw from the AMM.\n   * This must match the type of one of the assets (tokens or XRP) in the AMM's pool.\n   */\n  Amount?: Amount\n\n  /**\n   * The amount of another asset to withdraw from the AMM.\n   * If present, this must match the type of the other asset in the AMM's pool and cannot be the same type as Amount.\n   */\n  Amount2?: Amount\n\n  /**\n   * The minimum effective price, in LP Token returned, to pay per unit of the asset to withdraw.\n   */\n  EPrice?: Amount\n\n  /**\n   * How many of the AMM's LP Tokens to redeem.\n   */\n  LPTokenIn?: IssuedCurrencyAmount\n}\n\n/**\n * Verify the form and type of an AMMWithdraw at runtime.\n *\n * @param tx - An AMMWithdraw Transaction.\n * @throws When the AMMWithdraw is Malformed.\n */\nexport function validateAMMWithdraw(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMWithdraw: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMWithdraw: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMWithdraw: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMWithdraw: Asset2 must be a Currency')\n  }\n\n  if (tx.Amount2 != null && tx.Amount == null) {\n    throw new ValidationError('AMMWithdraw: must set Amount with Amount2')\n  } else if (tx.EPrice != null && tx.Amount == null) {\n    throw new ValidationError('AMMWithdraw: must set Amount with EPrice')\n  }\n\n  if (tx.LPTokenIn != null && !isIssuedCurrency(tx.LPTokenIn)) {\n    throw new ValidationError(\n      'AMMWithdraw: LPTokenIn must be an IssuedCurrencyAmount',\n    )\n  }\n\n  if (tx.Amount != null && !isAmount(tx.Amount)) {\n    throw new ValidationError('AMMWithdraw: Amount must be an Amount')\n  }\n\n  if (tx.Amount2 != null && !isAmount(tx.Amount2)) {\n    throw new ValidationError('AMMWithdraw: Amount2 must be an Amount')\n  }\n\n  if (tx.EPrice != null && !isAmount(tx.EPrice)) {\n    throw new ValidationError('AMMWithdraw: EPrice must be an Amount')\n  }\n}\n", "import {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateRequiredField,\n  Account,\n  validateOptionalField,\n  isAccount,\n  GlobalFlags,\n} from './common'\n\n/**\n * Transaction Flags for an MPTokenAuthorize Transaction.\n *\n * @category Transaction Flags\n */\nexport enum MPTokenAuthorizeFlags {\n  /**\n   * If set and transaction is submitted by a holder, it indicates that the holder no\n   * longer wants to hold the MPToken, which will be deleted as a result. If the the holder's\n   * MPToken has non-zero balance while trying to set this flag, the transaction will fail. On\n   * the other hand, if set and transaction is submitted by an issuer, it would mean that the\n   * issuer wants to unauthorize the holder (only applicable for allow-listing),\n   * which would unset the lsfMPTAuthorized flag on the MPToken.\n   */\n  tfMPTUnauthorize = 0x00000001,\n}\n\n/**\n * Map of flags to boolean values representing {@link MPTokenAuthorize} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface MPTokenAuthorizeFlagsInterface extends GlobalFlags {\n  tfMPTUnauthorize?: boolean\n}\n\n/**\n * The MPTokenAuthorize transaction is used to globally lock/unlock a MPTokenIssuance,\n * or lock/unlock an individual's MPToken.\n */\nexport interface MPTokenAuthorize extends BaseTransaction {\n  TransactionType: 'MPTokenAuthorize'\n  /**\n   * Identifies the MPTokenIssuance\n   */\n  MPTokenIssuanceID: string\n  /**\n   * An optional XRPL Address of an individual token holder balance to lock/unlock.\n   * If omitted, this transaction will apply to all any accounts holding MPTs.\n   */\n  Holder?: Account\n  Flags?: number | MPTokenAuthorizeFlagsInterface\n}\n\n/**\n * Verify the form and type of an MPTokenAuthorize at runtime.\n *\n * @param tx - An MPTokenAuthorize Transaction.\n * @throws When the MPTokenAuthorize is Malformed.\n */\nexport function validateMPTokenAuthorize(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  validateRequiredField(tx, 'MPTokenIssuanceID', isString)\n  validateOptionalField(tx, 'Holder', isAccount)\n}\n", "import { ValidationError } from '../../errors'\nimport { isHex, INTEGER_SANITY_CHECK, isFlagEnabled } from '../utils'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  validateBaseTransaction,\n  validateOptionalField,\n  isString,\n  isNumber,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n// 2^63 - 1\nconst MAX_AMT = '9223372036854775807'\nconst MAX_TRANSFER_FEE = 50000\n\n/**\n * Transaction Flags for an MPTokenIssuanceCreate Transaction.\n *\n * @category Transaction Flags\n */\nexport enum MPTokenIssuanceCreateFlags {\n  /**\n   * If set, indicates that the MPT can be locked both individually and globally.\n   * If not set, the MPT cannot be locked in any way.\n   */\n  tfMPTCanLock = 0x00000002,\n  /**\n   * If set, indicates that individual holders must be authorized.\n   * This enables issuers to limit who can hold their assets.\n   */\n  tfMPTRequireAuth = 0x00000004,\n  /**\n   * If set, indicates that individual holders can place their balances into an escrow.\n   */\n  tfMPTCanEscrow = 0x00000008,\n  /**\n   * If set, indicates that individual holders can trade their balances\n   *  using the XRP Ledger DEX or AMM.\n   */\n  tfMPTCanTrade = 0x00000010,\n  /**\n   * If set, indicates that tokens may be transferred to other accounts\n   *  that are not the issuer.\n   */\n  tfMPTCanTransfer = 0x00000020,\n  /**\n   * If set, indicates that the issuer may use the Clawback transaction\n   * to clawback value from individual holders.\n   */\n  tfMPTCanClawback = 0x00000040,\n}\n\n/**\n * Map of flags to boolean values representing {@link MPTokenIssuanceCreate} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface MPTokenIssuanceCreateFlagsInterface extends GlobalFlags {\n  tfMPTCanLock?: boolean\n  tfMPTRequireAuth?: boolean\n  tfMPTCanEscrow?: boolean\n  tfMPTCanTrade?: boolean\n  tfMPTCanTransfer?: boolean\n  tfMPTCanClawback?: boolean\n}\n\n/**\n * The MPTokenIssuanceCreate transaction creates a MPTokenIssuance object\n * and adds it to the relevant directory node of the creator account.\n * This transaction is the only opportunity an issuer has to specify any token fields\n * that are defined as immutable (e.g., MPT Flags). If the transaction is successful,\n * the newly created token will be owned by the account (the creator account) which\n * executed the transaction.\n */\nexport interface MPTokenIssuanceCreate extends BaseTransaction {\n  TransactionType: 'MPTokenIssuanceCreate'\n  /**\n   * An asset scale is the difference, in orders of magnitude, between a standard unit and\n   * a corresponding fractional unit. More formally, the asset scale is a non-negative integer\n   * (0, 1, 2, …) such that one standard unit equals 10^(-scale) of a corresponding\n   * fractional unit. If the fractional unit equals the standard unit, then the asset scale is 0.\n   * Note that this value is optional, and will default to 0 if not supplied.\n   */\n  AssetScale?: number\n  /**\n   * Specifies the maximum asset amount of this token that should ever be issued.\n   * It is a non-negative integer string that can store a range of up to 63 bits. If not set, the max\n   * amount will default to the largest unsigned 63-bit integer (0x7FFFFFFFFFFFFFFF or 9223372036854775807)\n   *\n   * Example:\n   * ```\n   * MaximumAmount: '9223372036854775807'\n   * ```\n   */\n  MaximumAmount?: string\n  /**\n   * Specifies the fee to charged by the issuer for secondary sales of the Token,\n   * if such sales are allowed. Valid values for this field are between 0 and 50,000 inclusive,\n   * allowing transfer rates of between 0.000% and 50.000% in increments of 0.001.\n   * The field must NOT be present if the `tfMPTCanTransfer` flag is not set.\n   */\n  TransferFee?: number\n  /**\n   * Arbitrary metadata about this issuance, in hex format.\n   */\n  MPTokenMetadata?: string | null\n  Flags?: number | MPTokenIssuanceCreateFlagsInterface\n}\n\nexport interface MPTokenIssuanceCreateMetadata extends TransactionMetadataBase {\n  mpt_issuance_id?: string\n}\n\n/* eslint-disable max-lines-per-function -- Not needed to reduce function */\n/**\n * Verify the form and type of an MPTokenIssuanceCreate at runtime.\n *\n * @param tx - An MPTokenIssuanceCreate Transaction.\n * @throws When the MPTokenIssuanceCreate is Malformed.\n */\nexport function validateMPTokenIssuanceCreate(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n  validateOptionalField(tx, 'MaximumAmount', isString)\n  validateOptionalField(tx, 'MPTokenMetadata', isString)\n  validateOptionalField(tx, 'TransferFee', isNumber)\n  validateOptionalField(tx, 'AssetScale', isNumber)\n\n  if (typeof tx.MPTokenMetadata === 'string' && tx.MPTokenMetadata === '') {\n    throw new ValidationError(\n      'MPTokenIssuanceCreate: MPTokenMetadata must not be empty string',\n    )\n  }\n\n  if (typeof tx.MPTokenMetadata === 'string' && !isHex(tx.MPTokenMetadata)) {\n    throw new ValidationError(\n      'MPTokenIssuanceCreate: MPTokenMetadata must be in hex format',\n    )\n  }\n\n  if (typeof tx.MaximumAmount === 'string') {\n    if (!INTEGER_SANITY_CHECK.exec(tx.MaximumAmount)) {\n      throw new ValidationError('MPTokenIssuanceCreate: Invalid MaximumAmount')\n    } else if (\n      BigInt(tx.MaximumAmount) > BigInt(MAX_AMT) ||\n      BigInt(tx.MaximumAmount) < BigInt(`0`)\n    ) {\n      throw new ValidationError(\n        'MPTokenIssuanceCreate: MaximumAmount out of range',\n      )\n    }\n  }\n\n  if (typeof tx.TransferFee === 'number') {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Not necessary\n    const flags = tx.Flags as number | MPTokenIssuanceCreateFlagsInterface\n    const isTfMPTCanTransfer =\n      typeof flags === 'number'\n        ? isFlagEnabled(flags, MPTokenIssuanceCreateFlags.tfMPTCanTransfer)\n        : flags.tfMPTCanTransfer ?? false\n\n    if (tx.TransferFee < 0 || tx.TransferFee > MAX_TRANSFER_FEE) {\n      throw new ValidationError(\n        `MPTokenIssuanceCreate: TransferFee must be between 0 and ${MAX_TRANSFER_FEE}`,\n      )\n    }\n\n    if (tx.TransferFee && !isTfMPTCanTransfer) {\n      throw new ValidationError(\n        'MPTokenIssuanceCreate: TransferFee cannot be provided without enabling tfMPTCanTransfer flag',\n      )\n    }\n  }\n}\n/* eslint-enable max-lines-per-function */\n", "import { ValidationError } from '../../errors'\nimport { isFlagEnabled } from '../utils'\n\nimport {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateRequiredField,\n  Account,\n  validateOptionalField,\n  isAccount,\n  GlobalFlags,\n} from './common'\n\n/**\n * Transaction Flags for an MPTokenIssuanceSet Transaction.\n *\n * @category Transaction Flags\n */\nexport enum MPTokenIssuanceSetFlags {\n  /**\n   * If set, indicates that issuer locks the MPT\n   */\n  tfMPTLock = 0x00000001,\n  /**\n   * If set, indicates that issuer unlocks the MPT\n   */\n  tfMPTUnlock = 0x00000002,\n}\n\n/**\n * Map of flags to boolean values representing {@link MPTokenIssuanceSet} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface MPTokenIssuanceSetFlagsInterface extends GlobalFlags {\n  tfMPTLock?: boolean\n  tfMPTUnlock?: boolean\n}\n\n/**\n * The MPTokenIssuanceSet transaction is used to globally lock/unlock a MPTokenIssuance,\n * or lock/unlock an individual's MPToken.\n */\nexport interface MPTokenIssuanceSet extends BaseTransaction {\n  TransactionType: 'MPTokenIssuanceSet'\n  /**\n   * Identifies the MPTokenIssuance\n   */\n  MPTokenIssuanceID: string\n  /**\n   * An optional XRPL Address of an individual token holder balance to lock/unlock.\n   * If omitted, this transaction will apply to all any accounts holding MPTs.\n   */\n  Holder?: Account\n  Flags?: number | MPTokenIssuanceSetFlagsInterface\n}\n\n/**\n * Verify the form and type of an MPTokenIssuanceSet at runtime.\n *\n * @param tx - An MPTokenIssuanceSet Transaction.\n * @throws When the MPTokenIssuanceSet is Malformed.\n */\nexport function validateMPTokenIssuanceSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  validateRequiredField(tx, 'MPTokenIssuanceID', isString)\n  validateOptionalField(tx, 'Holder', isAccount)\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Not necessary\n  const flags = tx.Flags as number | MPTokenIssuanceSetFlagsInterface\n  const isTfMPTLock =\n    typeof flags === 'number'\n      ? isFlagEnabled(flags, MPTokenIssuanceSetFlags.tfMPTLock)\n      : flags.tfMPTLock ?? false\n\n  const isTfMPTUnlock =\n    typeof flags === 'number'\n      ? isFlagEnabled(flags, MPTokenIssuanceSetFlags.tfMPTUnlock)\n      : flags.tfMPTUnlock ?? false\n\n  if (isTfMPTLock && isTfMPTUnlock) {\n    throw new ValidationError('MPTokenIssuanceSet: flag conflict')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\nimport { isFlagEnabled } from '../utils'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  validateBaseTransaction,\n  isAmount,\n  parseAmountValue,\n  isAccount,\n  validateOptionalField,\n  Account,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * Transaction Flags for an NFTokenCreateOffer Transaction.\n *\n * @category Transaction Flags\n */\nexport enum NFTokenCreateOfferFlags {\n  /**\n   * If set, indicates that the offer is a sell offer.\n   * Otherwise, it is a buy offer.\n   */\n  tfSellNFToken = 0x00000001,\n}\n\n/**\n * Map of flags to boolean values representing {@link NFTokenCreateOffer} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface NFTokenCreateOfferFlagsInterface extends GlobalFlags {\n  tfSellNFToken?: boolean\n}\n\n/**\n * The NFTokenCreateOffer transaction creates either an offer to buy an\n * NFT the submitting account does not own, or an offer to sell an NFT\n * the submitting account does own.\n */\nexport interface NFTokenCreateOffer extends BaseTransaction {\n  TransactionType: 'NFTokenCreateOffer'\n  /**\n   * Identifies the NFTokenID of the NFToken object that the\n   * offer references.\n   */\n  NFTokenID: string\n  /**\n   * Indicates the amount expected or offered for the Token.\n   *\n   * The amount must be non-zero, except when this is a sell\n   * offer and the asset is XRP. This would indicate that the current\n   * owner of the token is giving it away free, either to anyone at all,\n   * or to the account identified by the Destination field.\n   */\n  Amount: Amount\n  /**\n   * Indicates the AccountID of the account that owns the\n   * corresponding NFToken.\n   *\n   * If the offer is to buy a token, this field must be present\n   * and it must be different than Account (since an offer to\n   * buy a token one already holds is meaningless).\n   *\n   * If the offer is to sell a token, this field must not be\n   * present, as the owner is, implicitly, the same as Account\n   * (since an offer to sell a token one doesn't already hold\n   * is meaningless).\n   */\n  Owner?: Account\n  /**\n   * Indicates the time after which the offer will no longer\n   * be valid. The value is the number of seconds since the\n   * Ripple Epoch.\n   */\n  Expiration?: number\n  /**\n   * If present, indicates that this offer may only be\n   * accepted by the specified account. Attempts by other\n   * accounts to accept this offer MUST fail.\n   */\n  Destination?: Account\n  Flags?: number | NFTokenCreateOfferFlagsInterface\n}\n\nexport interface NFTokenCreateOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0 or later\n  offer_id?: string\n}\n\nfunction validateNFTokenSellOfferCases(tx: Record<string, unknown>): void {\n  if (tx.Owner != null) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner must not be present for sell offers',\n    )\n  }\n}\n\nfunction validateNFTokenBuyOfferCases(tx: Record<string, unknown>): void {\n  if (tx.Owner == null) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner must be present for buy offers',\n    )\n  }\n\n  if (parseAmountValue(tx.Amount) <= 0) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Amount must be greater than 0 for buy offers',\n    )\n  }\n}\n\n/**\n * Verify the form and type of an NFTokenCreateOffer at runtime.\n *\n * @param tx - An NFTokenCreateOffer Transaction.\n * @throws When the NFTokenCreateOffer is Malformed.\n */\nexport function validateNFTokenCreateOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Account === tx.Owner) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner and Account must not be equal',\n    )\n  }\n\n  if (tx.Account === tx.Destination) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Destination and Account must not be equal',\n    )\n  }\n\n  validateOptionalField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'Owner', isAccount)\n\n  if (tx.NFTokenID == null) {\n    throw new ValidationError('NFTokenCreateOffer: missing field NFTokenID')\n  }\n\n  if (!isAmount(tx.Amount)) {\n    throw new ValidationError('NFTokenCreateOffer: invalid Amount')\n  }\n\n  if (\n    typeof tx.Flags === 'number' &&\n    isFlagEnabled(tx.Flags, NFTokenCreateOfferFlags.tfSellNFToken)\n  ) {\n    validateNFTokenSellOfferCases(tx)\n  } else {\n    validateNFTokenBuyOfferCases(tx)\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\nimport { isHex } from '../utils'\n\nimport {\n  Account,\n  BaseTransaction,\n  GlobalFlags,\n  isAccount,\n  isAmount,\n  isNumber,\n  validateBaseTransaction,\n  validateOptionalField,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * Transaction Flags for an NFTokenMint Transaction.\n *\n * @category Transaction Flags\n */\nexport enum NFTokenMintFlags {\n  /**\n   * If set, indicates that the minted token may be burned by the issuer even\n   * if the issuer does not currently hold the token. The current holder of\n   * the token may always burn it.\n   */\n  tfBurnable = 0x00000001,\n  /**\n   * If set, indicates that the token may only be offered or sold for XRP.\n   */\n  tfOnlyXRP = 0x00000002,\n  /**\n   * If set, indicates that the issuer wants a trustline to be automatically\n   * created.\n   */\n  tfTrustLine = 0x00000004,\n  /**\n   * If set, indicates that this NFT can be transferred. This flag has no\n   * effect if the token is being transferred from the issuer or to the\n   * issuer.\n   */\n  tfTransferable = 0x00000008,\n  /**\n   * If set, indicates that this NFT's URI can be modified.\n   */\n  tfMutable = 0x00000010,\n}\n\n/**\n * Map of flags to boolean values representing {@link NFTokenMint} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface NFTokenMintFlagsInterface extends GlobalFlags {\n  tfBurnable?: boolean\n  tfOnlyXRP?: boolean\n  tfTrustLine?: boolean\n  tfTransferable?: boolean\n  tfMutable?: boolean\n}\n\n/**\n * The NFTokenMint transaction creates an NFToken object and adds it to the\n * relevant NFTokenPage object of the minter. If the transaction is\n * successful, the newly minted token will be owned by the minter account\n * specified by the transaction.\n */\nexport interface NFTokenMint extends BaseTransaction {\n  TransactionType: 'NFTokenMint'\n  /**\n   * Indicates the taxon associated with this token. The taxon is generally a\n   * value chosen by the minter of the token and a given taxon may be used for\n   * multiple tokens. The implementation reserves taxon identifiers greater\n   * than or equal to 2147483648 (0x80000000). If you have no use for this\n   * field, set it to 0.\n   */\n  NFTokenTaxon: number\n  /**\n   * Indicates the account that should be the issuer of this token. This value\n   * is optional and should only be specified if the account executing the\n   * transaction is not the `Issuer` of the `NFToken` object. If it is\n   * present, the `MintAccount` field in the `AccountRoot` of the `Issuer`\n   * field must match the `Account`, otherwise the transaction will fail.\n   */\n  Issuer?: Account\n  /**\n   * Specifies the fee charged by the issuer for secondary sales of the Token,\n   * if such sales are allowed. Valid values for this field are between 0 and\n   * 50000 inclusive, allowing transfer rates between 0.000% and 50.000% in\n   * increments of 0.001%. This field must NOT be present if the\n   * `tfTransferable` flag is not set.\n   */\n  TransferFee?: number\n  /**\n   * URI that points to the data and/or metadata associated with the NFT.\n   * This field need not be an HTTP or HTTPS URL; it could be an IPFS URI, a\n   * magnet link, immediate data encoded as an RFC2379 \"data\" URL, or even an\n   * opaque issuer-specific encoding. The URI is NOT checked for validity, but\n   * the field is limited to a maximum length of 256 bytes.\n   *\n   * This field must be hex-encoded. You can use `convertStringToHex` to\n   * convert this field to the proper encoding.\n   *\n   * This field must not be an empty string. Omit it from the transaction or\n   * set to `undefined` value if you do not use it.\n   */\n  URI?: string | null\n  /**\n   * Indicates the amount expected for the Token.\n   *\n   * The amount can be zero. This would indicate that the account is giving\n   * the token away free, either to anyone at all, or to the account identified\n   * by the Destination field.\n   */\n  Amount?: Amount\n  /**\n   * Indicates the time after which the offer will no longer\n   * be valid. The value is the number of seconds since the\n   * Ripple Epoch.\n   */\n  Expiration?: number\n  /**\n   * If present, indicates that this offer may only be\n   * accepted by the specified account. Attempts by other\n   * accounts to accept this offer MUST fail.\n   */\n  Destination?: Account\n  Flags?: number | NFTokenMintFlagsInterface\n}\n\nexport interface NFTokenMintMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0 or later\n  nftoken_id?: string\n  // if Amount is present\n  offer_id?: string\n}\n\n/**\n * Verify the form and type of an NFTokenMint at runtime.\n *\n * @param tx - An NFTokenMint Transaction.\n * @throws When the NFTokenMint is Malformed.\n */\nexport function validateNFTokenMint(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Account === tx.Issuer) {\n    throw new ValidationError(\n      'NFTokenMint: Issuer must not be equal to Account',\n    )\n  }\n\n  validateOptionalField(tx, 'Issuer', isAccount)\n\n  if (typeof tx.URI === 'string' && tx.URI === '') {\n    throw new ValidationError('NFTokenMint: URI must not be empty string')\n  }\n\n  if (typeof tx.URI === 'string' && !isHex(tx.URI)) {\n    throw new ValidationError('NFTokenMint: URI must be in hex format')\n  }\n\n  if (tx.NFTokenTaxon == null) {\n    throw new ValidationError('NFTokenMint: missing field NFTokenTaxon')\n  }\n\n  if (tx.Amount == null) {\n    if (tx.Expiration != null || tx.Destination != null) {\n      throw new ValidationError(\n        'NFTokenMint: Amount is required when Expiration or Destination is present',\n      )\n    }\n  }\n\n  validateOptionalField(tx, 'Amount', isAmount)\n  validateOptionalField(tx, 'Expiration', isNumber)\n  validateOptionalField(tx, 'Destination', isAccount)\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  validateBaseTransaction,\n  isAmount,\n} from './common'\n\n/**\n * Transaction Flags for an OfferCreate Transaction.\n *\n * @category Transaction Flags\n */\nexport enum OfferCreateFlags {\n  /**\n   * If enabled, the offer does not consume offers that exactly match it, and\n   * instead becomes an Offer object in the ledger. It still consumes offers\n   * that cross it.\n   */\n  tfPassive = 0x00010000,\n  /**\n   * Treat the offer as an Immediate or Cancel order. If enabled, the offer\n   * never becomes a ledger object: it only tries to match existing offers in\n   * the ledger. If the offer cannot match any offers immediately, it executes\n   * \"successfully\" without trading any currency. In this case, the transaction\n   * has the result code tesSUCCESS, but creates no Offer objects in the ledger.\n   */\n  tfImmediateOrCancel = 0x00020000,\n  /**\n   * Treat the offer as a Fill or Kill order . Only try to match existing\n   * offers in the ledger, and only do so if the entire TakerPays quantity can\n   * be obtained. If the fix1578 amendment is enabled and the offer cannot be\n   * executed when placed, the transaction has the result code tecKILLED;\n   * otherwise, the transaction uses the result code tesSUCCESS even when it was\n   * killed without trading any currency.\n   */\n  tfFillOrKill = 0x00040000,\n  /**\n   * Exchange the entire TakerGets amount, even if it means obtaining more than\n   * the TakerPays amount in exchange.\n   */\n  tfSell = 0x00080000,\n}\n\n/**\n * Map of flags to boolean values representing {@link OfferCreate} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n * const tx: OfferCreate = {\n * Account: 'rhFcpWDHLqpBmX4ezWiA5VLSS4e1BHqhHd',\n * TakerGets: '43000.51',\n * TakerPays: '12928290425',\n * TransactionType: 'OfferCreate',\n * Flags: {\n *   tfPassive: true,\n *   tfFillOrKill: true,\n *  },\n * }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(tx)\n * console.log(autofilledTx)\n * // {\n * // Account: 'rhFcpWDHLqpBmX4ezWiA5VLSS4e1BHqhHd',\n * // TakerGets: '43000.51',\n * // TakerPays: '12928290425',\n * // TransactionType: 'OfferCreate',\n * // Flags: 327680,\n * // Sequence: 21970384,\n * // Fee: '12',\n * // LastLedgerSequence: 21970404\n * // }\n * ```\n */\nexport interface OfferCreateFlagsInterface extends GlobalFlags {\n  tfPassive?: boolean\n  tfImmediateOrCancel?: boolean\n  tfFillOrKill?: boolean\n  tfSell?: boolean\n}\n\n/**\n * An OfferCreate transaction is effectively a limit order . It defines an\n * intent to exchange currencies, and creates an Offer object if not completely.\n * Fulfilled when placed. Offers can be partially fulfilled.\n *\n * @category Transaction Models\n */\nexport interface OfferCreate extends BaseTransaction {\n  TransactionType: 'OfferCreate'\n  Flags?: number | OfferCreateFlagsInterface\n  /**\n   * Time after which the offer is no longer active, in seconds since the.\n   * Ripple Epoch.\n   */\n  Expiration?: number\n  /** An offer to delete first, specified in the same way as OfferCancel. */\n  OfferSequence?: number\n  /** The amount and type of currency being provided by the offer creator. */\n  TakerGets: Amount\n  /** The amount and type of currency being requested by the offer creator. */\n  TakerPays: Amount\n}\n\n/**\n * Verify the form and type of an OfferCreate at runtime.\n *\n * @param tx - An OfferCreate Transaction.\n * @throws When the OfferCreate is Malformed.\n */\nexport function validateOfferCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.TakerGets === undefined) {\n    throw new ValidationError('OfferCreate: missing field TakerGets')\n  }\n\n  if (tx.TakerPays === undefined) {\n    throw new ValidationError('OfferCreate: missing field TakerPays')\n  }\n\n  if (typeof tx.TakerGets !== 'string' && !isAmount(tx.TakerGets)) {\n    throw new ValidationError('OfferCreate: invalid TakerGets')\n  }\n\n  if (typeof tx.TakerPays !== 'string' && !isAmount(tx.TakerPays)) {\n    throw new ValidationError('OfferCreate: invalid TakerPays')\n  }\n\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new ValidationError('OfferCreate: invalid Expiration')\n  }\n\n  if (tx.OfferSequence !== undefined && typeof tx.OfferSequence !== 'number') {\n    throw new ValidationError('OfferCreate: invalid OfferSequence')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount, Path, MPTAmount } from '../common'\nimport { isFlagEnabled } from '../utils'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  GlobalFlags,\n  validateBaseTransaction,\n  isAccount,\n  validateRequiredField,\n  validateOptionalField,\n  isNumber,\n  Account,\n  validateCredentialsList,\n  MAX_AUTHORIZED_CREDENTIALS,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * Enum representing values for Payment Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum PaymentFlags {\n  /**\n   * Do not use the default path; only use paths included in the Paths field.\n   * This is intended to force the transaction to take arbitrage opportunities.\n   * Most clients do not need this.\n   */\n  tfNoRippleDirect = 0x00010000,\n  /**\n   * If the specified Amount cannot be sent without spending more than SendMax,\n   * reduce the received amount instead of failing outright. See Partial.\n   * Payments for more details.\n   */\n  tfPartialPayment = 0x00020000,\n  /**\n   * Only take paths where all the conversions have an input:output ratio that\n   * is equal or better than the ratio of Amount:SendMax. See Limit Quality for\n   * details.\n   */\n  tfLimitQuality = 0x00040000,\n}\n\n/**\n * Map of flags to boolean values representing {@link Payment} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n * const partialPayment: Payment = {\n *  TransactionType: 'Payment',\n *  Account: 'rM9WCfJU6udpFkvKThRaFHDMsp7L8rpgN',\n *  Amount: {\n *    currency: 'FOO',\n *    value: '4000',\n *    issuer: 'rPzwM2JfCSDjhbesdTCqFjWWdK7eFtTwZz',\n *  },\n *  Destination: 'rPzwM2JfCSDjhbesdTCqFjWWdK7eFtTwZz',\n *  Flags: {\n *    tfPartialPayment: true\n *  }\n * }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(partialPayment)\n * console.log(autofilledTx)\n * // {\n * //  TransactionType: 'Payment',\n * //  Account: 'rM9WCfJU6udpFkvKThRaFHDMsp7L8rpgN',\n * //  Amount: {\n * //   currency: 'FOO',\n * //   value: '4000',\n * //   issuer: 'rPzwM2JfCSDjhbesdTCqFjWWdK7eFtTwZz'\n * //  },\n * //  Destination: 'rPzwM2JfCSDjhbesdTCqFjWWdK7eFtTwZz',\n * //  Flags: 131072,\n * //  Sequence: 21970996,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21971016\n * // }\n * ```\n */\nexport interface PaymentFlagsInterface extends GlobalFlags {\n  /**\n   * Do not use the default path; only use paths included in the Paths field.\n   * This is intended to force the transaction to take arbitrage opportunities.\n   * Most clients do not need this.\n   */\n  tfNoRippleDirect?: boolean\n  /**\n   * If the specified Amount cannot be sent without spending more than SendMax,\n   * reduce the received amount instead of failing outright. See Partial.\n   * Payments for more details.\n   */\n  tfPartialPayment?: boolean\n  /**\n   * Only take paths where all the conversions have an input:output ratio that\n   * is equal or better than the ratio of Amount:SendMax. See Limit Quality for\n   * details.\n   */\n  tfLimitQuality?: boolean\n}\n\n/**\n * A Payment transaction represents a transfer of value from one account to\n * another.\n *\n * @category Transaction Models\n */\nexport interface Payment extends BaseTransaction {\n  TransactionType: 'Payment'\n  /**\n   * The amount of currency to deliver. For non-XRP amounts, the nested field\n   * names MUST be lower-case. If the tfPartialPayment flag is set, deliver up\n   * to this amount instead.\n   */\n  Amount: Amount | MPTAmount\n  /** The unique address of the account receiving the payment. */\n  Destination: Account\n  /**\n   * Arbitrary tag that identifies the reason for the payment to the\n   * destination, or a hosted recipient to pay.\n   */\n  DestinationTag?: number\n  /**\n   * Arbitrary 256-bit hash representing a specific reason or identifier for\n   * this payment.\n   */\n  InvoiceID?: string\n  /**\n   * Array of payment paths to be used for this transaction. Must be omitted\n   * for XRP-to-XRP transactions.\n   */\n  Paths?: Path[]\n  /**\n   * Highest amount of source currency this transaction is allowed to cost,\n   * including transfer fees, exchange rates, and slippage . Does not include\n   * the XRP destroyed as a cost for submitting the transaction. For non-XRP\n   * amounts, the nested field names MUST be lower-case. Must be supplied for\n   * cross-currency/cross-issue payments. Must be omitted for XRP-to-XRP\n   * Payments.\n   */\n  SendMax?: Amount | MPTAmount\n  /**\n   * Minimum amount of destination currency this transaction should deliver.\n   * Only valid if this is a partial payment. For non-XRP amounts, the nested\n   * field names are lower-case.\n   */\n  DeliverMin?: Amount | MPTAmount\n  /**\n   * Credentials associated with the sender of this transaction.\n   * The credentials included must not be expired.\n   */\n  CredentialIDs?: string[]\n  Flags?: number | PaymentFlagsInterface\n}\n\nexport interface PaymentMetadata extends TransactionMetadataBase {\n  DeliveredAmount?: Amount | MPTAmount\n  delivered_amount?: Amount | MPTAmount | 'unavailable'\n}\n\n/**\n * Verify the form and type of a Payment at runtime.\n *\n * @param tx - A Payment Transaction.\n * @throws When the Payment is malformed.\n */\nexport function validatePayment(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('PaymentTransaction: missing field Amount')\n  }\n\n  if (!isAmount(tx.Amount)) {\n    throw new ValidationError('PaymentTransaction: invalid Amount')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  validateCredentialsList(\n    tx.CredentialIDs,\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- known from base check\n    tx.TransactionType as string,\n    true,\n    MAX_AUTHORIZED_CREDENTIALS,\n  )\n\n  if (tx.InvoiceID !== undefined && typeof tx.InvoiceID !== 'string') {\n    throw new ValidationError('PaymentTransaction: InvoiceID must be a string')\n  }\n\n  if (\n    tx.Paths !== undefined &&\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n    !isPaths(tx.Paths as Array<Array<Record<string, unknown>>>)\n  ) {\n    throw new ValidationError('PaymentTransaction: invalid Paths')\n  }\n\n  if (tx.SendMax !== undefined && !isAmount(tx.SendMax)) {\n    throw new ValidationError('PaymentTransaction: invalid SendMax')\n  }\n\n  checkPartialPayment(tx)\n}\n\nfunction checkPartialPayment(tx: Record<string, unknown>): void {\n  if (tx.DeliverMin != null) {\n    if (tx.Flags == null) {\n      throw new ValidationError(\n        'PaymentTransaction: tfPartialPayment flag required with DeliverMin',\n      )\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n    const flags = tx.Flags as number | PaymentFlagsInterface\n    const isTfPartialPayment =\n      typeof flags === 'number'\n        ? isFlagEnabled(flags, PaymentFlags.tfPartialPayment)\n        : flags.tfPartialPayment ?? false\n\n    if (!isTfPartialPayment) {\n      throw new ValidationError(\n        'PaymentTransaction: tfPartialPayment flag required with DeliverMin',\n      )\n    }\n\n    if (!isAmount(tx.DeliverMin)) {\n      throw new ValidationError('PaymentTransaction: invalid DeliverMin')\n    }\n  }\n}\n\nfunction isPathStep(pathStep: Record<string, unknown>): boolean {\n  if (pathStep.account !== undefined && typeof pathStep.account !== 'string') {\n    return false\n  }\n  if (\n    pathStep.currency !== undefined &&\n    typeof pathStep.currency !== 'string'\n  ) {\n    return false\n  }\n  if (pathStep.issuer !== undefined && typeof pathStep.issuer !== 'string') {\n    return false\n  }\n  if (\n    pathStep.account !== undefined &&\n    pathStep.currency === undefined &&\n    pathStep.issuer === undefined\n  ) {\n    return true\n  }\n  if (pathStep.currency !== undefined || pathStep.issuer !== undefined) {\n    return true\n  }\n  return false\n}\n\nfunction isPath(path: Array<Record<string, unknown>>): boolean {\n  for (const pathStep of path) {\n    if (!isPathStep(pathStep)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction isPaths(paths: Array<Array<Record<string, unknown>>>): boolean {\n  if (!Array.isArray(paths) || paths.length === 0) {\n    return false\n  }\n\n  for (const path of paths) {\n    if (!Array.isArray(path) || path.length === 0) {\n      return false\n    }\n\n    if (!isPath(path)) {\n      return false\n    }\n  }\n\n  return true\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  validateBaseTransaction,\n  validateCredentialsList,\n  MAX_AUTHORIZED_CREDENTIALS,\n} from './common'\n\n/**\n * Enum representing values for PaymentChannelClaim transaction flags.\n *\n * @category Transaction Flags\n */\nexport enum PaymentChannelClaimFlags {\n  /**\n   * Clear the channel's Expiration time. (Expiration is different from the\n   * channel's immutable CancelAfter time.) Only the source address of the\n   * payment channel can use this flag.\n   */\n  tfRenew = 0x00010000,\n  /**\n   * Request to close the channel. Only the channel source and destination\n   * addresses can use this flag. This flag closes the channel immediately if it\n   * has no more XRP allocated to it after processing the current claim, or if\n   * the destination address uses it. If the source address uses this flag when\n   * the channel still holds XRP, this schedules the channel to close after\n   * SettleDelay seconds have passed. (Specifically, this sets the Expiration of\n   * the channel to the close time of the previous ledger plus the channel's\n   * SettleDelay time, unless the channel already has an earlier Expiration\n   * time.) If the destination address uses this flag when the channel still\n   * holds XRP, any XRP that remains after processing the claim is returned to\n   * the source address.\n   */\n  tfClose = 0x00020000,\n}\n\n/**\n * Map of flags to boolean values representing {@link PaymentChannelClaim}\n * transaction flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n * const paymentChannelClaim: PaymentChannelClaim = {\n *  Account: 'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj,\n *  TransactionType: 'PaymentChannelClaim',\n *  Channel: hashes.hashPaymentChannel(\n *    'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj',\n *    'rQGYqiyH5Ue9J96p4E6Qt6AvqxK4sDhnS5',\n *    21970712,\n *  ),\n *  Amount: '100',\n *  Flags: {\n *    tfClose: true\n *  }\n *}\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(paymentChannelClaim)\n * console.log(autofilledTx)\n * // {\n * //  Account: 'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj',\n * //  TransactionType: 'PaymentChannelClaim',\n * //  Channel: 'FC14BF9245D731DC1749EE0F070765E4EB4E993F8ECEE3D00F7E6E26D6EF98CF',\n * //  Amount: '100',\n * //  Flags: 131072,\n * //  Sequence: 21970713,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21970658\n * // }\n * ```\n */\nexport interface PaymentChannelClaimFlagsInterface extends GlobalFlags {\n  /**\n   * Clear the channel's Expiration time. (Expiration is different from the\n   * channel's immutable CancelAfter time.) Only the source address of the\n   * payment channel can use this flag.\n   */\n  tfRenew?: boolean\n  /**\n   * Request to close the channel. Only the channel source and destination\n   * addresses can use this flag. This flag closes the channel immediately if it\n   * has no more XRP allocated to it after processing the current claim, or if\n   * the destination address uses it. If the source address uses this flag when\n   * the channel still holds XRP, this schedules the channel to close after\n   * SettleDelay seconds have passed. (Specifically, this sets the Expiration of\n   * the channel to the close time of the previous ledger plus the channel's\n   * SettleDelay time, unless the channel already has an earlier Expiration\n   * time.) If the destination address uses this flag when the channel still\n   * holds XRP, any XRP that remains after processing the claim is returned to\n   * the source address.\n   */\n  tfClose?: boolean\n}\n\n/**\n * Claim XRP from a payment channel, adjust the payment channel's expiration,\n * or both.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelClaim extends BaseTransaction {\n  TransactionType: 'PaymentChannelClaim'\n  Flags?: number | PaymentChannelClaimFlagsInterface\n  /** The unique ID of the channel as a 64-character hexadecimal string. */\n  Channel: string\n  /**\n   * Total amount of XRP, in drops, delivered by this channel after processing\n   * this claim. Required to deliver XRP. Must be more than the total amount\n   * delivered by the channel so far, but not greater than the Amount of the\n   * signed claim. Must be provided except when closing the channel.\n   */\n  Balance?: string\n  /**\n   * The amount of XRP, in drops, authorized by the Signature. This must match\n   * the amount in the signed message. This is the cumulative amount of XRP that\n   * can be dispensed by the channel, including XRP previously redeemed.\n   */\n  Amount?: string\n  /**\n   * The signature of this claim, as hexadecimal. The signed message contains\n   * the channel ID and the amount of the claim. Required unless the sender of\n   * the transaction is the source address of the channel.\n   */\n  Signature?: string\n  /**\n   * The public key used for the signature, as hexadecimal. This must match the\n   * PublicKey stored in the ledger for the channel. Required unless the sender\n   * of the transaction is the source address of the channel and the Signature\n   * field is omitted.\n   */\n  PublicKey?: string\n  /**\n   * Credentials associated with the sender of this transaction.\n   * The credentials included must not be expired.\n   */\n  CredentialIDs?: string[]\n}\n\n/**\n * Verify the form and type of an PaymentChannelClaim at runtime.\n *\n * @param tx - An PaymentChannelClaim Transaction.\n * @throws When the PaymentChannelClaim is Malformed.\n */\nexport function validatePaymentChannelClaim(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateCredentialsList(\n    tx.CredentialIDs,\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- known from base check\n    tx.TransactionType as string,\n    true,\n    MAX_AUTHORIZED_CREDENTIALS,\n  )\n\n  if (tx.Channel === undefined) {\n    throw new ValidationError('PaymentChannelClaim: missing Channel')\n  }\n\n  if (typeof tx.Channel !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Channel must be a string')\n  }\n\n  if (tx.Balance !== undefined && typeof tx.Balance !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Balance must be a string')\n  }\n\n  if (tx.Amount !== undefined && typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Amount must be a string')\n  }\n\n  if (tx.Signature !== undefined && typeof tx.Signature !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Signature must be a string')\n  }\n\n  if (tx.PublicKey !== undefined && typeof tx.PublicKey !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: PublicKey must be a string')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  validateBaseTransaction,\n} from './common'\n\n/**\n * Enum representing values of {@link TrustSet} transaction flags.\n *\n * @category Transaction Flags\n */\nexport enum TrustSetFlags {\n  /**\n   * Authorize the other party to hold currency issued by this account. (No\n   * effect unless using the asfRequireAuth AccountSet flag.) Cannot be unset.\n   */\n  tfSetfAuth = 0x00010000,\n  /**\n   * Enable the No Ripple flag, which blocks rippling between two trust lines.\n   * of the same currency if this flag is enabled on both.\n   */\n  tfSetNoRipple = 0x00020000,\n  /** Disable the No Ripple flag, allowing rippling on this trust line. */\n  tfClearNoRipple = 0x00040000,\n  /** Freeze the trust line. */\n  tfSetFreeze = 0x00100000,\n  /** Unfreeze the trust line. */\n  tfClearFreeze = 0x00200000,\n  /** Deep-Freeze the trustline -- disallow sending and receiving the said IssuedCurrency */\n  /** Allowed only if the trustline is already regularly frozen, or if tfSetFreeze is set in the same transaction. */\n  tfSetDeepFreeze = 0x00400000,\n  /** Clear a Deep-Frozen trustline */\n  tfClearDeepFreeze = 0x00800000,\n}\n\n/**\n * Map of flags to boolean values representing {@link TrustSet} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n *\n * const trustSetTx: TrustSet = {\n *  TransactionType: 'TrustSet',\n *  Account: wallet2.getClassicAddress(),\n *  LimitAmount: {\n *    currency: 'FOO',\n *    issuer: wallet1.getClassicAddress(),\n *    value: '10000000000',\n *  },\n *  Flags: {\n *    tfSetNoRipple: true\n *  }\n * }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(trustSetTx)\n * console.log(autofilledTx)\n * // {\n * //  TransactionType: 'TrustSet',\n * //  Account: 'r9dAdQQCBcGajVSeC9CqW3LCugjPDnAkEb',\n * //  LimitAmount: {\n * //   currency: 'FOO',\n * //   issuer: 'rWZzUjo5xGiAoRBqzsndyzonXz47UV8u1',\n * //   value: '10000000000'\n * //  },\n * //  Flags: 131072,\n * //  Sequence: 21971483,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21971503\n * // }\n * ```\n */\nexport interface TrustSetFlagsInterface extends GlobalFlags {\n  /**\n   * Authorize the other party to hold currency issued by this account. (No\n   * effect unless using the asfRequireAuth AccountSet flag.) Cannot be unset.\n   */\n  tfSetfAuth?: boolean\n  /**\n   * Enable the No Ripple flag, which blocks rippling between two trust lines\n   * of the same currency if this flag is enabled on both.\n   */\n  tfSetNoRipple?: boolean\n  /** Disable the No Ripple flag, allowing rippling on this trust line. */\n  tfClearNoRipple?: boolean\n  /** Freeze the trust line. */\n  tfSetFreeze?: boolean\n  /** Unfreeze the trust line. */\n  tfClearFreeze?: boolean\n  /** Deep-Freeze the trustline -- disallow sending and receiving the said IssuedCurrency */\n  /** Allowed only if the trustline is already regularly frozen, or if tfSetFreeze is set in the same transaction. */\n  tfSetDeepFreeze?: boolean\n  /** Clear a Deep-Frozen trust line */\n  tfClearDeepFreeze?: boolean\n}\n\n/**\n * Create or modify a trust line linking two accounts.\n *\n * @category Transaction Models\n */\nexport interface TrustSet extends BaseTransaction {\n  TransactionType: 'TrustSet'\n  /**\n   * Object defining the trust line to create or modify, in the format of a\n   * Currency Amount.\n   */\n  LimitAmount: IssuedCurrencyAmount\n  /**\n   * Value incoming balances on this trust line at the ratio of this number per\n   * 1,000,000,000 units. A value of 0 is shorthand for treating balances at\n   * face value.\n   */\n  QualityIn?: number\n  /**\n   * Value outgoing balances on this trust line at the ratio of this number per\n   * 1,000,000,000 units. A value of 0 is shorthand for treating balances at\n   * face value.\n   */\n  QualityOut?: number\n  Flags?: number | TrustSetFlagsInterface\n}\n\n/**\n * Verify the form and type of a TrustSet at runtime.\n *\n * @param tx - A TrustSet Transaction.\n * @throws When the TrustSet is malformed.\n */\nexport function validateTrustSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  const { LimitAmount, QualityIn, QualityOut } = tx\n\n  if (LimitAmount === undefined) {\n    throw new ValidationError('TrustSet: missing field LimitAmount')\n  }\n\n  if (!isAmount(LimitAmount)) {\n    throw new ValidationError('TrustSet: invalid LimitAmount')\n  }\n\n  if (QualityIn !== undefined && typeof QualityIn !== 'number') {\n    throw new ValidationError('TrustSet: QualityIn must be a number')\n  }\n\n  if (QualityOut !== undefined && typeof QualityOut !== 'number') {\n    throw new ValidationError('TrustSet: QualityOut must be a number')\n  }\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Enum representing values of {@link XChainModifyBridge} transaction flags.\n *\n * @category Transaction Flags\n */\nexport enum XChainModifyBridgeFlags {\n  /** Clears the MinAccountCreateAmount of the bridge. */\n  tfClearAccountCreateAmount = 0x00010000,\n}\n\n/**\n * Map of flags to boolean values representing {@link XChainModifyBridge} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface XChainModifyBridgeFlagsInterface extends GlobalFlags {\n  /** Clears the MinAccountCreateAmount of the bridge. */\n  tfClearAccountCreateAmount?: boolean\n}\n\n/**\n * The XChainModifyBridge transaction allows bridge managers to modify the parameters\n * of the bridge.\n *\n * @category Transaction Models\n */\nexport interface XChainModifyBridge extends BaseTransaction {\n  TransactionType: 'XChainModifyBridge'\n\n  /**\n   * The bridge to modify.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The signature reward split between the witnesses for submitting attestations.\n   */\n  SignatureReward?: Amount\n\n  /**\n   * The minimum amount, in XRP, required for a {@link XChainAccountCreateCommit}\n   * transaction. If this is not present, the {@link XChainAccountCreateCommit}\n   * transaction will fail. This field can only be present on XRP-XRP bridges.\n   */\n  MinAccountCreateAmount?: Amount\n\n  Flags?: number | XChainModifyBridgeFlagsInterface\n}\n\n/**\n * Verify the form and type of an XChainModifyBridge at runtime.\n *\n * @param tx - An XChainModifyBridge Transaction.\n * @throws When the XChainModifyBridge is malformed.\n */\nexport function validateXChainModifyBridge(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateOptionalField(tx, 'SignatureReward', isAmount)\n\n  validateOptionalField(tx, 'MinAccountCreateAmount', isAmount)\n}\n", "/* eslint-disable no-bitwise -- flags require bitwise operations */\nimport { ValidationError } from '../../errors'\nimport {\n  AccountRootFlagsInterface,\n  AccountRootFlags,\n} from '../ledger/AccountRoot'\nimport { AccountSetTfFlags } from '../transactions/accountSet'\nimport { AMMClawbackFlags } from '../transactions/AMMClawback'\nimport { AMMDepositFlags } from '../transactions/AMMDeposit'\nimport { AMMWithdrawFlags } from '../transactions/AMMWithdraw'\nimport { MPTokenAuthorizeFlags } from '../transactions/MPTokenAuthorize'\nimport { MPTokenIssuanceCreateFlags } from '../transactions/MPTokenIssuanceCreate'\nimport { MPTokenIssuanceSetFlags } from '../transactions/MPTokenIssuanceSet'\nimport { NFTokenCreateOfferFlags } from '../transactions/NFTokenCreateOffer'\nimport { NFTokenMintFlags } from '../transactions/NFTokenMint'\nimport { OfferCreateFlags } from '../transactions/offerCreate'\nimport { PaymentFlags } from '../transactions/payment'\nimport { PaymentChannelClaimFlags } from '../transactions/paymentChannelClaim'\nimport type { Transaction } from '../transactions/transaction'\nimport { TrustSetFlags } from '../transactions/trustSet'\nimport { XChainModifyBridgeFlags } from '../transactions/XChainModifyBridge'\n\nimport { isFlagEnabled } from '.'\n\n/**\n * Convert an AccountRoot Flags number into an interface for easy interpretation.\n *\n * @param flags - A number which is the bitwise and of all enabled AccountRootFlagsInterface.\n * @returns An interface with all flags as booleans.\n */\nexport function parseAccountRootFlags(\n  flags: number,\n): AccountRootFlagsInterface {\n  const flagsInterface: AccountRootFlagsInterface = {}\n\n  // If we use keys all will be strings and enums are reversed during transpilation\n  Object.values(AccountRootFlags).forEach((flag) => {\n    if (\n      typeof flag === 'string' &&\n      isFlagEnabled(flags, AccountRootFlags[flag])\n    ) {\n      flagsInterface[flag] = true\n    }\n  })\n\n  return flagsInterface\n}\n\nconst txToFlag = {\n  AccountSet: AccountSetTfFlags,\n  AMMClawback: AMMClawbackFlags,\n  AMMDeposit: AMMDepositFlags,\n  AMMWithdraw: AMMWithdrawFlags,\n  MPTokenAuthorize: MPTokenAuthorizeFlags,\n  MPTokenIssuanceCreate: MPTokenIssuanceCreateFlags,\n  MPTokenIssuanceSet: MPTokenIssuanceSetFlags,\n  NFTokenCreateOffer: NFTokenCreateOfferFlags,\n  NFTokenMint: NFTokenMintFlags,\n  OfferCreate: OfferCreateFlags,\n  PaymentChannelClaim: PaymentChannelClaimFlags,\n  Payment: PaymentFlags,\n  TrustSet: TrustSetFlags,\n  XChainModifyBridge: XChainModifyBridgeFlags,\n}\n\nfunction isTxToFlagKey(\n  transactionType: string,\n): transactionType is keyof typeof txToFlag {\n  return transactionType in txToFlag\n}\n\n/**\n * Sets a transaction's flags to its numeric representation.\n *\n * @deprecated\n * This utility function is deprecated.\n * Use convertTxFlagsToNumber() instead and use the returned value to modify the Transaction.Flags from the caller.\n *\n * @param tx - A transaction to set its flags to its numeric representation.\n */\nexport function setTransactionFlagsToNumber(tx: Transaction): void {\n  // eslint-disable-next-line no-console -- intended deprecation warning\n  console.warn(\n    'This function is deprecated. Use convertTxFlagsToNumber() instead and use the returned value to modify the Transaction.Flags from the caller.',\n  )\n\n  if (tx.Flags) {\n    // eslint-disable-next-line no-param-reassign -- intended param reassign in setter, retain old functionality for compatibility\n    tx.Flags = convertTxFlagsToNumber(tx)\n  }\n}\n\n/**\n * Returns a Transaction's Flags as its numeric representation.\n *\n * @param tx - A Transaction to parse Flags for\n * @returns A numerical representation of a Transaction's Flags\n */\nexport function convertTxFlagsToNumber(tx: Transaction): number {\n  if (!tx.Flags) {\n    return 0\n  }\n  if (typeof tx.Flags === 'number') {\n    return tx.Flags\n  }\n\n  if (isTxToFlagKey(tx.TransactionType)) {\n    const flagEnum = txToFlag[tx.TransactionType]\n    return Object.keys(tx.Flags).reduce((resultFlags, flag) => {\n      if (flagEnum[flag] == null) {\n        throw new ValidationError(\n          `Invalid flag ${flag}. Valid flags are ${JSON.stringify(flagEnum)}`,\n        )\n      }\n\n      return tx.Flags?.[flag] ? resultFlags | flagEnum[flag] : resultFlags\n    }, 0)\n  }\n\n  return 0\n}\n\n/**\n * Convert a Transaction flags property into a map for easy interpretation.\n *\n * @param tx - A transaction to parse flags for.\n * @returns A map with all flags as booleans.\n */\nexport function parseTransactionFlags(tx: Transaction): object {\n  const flags = convertTxFlagsToNumber(tx)\n  if (flags === 0) {\n    return {}\n  }\n\n  const booleanFlagMap = {}\n\n  if (isTxToFlagKey(tx.TransactionType)) {\n    const transactionTypeFlags = txToFlag[tx.TransactionType]\n    Object.values(transactionTypeFlags).forEach((flag) => {\n      if (\n        typeof flag === 'string' &&\n        isFlagEnabled(flags, transactionTypeFlags[flag])\n      ) {\n        booleanFlagMap[flag] = true\n      }\n    })\n  }\n\n  return booleanFlagMap\n}\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */\nimport { RIPEMD160 as RIPEMD160n, ripemd160 as ripemd160n } from './legacy.ts';\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const RIPEMD160: typeof RIPEMD160n = RIPEMD160n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const ripemd160: typeof ripemd160n = ripemd160n;\n", "import { ripemd160 as nobleImpl } from '@noble/hashes/ripemd160'\n\nimport wrapNoble from '../internal/wrapNoble'\n\n/**\n * Wrap noble-libs's ripemd160 implementation in HashFn\n */\nexport const ripemd160 = wrapNoble(nobleImpl)\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  abytes as abytes_,\n  bytesToHex as bytesToHex_,\n  concatBytes as concatBytes_,\n  hexToBytes as hexToBytes_,\n  isBytes as isBytes_,\n} from '@noble/hashes/utils.js';\nexport {\n  abytes,\n  anumber,\n  bytesToHex,\n  bytesToUtf8,\n  concatBytes,\n  hexToBytes,\n  isBytes,\n  randomBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes_(bytes);\n  return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes_(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes_(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes_(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_1n << BigInt(n)) - _1n;\n\n// DRBG\n\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  const u8n = (len: number) => new Uint8Array(len); // creates Uint8Array\n  const u8of = (byte: number) => Uint8Array.of(byte); // another shortcut\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n(0)) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes_(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes_(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\nexport function isHash(val: CHash): boolean {\n  return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(\n  object: Record<string, any>,\n  fields: Record<string, string>,\n  optFields: Record<string, string> = {}\n): void {\n  if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n  type Item = keyof typeof object;\n  function checkField(fieldName: Item, expectedType: string, isOpt: boolean) {\n    const val = object[fieldName];\n    if (isOpt && val === undefined) return;\n    const current = typeof val;\n    if (current !== expectedType || val === null)\n      throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n  }\n  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n", "/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  anumber,\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n} from '../utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5);\nconst _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  // Caching initialization could boost perf by 7%.\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  isValidNot0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'number',\n    BITS: 'number',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  _validateObject(field, opts);\n  // const max = 16384;\n  // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n  // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n  return field;\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\nexport type NLength = { nByteLength: number; nBitLength: number };\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number): NLength {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\ntype SqrtFn = (n: bigint) => bigint;\ntype FieldOpts = Partial<{ sqrt: SqrtFn; isLE: boolean; BITS: number }>;\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLenOrOpts?: number | FieldOpts,\n  isLE = false,\n  opts: { sqrt?: SqrtFn } = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  let _nbitLength: number | undefined = undefined;\n  let _sqrt: SqrtFn | undefined = undefined;\n  if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n    if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n    const _opts = bitLenOrOpts;\n    if (_opts.BITS) _nbitLength = _opts.BITS;\n    if (_opts.sqrt) _sqrt = _opts.sqrt;\n    if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n  } else {\n    if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n    if (opts.sqrt) _sqrt = opts.sqrt;\n  }\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    // is valid and invertible\n    isValidNot0: (num: bigint) => !f.is0(num) && f.isValid(num),\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      _sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from '../utils.ts';\nimport { Field, FpInvertBatch, type IField, nLength, validateField } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n  toAffine?(invertedZ?: any): AffinePoint<any>;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type ExtendedGroupConstructor<T> = GroupConstructor<T> & {\n  Fp: IField<any>;\n  Fn: IField<bigint>;\n  fromAffine(ap: AffinePoint<any>): T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nexport function negateCt<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ<T>(\n  c: ExtendedGroupConstructor<T>,\n  property: 'pz' | 'ez',\n  points: T[]\n): T[] {\n  const getz = property === 'pz' ? (p: any) => p.pz : (p: any) => p.ez;\n  const toInv = FpInvertBatch(c.Fp, points.map(getz));\n  // @ts-ignore\n  const affined = points.map((p, i) => p.toAffine(toInv[i]));\n  return affined.map(c.fromAffine);\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nfunction assert0(n: bigint): void {\n  if (n !== _0n) throw new Error('invalid wNAF');\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate: negateCt,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform?: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(P, comp);\n        }\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform?: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform?: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  point: T,\n  k1: bigint,\n  k2: bigint\n): { p1: T; p2: T } {\n  let acc = point;\n  let p1 = c.ZERO;\n  let p2 = c.ZERO;\n  while (k1 > _0n || k2 > _0n) {\n    if (k1 & _1n) p1 = p1.add(acc);\n    if (k2 & _1n) p2 = p2.add(acc);\n    acc = acc.double();\n    k1 >>= _1n;\n    k2 >>= _1n;\n  }\n  return { p1, p2 };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\n// TODO: remove\n/** @deprecated */\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n\nexport type ValidCurveParams<T> = {\n  a: T;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: T;\n  Gy: T;\n} & ({ b: T } | { d: T });\n\nfunction createField<T>(order: bigint, field?: IField<T>): IField<T> {\n  if (field) {\n    if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n    validateField(field);\n    return field;\n  } else {\n    return Field(order) as unknown as IField<T>;\n  }\n}\nexport type FpFn<T> = { Fp: IField<T>; Fn: IField<bigint> };\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields<T>(\n  type: 'weierstrass' | 'edwards',\n  CURVE: ValidCurveParams<T>,\n  curveOpts: Partial<FpFn<T>> = {}\n): FpFn<T> {\n  if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n  for (const p of ['p', 'n', 'h'] as const) {\n    const val = CURVE[p];\n    if (!(typeof val === 'bigint' && val > _0n))\n      throw new Error(`CURVE.${p} must be positive bigint`);\n  }\n  const Fp = createField(CURVE.p, curveOpts.Fp);\n  const Fn = createField(CURVE.n, curveOpts.Fn);\n  const _b: 'b' | 'd' = type === 'weierstrass' ? 'b' : 'd';\n  const params = ['Gx', 'Gy', 'a', _b] as const;\n  for (const p of params) {\n    // @ts-ignore\n    if (!Fp.isValid(CURVE[p]))\n      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n  }\n  return { Fp, Fn };\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac.js';\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bitMask,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes,\n  createHmacDrbg,\n  ensureBytes,\n  hexToBytes,\n  inRange,\n  isBytes,\n  memoized,\n  numberToHexUnpadded,\n  randomBytes,\n  type CHash,\n  type Hex,\n  type PrivKey,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  mulEndoUnsafe,\n  negateCt,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength,\n  mapHashToField,\n  validateField,\n  type IField,\n  type NLength,\n} from './modular.ts';\n\nexport type { AffinePoint };\nexport type HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\nexport type Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = {\n  lowS?: boolean;\n  prehash?: boolean;\n  format?: 'compact' | 'der' | 'js' | undefined;\n};\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/** Instance methods for 3D XYZ points. */\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  /** projective x coordinate. Note: different from .x */\n  readonly px: T;\n  /** projective y coordinate. Note: different from .y */\n  readonly py: T;\n  /** projective z coordinate */\n  readonly pz: T;\n  /** affine x coordinate */\n  get x(): T;\n  /** affine y coordinate */\n  get y(): T;\n  assertValidity(): void;\n  clearCofactor(): ProjPointType<T>;\n  is0(): boolean;\n  isTorsionFree(): boolean;\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  /**\n   * Massively speeds up `p.multiply(n)` by using wnaf precompute tables (caching).\n   * Table generation takes 30MB of ram and 10ms on high-end CPU, but may take\n   * much longer on slow devices.\n   * Actual generation will happen on first call of `.multiply()`.\n   * By default, BASE point is precomputed.\n   * @param windowSize - table window size\n   * @param isLazy - (default true) allows to defer generation\n   */\n  precompute(windowSize?: number, isLazy?: boolean): ProjPointType<T>;\n\n  /** Converts 3D XYZ projective point to 2D xy affine coordinates */\n  toAffine(invertedZ?: T): AffinePoint<T>;\n  /** Encodes point using IEEE P1363 (DER) encoding. First byte is 2/3/4. Default = isCompressed. */\n  toBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  /** @deprecated use `multiplyUnsafe` */\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  /** @deprecated use `p.y % 2n === 0n` */\n  hasEvenY(): boolean;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n\n/** Static methods for 3D XYZ points. */\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromBytes(encodedPoint: Uint8Array): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\n// LegacyWeierstrassOpts\nexport type CurvePointsTypeWithLength<T> = Readonly<CurvePointsType<T> & Partial<NLength>>;\n\n// LegacyWeierstrass\nexport type CurvePointsRes<T> = {\n  /** @deprecated import individual CURVE params */\n  CURVE: CurvePointsType<T>;\n  Point: ProjConstructor<T>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<T>;\n  /** @deprecated */\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  /** @deprecated */\n  weierstrassEquation: (x: T) => T;\n  /** @deprecated use `Point.Fn.isValidNot0(num)` */\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// Aliases to legacy types\n// export type CurveType = LegacyECDSAOpts;\n// export type CurveFn = LegacyECDSA;\n// export type CurvePointsRes<T> = LegacyWeierstrass<T>;\n// export type CurvePointsType<T> = LegacyWeierstrassOpts<T>;\n// export type CurvePointsTypeWithLength<T> = LegacyWeierstrassOpts<T>;\n// export type BasicWCurve<T> = LegacyWeierstrassOpts<T>;\n\n/**\n * Weierstrass curve options.\n *\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor, usually 1. h*n is group order; n is subgroup order\n * * a: formula param, must be in field of p\n * * b: formula param, must be in field of p\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type WeierstrassOpts<T> = Readonly<{\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  a: T;\n  b: T;\n  Gx: T;\n  Gy: T;\n}>;\n\n// When a cofactor != 1, there can be an effective methods to:\n// 1. Determine whether a point is torsion-free\n// 2. Clear torsion component\n// wrapPrivateKey: bls12-381 requires mod(n) instead of rejecting keys >= n\nexport type WeierstrassExtraOpts<T> = Partial<{\n  Fp: IField<T>;\n  Fn: IField<bigint>;\n  // TODO: remove\n  allowedPrivateKeyLengths: readonly number[]; // for P521\n  allowInfinityPoint: boolean;\n  endo: EndomorphismOpts;\n  wrapPrivateKey: boolean;\n  isTorsionFree: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  clearCofactor: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n  fromBytes: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n}>;\n\n/**\n * Options for ECDSA signatures over a Weierstrass curve.\n */\nexport type ECDSAOpts = {\n  hash: CHash;\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n/** ECDSA is only supported for prime fields, not Fp2 (extension fields). */\nexport interface ECDSA {\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    // TODO: deprecate those two\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    /** @deprecated */\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n}\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// TODO: remove\nexport function _legacyHelperEquat<T>(Fp: IField<T>, a: T, b: T): (x: T) => T {\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n  return weierstrassEquation;\n}\nexport function _legacyHelperNormPriv(\n  Fn: IField<bigint>,\n  allowedPrivateKeyLengths?: readonly number[],\n  wrapPrivateKey?: boolean\n): (key: PrivKey) => bigint {\n  const { BYTES: expected } = Fn;\n  // Validates if priv key is valid and converts it to bigint.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    let num: bigint;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = ensureBytes('private key', key);\n      if (allowedPrivateKeyLengths) {\n        if (!allowedPrivateKeyLengths.includes(bytes.length * 2))\n          throw new Error('invalid private key');\n        const padded = new Uint8Array(expected);\n        padded.set(bytes, padded.length - bytes.length);\n        bytes = padded;\n      }\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(\n          `invalid private key: expected ui8a of size ${expected}, got ${typeof key}`\n        );\n      }\n    }\n    if (wrapPrivateKey) num = Fn.create(num); // disabled by default, enabled for BLS\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  return normPrivateKeyToScalar;\n}\n\nexport function weierstrassN<T>(\n  CURVE: WeierstrassOpts<T>,\n  curveOpts: WeierstrassExtraOpts<T> = {}\n): ProjConstructor<T> {\n  const { Fp, Fn } = _createCurveFields('weierstrass', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(\n    curveOpts,\n    {},\n    {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n\n  const { endo } = curveOpts;\n  if (endo) {\n    // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n    if (\n      !Fp.is0(CURVE.a) ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n\n  function assertCompressionIsSupported() {\n    if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n  }\n\n  // Implements IEEE P1363 point encoding\n  function pointToBytes(\n    _c: ProjConstructor<T>,\n    point: ProjPointType<T>,\n    isCompressed: boolean\n  ): Uint8Array {\n    const { x, y } = point.toAffine();\n    const bx = Fp.toBytes(x);\n    abool('isCompressed', isCompressed);\n    if (isCompressed) {\n      assertCompressionIsSupported();\n      const hasEvenY = !Fp.isOdd!(y);\n      return concatBytes(pprefix(hasEvenY), bx);\n    } else {\n      return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n    }\n  }\n  function pointFromBytes(bytes: Uint8Array) {\n    abytes(bytes);\n    const L = Fp.BYTES;\n    const LC = L + 1; // length compressed, e.g. 33 for 32-byte field\n    const LU = 2 * L + 1; // length uncompressed, e.g. 65 for 32-byte field\n    const length = bytes.length;\n    const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // No actual validation is done here: use .assertValidity()\n    if (length === LC && (head === 0x02 || head === 0x03)) {\n      const x = Fp.fromBytes(tail);\n      if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n      const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n      let y: T;\n      try {\n        y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n      } catch (sqrtError) {\n        const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n        throw new Error('bad point: is not on curve, sqrt error' + err);\n      }\n      assertCompressionIsSupported();\n      const isYOdd = Fp.isOdd!(y); // (y & _1n) === _1n;\n      const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n      if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n      return { x, y };\n    } else if (length === LU && head === 0x04) {\n      // TODO: more checks\n      const x = Fp.fromBytes(tail.subarray(L * 0, L * 1));\n      const y = Fp.fromBytes(tail.subarray(L * 1, L * 2));\n      if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n      return { x, y };\n    } else {\n      throw new Error(\n        `bad point: got length ${length}, expected compressed=${LC} or uncompressed=${LU}`\n      );\n    }\n  }\n\n  const toBytes = curveOpts.toBytes || pointToBytes;\n  const fromBytes = curveOpts.fromBytes || pointFromBytes;\n  const weierstrassEquation = _legacyHelperEquat(Fp, CURVE.a, CURVE.b);\n\n  // TODO: move top-level\n  /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n  function acoord(title: string, n: T, banZero = false) {\n    if (!Fp.isValid(n) || (banZero && Fp.is0(n))) throw new Error(`bad point coordinate ${title}`);\n    return n;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (curveOpts.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  function finishEndo(\n    endoBeta: EndomorphismOpts['beta'],\n    k1p: Point,\n    k2p: Point,\n    k1neg: boolean,\n    k2neg: boolean\n  ) {\n    k2p = new Point(Fp.mul(k2p.px, endoBeta), k2p.py, k2p.pz);\n    k1p = negateCt(k1neg, k1p);\n    k2p = negateCt(k2neg, k2p);\n    return k1p.add(k2p);\n  }\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n   * Default Point works in 2d / affine coordinates: (x, y).\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly px: T;\n    readonly py: T;\n    readonly pz: T;\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(px: T, py: T, pz: T) {\n      this.px = acoord('x', px);\n      this.py = acoord('y', py, true);\n      this.pz = acoord('z', pz);\n      Object.freeze(this);\n    }\n\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n      if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'pz', points);\n    }\n\n    static fromBytes(bytes: Uint8Array): Point {\n      abytes(bytes);\n      return Point.fromHex(bytes);\n    }\n\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(privateKey: PrivKey) {\n      const normPrivateKeyToScalar = _legacyHelperNormPriv(\n        Fn,\n        curveOpts.allowedPrivateKeyLengths,\n        curveOpts.wrapPrivateKey\n      );\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    /** Multiscalar Multiplication */\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(windowSize: number = 8, isLazy = true): Point {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_3n); // random number\n      return this;\n    }\n\n    /** \"Private method\", don't use it directly */\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n      return !Fp.isOdd(y);\n    }\n\n    /** Compare one point to another. */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo } = curveOpts;\n      if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const mul = (n: bigint) => wnaf.wNAFCached(this, n, Point.normalizeZ);\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        const { p: k1p, f: k1f } = mul(k1);\n        const { p: k2p, f: k2f } = mul(k2);\n        fake = k1f.add(k2f);\n        point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n      } else {\n        const { p, f } = mul(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo } = curveOpts;\n      const p = this;\n      if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n      if (sc === _0n || p.is0()) return Point.ZERO;\n      if (sc === _1n) return p; // fast-path\n      if (wnaf.hasPrecomputes(this)) return this.multiply(sc);\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n        // `wNAFCachedUnsafe` is 30% slower\n        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);\n        return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n      } else {\n        return wnaf.wNAFCachedUnsafe(p, sc);\n      }\n    }\n\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(invertedZ?: T): AffinePoint<T> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree(): boolean {\n      const { isTorsionFree } = curveOpts;\n      if (cofactor === _1n) return true;\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    clearCofactor(): Point {\n      const { clearCofactor } = curveOpts;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    toBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    /** @deprecated use `toBytes` */\n    toRawBytes(isCompressed = true): Uint8Array {\n      return this.toBytes(isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return bytesToHex(this.toBytes(isCompressed));\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const bits = Fn.BITS;\n  const wnaf = wNAF(Point, curveOpts.endo ? Math.ceil(bits / 2) : bits);\n  return Point;\n}\n\n// _legacyWeierstrass\n/** @deprecated use `weierstrassN` */\nexport function weierstrassPoints<T>(c: CurvePointsTypeWithLength<T>): CurvePointsRes<T> {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  return _weierstrass_new_output_to_legacy(c, Point);\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  toDERRawBytes(): Uint8Array;\n  toDERHex(): string;\n  // toBytes(format?: string): Uint8Array;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint, recovery?: number): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\nexport type SignatureLike = { r: bigint; s: bigint };\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac?: HmacFnSync;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY: boolean): Uint8Array {\n  return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n\nexport type CurveFn = {\n  CURVE: CurvePointsType<bigint>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  Point: ProjConstructor<bigint>;\n  /** @deprecated use `Point` */\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function ecdsa(\n  Point: ProjConstructor<bigint>,\n  ecdsaOpts: ECDSAOpts,\n  curveOpts: WeierstrassExtraOpts<bigint> = {}\n): ECDSA {\n  _validateObject(\n    ecdsaOpts,\n    { hash: 'function' },\n    {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function',\n    }\n  );\n\n  const randomBytes_ = ecdsaOpts.randomBytes || randomBytes;\n  const hmac_: HmacFnSync =\n    ecdsaOpts.hmac ||\n    (((key, ...msgs) => hmac(ecdsaOpts.hash, key, concatBytes(...msgs))) satisfies HmacFnSync);\n\n  const { Fp, Fn } = Point;\n  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? Fn.neg(s) : s;\n  }\n  function aValidRS(title: string, num: bigint) {\n    if (!Fn.isValidNot0(num))\n      throw new Error(`invalid signature ${title}: out of range 1..CURVE.n`);\n  }\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aValidRS('r', r); // r in [1..N-1]\n      aValidRS('s', s); // s in [1..N-1]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const L = Fn.BYTES;\n      const b = ensureBytes('compactSignature', hex, L * 2);\n      return new Signature(Fn.fromBytes(b.subarray(0, L)), Fn.fromBytes(b.subarray(L, L * 2)));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity(): void {}\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    // ProjPointType<bigint>\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const FIELD_ORDER = Fp.ORDER;\n      const { r, s, recovery: rec } = this;\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n\n      // ECDSA recovery is hard for cofactor > 1 curves.\n      // In sign, `r = q.x mod n`, and here we recover q.x from r.\n      // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n      // However, for cofactor>1, r+n may not get q.x:\n      // r+n*i would need to be done instead where i is unknown.\n      // To easily get i, we either need to:\n      // a. increase amount of valid recid values (4, 5...); OR\n      // b. prohibit non-prime-order signatures (recid > 1).\n      const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n      if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n\n      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n      if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n      const x = Fp.toBytes(radj);\n      const R = Point.fromHex(concatBytes(pprefix((rec & 1) === 0), x));\n      const ir = Fn.inv(radj); // r^-1\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      const u1 = Fn.create(-h * ir); // -hr^-1\n      const u2 = Fn.create(s * ir); // sr^-1\n      // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n      if (Q.is0()) throw new Error('point at infinify');\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n    }\n\n    toBytes(format: 'compact' | 'der') {\n      if (format === 'compact') return concatBytes(Fn.toBytes(this.r), Fn.toBytes(this.s));\n      if (format === 'der') return hexToBytes(DER.hexFromSig(this));\n      throw new Error('invalid format');\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return this.toBytes('der');\n    }\n    toDERHex() {\n      return bytesToHex(this.toBytes('der'));\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return this.toBytes('compact');\n    }\n    toCompactHex() {\n      return bytesToHex(this.toBytes('compact'));\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    curveOpts.allowedPrivateKeyLengths,\n    curveOpts.wrapPrivateKey\n  );\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const n = CURVE_ORDER;\n      return mapHashToField(randomBytes_(getMinHashLength(n)), n);\n    },\n\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = ensureBytes('key', item);\n    const length = arr.length;\n    const L = Fp.BYTES;\n    const LC = L + 1; // e.g. 33 for 32\n    const LU = 2 * L + 1; // e.g. 65 for 32\n    if (curveOpts.allowedPrivateKeyLengths || Fn.BYTES === LC) {\n      return undefined;\n    } else {\n      return length === LC || length === LU;\n    }\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    ecdsaOpts.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    ecdsaOpts.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(fnBits);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n    aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n    return Fn.toBytes(num);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash } = ecdsaOpts;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes_(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n    // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n    // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      // Important: all mod() calls here must be done over N\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n      const ik = Fn.inv(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = Fn.create(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: ecdsaOpts.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = createHmacDrbg<RecoveredSignature>(ecdsaOpts.hash.outputLen, Fn.BYTES, hmac_);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE.precompute(8);\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n\n    // Verify opts\n    validateSigVerOpts(opts);\n    const { lowS, prehash, format } = opts;\n\n    // TODO: remove\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n\n    if (format !== undefined && !['compact', 'der', 'js'].includes(format))\n      throw new Error('format must be \"compact\", \"der\" or \"js\"');\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n\n    // deduce signature format\n    try {\n      // if (format === 'js') {\n      //   if (sg != null && !isBytes(sg)) _sig = new Signature(sg.r, sg.s);\n      // } else if (format === 'compact') {\n      //   _sig = Signature.fromCompact(sg);\n      // } else if (format === 'der') {\n      //   _sig = Signature.fromDER(sg);\n      // } else {\n      //   throw new Error('invalid format');\n      // }\n      if (isObj) {\n        if (format === undefined || format === 'js') {\n          _sig = new Signature(sg.r, sg.s);\n        } else {\n          throw new Error('invalid format');\n        }\n      }\n      if (isHex) {\n        // TODO: remove this malleable check\n        // Signature can be represented in 2 ways: compact (2*Fn.BYTES) & DER (variable-length).\n        // Since DER can also be 2*Fn.BYTES bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    // todo: optional.hash => hash\n    if (prehash) msgHash = ecdsaOpts.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = Fn.inv(s); // s^-1\n    const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n    const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));\n    if (R.is0()) return false;\n    const v = Fn.create(R.x); // v = r.x mod n\n    return v === r;\n  }\n  // TODO: clarify API for cloning .clone({hash: sha512}) ? .createWith({hash: sha512})?\n  // const clone = (hash: CHash): ECDSA => ecdsa(Point, { ...ecdsaOpts, ...getHash(hash) }, curveOpts);\n  return Object.freeze({\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    utils,\n    Point,\n    Signature,\n  });\n}\n\nexport type WsPointComposed<T> = {\n  CURVE: WeierstrassOpts<T>;\n  curveOpts: WeierstrassExtraOpts<T>;\n};\nexport type WsComposed = {\n  CURVE: WeierstrassOpts<bigint>;\n  curveOpts: WeierstrassExtraOpts<bigint>;\n  ecdsaOpts: ECDSAOpts;\n};\nfunction _weierstrass_legacy_opts_to_new<T>(c: CurvePointsType<T>): WsPointComposed<T> {\n  const CURVE: WeierstrassOpts<T> = {\n    a: c.a,\n    b: c.b,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength);\n  const curveOpts: WeierstrassExtraOpts<T> = {\n    Fp,\n    Fn,\n    allowedPrivateKeyLengths: c.allowedPrivateKeyLengths,\n    allowInfinityPoint: c.allowInfinityPoint,\n    endo: c.endo,\n    wrapPrivateKey: c.wrapPrivateKey,\n    isTorsionFree: c.isTorsionFree,\n    clearCofactor: c.clearCofactor,\n    fromBytes: c.fromBytes,\n    toBytes: c.toBytes,\n  };\n  return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c: CurveType): WsComposed {\n  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n  const ecdsaOpts: ECDSAOpts = {\n    hash: c.hash,\n    hmac: c.hmac,\n    randomBytes: c.randomBytes,\n    lowS: c.lowS,\n    bits2int: c.bits2int,\n    bits2int_modN: c.bits2int_modN,\n  };\n  return { CURVE, curveOpts, ecdsaOpts };\n}\nfunction _weierstrass_new_output_to_legacy<T>(\n  c: CurvePointsType<T>,\n  Point: ProjConstructor<T>\n): CurvePointsRes<T> {\n  const { Fp, Fn } = Point;\n  // TODO: remove\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, Fn.ORDER);\n  }\n  const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n  const normPrivateKeyToScalar = _legacyHelperNormPriv(\n    Fn,\n    c.allowedPrivateKeyLengths,\n    c.wrapPrivateKey\n  );\n  return Object.assign(\n    {},\n    {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar,\n      weierstrassEquation,\n      isWithinCurveOrder,\n    }\n  );\n}\nfunction _ecdsa_new_output_to_legacy(c: CurveType, ecdsa: ECDSA): CurveFn {\n  return Object.assign({}, ecdsa, {\n    ProjectivePoint: ecdsa.Point,\n    CURVE: c,\n  });\n}\n\n// _ecdsa_legacy\nexport function weierstrass(c: CurveType): CurveFn {\n  const { CURVE, curveOpts, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n  const Point = weierstrassN(CURVE, curveOpts);\n  const signs = ecdsa(Point, ecdsaOpts, curveOpts);\n  return _ecdsa_new_output_to_legacy(c, signs);\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  const { A, B, Z } = opts;\n  if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n  if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\nimport type { CHash } from './utils.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): { hash: CHash } {\n  return { hash };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, hash: hash });\n  return { ...create(defHash), create };\n}\n", "/**\n * hash-to-curve from RFC 9380.\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * https://www.rfc-editor.org/rfc/rfc9380\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { CHash } from '../utils.ts';\nimport {\n  _validateObject,\n  abytes,\n  bytesToNumberBE,\n  concatBytes,\n  isBytes,\n  isHash,\n  utf8ToBytes,\n} from '../utils.ts';\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\nimport { FpInvertBatch, type IField, mod } from './modular.ts';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type H2COpts = {\n  DST: UnicodeOrBytes;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n  p: bigint;\n  m: number;\n  k: number;\n};\nexport type H2CHashOpts = {\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n// todo: remove\nexport type Opts = H2COpts;\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: H2COpts): bigint[][] {\n  _validateObject(options, {\n    p: 'bigint',\n    m: 'number',\n    k: 'number',\n    hash: 'function',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  if (!isBytes(_DST) && typeof _DST !== 'string')\n    throw new Error('DST must be string or uint8array');\n  if (!isHash(options.hash)) throw new Error('expected valid hash');\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\n  // Make same order as in spec\n  const coeff = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xn, xd, yn, yd] = coeff.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    // 6.6.3\n    // Exceptional cases of iso_map are inputs that cause the denominator of\n    // either rational function to evaluate to zero; such cases MUST return\n    // the identity point on E.\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n    x = field.mul(xn, xd_inv); // xNum / xDen\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type H2CMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\n// TODO: remove\nexport type HTFMethod<T> = H2CMethod<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\n/**\n * RFC 9380 methods, with cofactor clearing. See https://www.rfc-editor.org/rfc/rfc9380#section-3.\n *\n * * hashToCurve: `map(hash(input))`, encodes RANDOM bytes to curve (WITH hashing)\n * * encodeToCurve: `map(hash(input))`, encodes NON-UNIFORM bytes to curve (WITH hashing)\n * * mapToCurve: `map(scalars)`, encodes NON-UNIFORM scalars to curve (NO hashing)\n */\nexport type H2CHasher<T> = {\n  hashToCurve: H2CMethod<T>;\n  encodeToCurve: H2CMethod<T>;\n  mapToCurve: MapMethod<T>;\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes };\n};\n// TODO: remove\nexport type Hasher<T> = H2CHasher<T>;\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  defaults: H2COpts & { encodeDST?: UnicodeOrBytes }\n): H2CHasher<T> {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  function map(num: bigint[]) {\n    return Point.fromAffine(mapToCurve(num));\n  }\n  function clear(initial: H2CPoint<T>) {\n    const P = initial.clearCofactor();\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n    P.assertValidity();\n    return P;\n  }\n\n  return {\n    defaults,\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const dst = defaults.DST ? defaults.DST : {};\n      const opts = Object.assign({}, defaults, dst, options);\n      const u = hash_to_field(msg, 2, opts);\n      const u0 = map(u[0]);\n      const u1 = map(u[1]);\n      return clear(u0.add(u1));\n    },\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const dst = defaults.encodeDST ? defaults.encodeDST : {};\n      const opts = Object.assign({}, defaults, dst, options);\n      const u = hash_to_field(msg, 1, opts);\n      return clear(map(u[0]));\n    },\n    /** See {@link H2CHasher} */\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n      return clear(map(scalars));\n    },\n  };\n}\n", "/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mod, pow2 } from './abstract/modular.ts';\nimport {\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type ProjPointType as PointType,\n  type WeierstrassOpts,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1_CURVE.n;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    } satisfies EndomorphismOpts,\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1_CURVE.p);\nconst modN = (x: bigint) => mod(x, secp256k1_CURVE.n);\nconst Point = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1_CURVE.p); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (!hasEven(y)) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = Point.fromAffine({ x, y }); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = Point.BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(modN(-e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n", "/**\n * @module\n */\nexport * from '../utils.ts';\n\n// TODO\n// @deprecated use `@noble/curves/utils.js`\n", "import { sha512 } from '@xrplf/isomorphic/sha512'\nimport { bytesToNumberBE } from '@noble/curves/abstract/utils'\n\ntype Input = Uint8Array | number[] | string\n\nexport default class Sha512 {\n  // instantiate empty sha512 hash\n  hash = sha512.create()\n\n  static half(input: Input): Uint8Array {\n    return new Sha512().add(input).first256()\n  }\n\n  add(bytes: Input): this {\n    this.hash.update(bytes)\n    return this\n  }\n\n  addU32(i: number): this {\n    const buffer = new Uint8Array(4)\n    new DataView(buffer.buffer).setUint32(0, i)\n    return this.add(buffer)\n  }\n\n  finish(): Uint8Array {\n    return this.hash.digest()\n  }\n\n  first256(): Uint8Array {\n    return this.finish().slice(0, 32)\n  }\n\n  first256BigInt(): bigint {\n    return bytesToNumberBE(this.first256())\n  }\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport Sha512 from '../../utils/Sha512'\n\nconst ZERO = BigInt(0)\n\nfunction deriveScalar(bytes: Uint8Array, discrim?: number): bigint {\n  const order = secp256k1.CURVE.n\n  for (let i = 0; i <= 0xffff_ffff; i++) {\n    // We hash the bytes to find a 256-bit number, looping until we are sure it\n    // is less than the order of the curve.\n    const hasher = new Sha512().add(bytes)\n    // If the optional discriminator index was passed in, update the hash.\n    if (discrim !== undefined) {\n      hasher.addU32(discrim)\n    }\n    hasher.addU32(i)\n    const key = hasher.first256BigInt()\n    /* istanbul ignore else */\n    if (key > ZERO && key < order) {\n      return key\n    }\n  }\n  // This error is practically impossible to reach.\n  // The order of the curve describes the (finite) amount of points on the curve\n  // https://github.com/indutny/elliptic/blob/master/lib/elliptic/curves.js#L182\n  // How often will an (essentially) random number generated by Sha512 be larger than that?\n  // There's 2^32 chances (the for loop) to get a number smaller than the order,\n  // and it's rare that you'll even get past the first loop iteration.\n  // Note that in TypeScript we actually need the throw, otherwise the function signature would be bigint | undefined\n  //\n  /* istanbul ignore next */\n  throw new Error('impossible unicorn ;)')\n}\n\n/**\n * @param seed - Bytes.\n * @param [opts] - Object.\n * @param [opts.accountIndex=0] - The account number to generate.\n * @param [opts.validator=false] - Generate root key-pair,\n *                                              as used by validators.\n * @returns {bigint} 256 bit scalar value.\n *\n */\nexport function derivePrivateKey(\n  seed: Uint8Array,\n  opts: {\n    validator?: boolean\n    accountIndex?: number\n  } = {},\n): bigint {\n  const root = opts.validator\n  const order = secp256k1.CURVE.n\n\n  // This private generator represents the `root` private key, and is what's\n  // used by validators for signing when a keypair is generated from a seed.\n  const privateGen = deriveScalar(seed)\n  if (root) {\n    // As returned by validation_create for a given seed\n    return privateGen\n  }\n  const publicGen =\n    secp256k1.ProjectivePoint.BASE.multiply(privateGen).toRawBytes(true)\n  // A seed can generate many keypairs as a function of the seed and a uint32.\n  // Almost everyone just uses the first account, `0`.\n  const accountIndex = opts.accountIndex || 0\n  return (deriveScalar(publicGen, accountIndex) + privateGen) % order\n}\n\nexport function accountPublicFromPublicGenerator(publicGenBytes: Uint8Array) {\n  const rootPubPoint = secp256k1.ProjectivePoint.fromHex(publicGenBytes)\n  const scalar = deriveScalar(publicGenBytes, 0)\n  const point = secp256k1.ProjectivePoint.BASE.multiply(scalar)\n  const offset = rootPubPoint.add(point)\n  return offset.toRawBytes(true)\n}\n", "const assertHelper: {\n  ok: (cond: boolean, message?: string) => asserts cond is true\n} = {\n  ok(cond, message): asserts cond is true {\n    if (!cond) {\n      throw new Error(message)\n    }\n  },\n}\n\nexport default assertHelper\n", "import type { Algorithm, HexString, KeyType } from '../types'\n\nenum Prefix {\n  NONE = -1,\n  ED25519 = 0xed,\n  SECP256K1_PUB_X = 0x02,\n  SECP256K1_PUB_X_ODD_Y = 0x03,\n  SECP256K1_PUB_XY = 0x04,\n  SECP256K1_PRIVATE = 0x00,\n}\n\ntype CompositeKey = `${KeyType}_${Prefix}_${number}`\n\n/**\n * | Curve     | Type        | Prefix | Length | Description                                           | Algorithm       |\n * |-----------|-------------|:------:|:------:|-------------------------------------------------------|----------------:|\n * | ed25519   | Private     |  0xED  |   33   | prefix + Uint256LE (0 < n < order )                   |         ed25519 |\n * | ed25519   | Public      |  0xED  |   33   | prefix + 32 y-bytes                                   |         ed25519 |\n * | secp256k1 | Public (1)  |  0x02  |   33   | prefix + 32 x-bytes                                   | ecdsa-secp256k1 |\n * | secp256k1 | Public (2)  |  0x03  |   33   | prefix + 32 x-bytes (y is odd)                        | ecdsa-secp256k1 |\n * | secp256k1 | Public (3)  |  0x04  |   65   | prefix + 32 x-bytes + 32 y-bytes                      | ecdsa-secp256k1 |\n * | secp256k1 | Private (1) |  None  |   32   | Uint256BE (0 < n < order)                             | ecdsa-secp256k1 |\n * | secp256k1 | Private (2) |  0x00  |   33   | prefix + Uint256BE (0 < n < order)                    | ecdsa-secp256k1 |\n *\n * Note: The 0x00 prefix for secpk256k1 Private (2) essentially 0 pads the number\n *       and the interpreted number is the same as 32 bytes.\n */\nconst KEY_TYPES: Record<CompositeKey, Algorithm> = {\n  [`private_${Prefix.NONE}_32`]: 'ecdsa-secp256k1',\n  [`private_${Prefix.SECP256K1_PRIVATE}_33`]: 'ecdsa-secp256k1',\n  [`private_${Prefix.ED25519}_33`]: 'ed25519',\n  [`public_${Prefix.ED25519}_33`]: 'ed25519',\n  [`public_${Prefix.SECP256K1_PUB_X}_33`]: 'ecdsa-secp256k1',\n  [`public_${Prefix.SECP256K1_PUB_X_ODD_Y}_33`]: 'ecdsa-secp256k1',\n  [`public_${Prefix.SECP256K1_PUB_XY}_65`]: 'ecdsa-secp256k1',\n}\n\nfunction getKeyInfo(key: HexString) {\n  return {\n    prefix: key.length < 2 ? Prefix.NONE : parseInt(key.slice(0, 2), 16),\n    len: key.length / 2,\n  }\n}\n\nfunction prefixRepr(prefix: Prefix): string {\n  return prefix === Prefix.NONE\n    ? 'None'\n    : `0x${prefix.toString(16).padStart(2, '0')}`\n}\n\nfunction getValidFormatsTable(type: KeyType) {\n  // No need overkill with renderTable method\n  const padding = 2\n  const colWidth = {\n    algorithm: 'ecdsa-secp256k1'.length + padding,\n    prefix: '0x00'.length + padding,\n  }\n\n  return Object.entries(KEY_TYPES)\n    .filter(([key]) => key.startsWith(type))\n    .map(([key, algorithm]) => {\n      const [, prefix, length] = key.split('_')\n      const paddedAlgo = algorithm.padEnd(colWidth.algorithm)\n      const paddedPrefix = prefixRepr(Number(prefix)).padEnd(colWidth.prefix)\n      return `${paddedAlgo} - Prefix: ${paddedPrefix} Length: ${length} bytes`\n    })\n    .join('\\n')\n}\n\nfunction keyError({\n  key,\n  type,\n  prefix,\n  len,\n}: {\n  key: string\n  type: KeyType\n  prefix: number\n  len: number\n}) {\n  const validFormats = getValidFormatsTable(type)\n\n  return `invalid_key:\n\nType: ${type}\nKey: ${key}\nPrefix: ${prefixRepr(prefix)} \nLength: ${len} bytes\n\nAcceptable ${type} formats are:\n${validFormats}\n`\n}\n\n/**\n * Determines the algorithm associated with a given key (public/private).\n *\n * @param key - hexadecimal string representation of the key.\n * @param type - whether expected key is public or private\n * @returns Algorithm algorithm for signing/verifying\n * @throws Error when key is invalid\n */\nexport function getAlgorithmFromKey(key: HexString, type: KeyType): Algorithm {\n  const { prefix, len } = getKeyInfo(key)\n  // Special case back compat support for no prefix\n  const usedPrefix = type === 'private' && len === 32 ? Prefix.NONE : prefix\n  const algorithm = KEY_TYPES[`${type}_${usedPrefix}_${len}`]\n\n  if (!algorithm) {\n    throw new Error(keyError({ key, type, len, prefix: usedPrefix }))\n  }\n  return algorithm\n}\n\nexport function getAlgorithmFromPublicKey(key: HexString): Algorithm {\n  return getAlgorithmFromKey(key, 'public')\n}\n\nexport function getAlgorithmFromPrivateKey(key: HexString): Algorithm {\n  return getAlgorithmFromKey(key, 'private')\n}\n", "import { numberToBytesBE } from '@noble/curves/abstract/utils'\nimport { secp256k1 as nobleSecp256k1 } from '@noble/curves/secp256k1'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\nimport type {\n  DeriveKeyPairOptions,\n  HexString,\n  SigningScheme,\n} from '../../types'\n\nimport { derivePrivateKey } from './utils'\nimport assert from '../../utils/assert'\nimport Sha512 from '../../utils/Sha512'\n\nconst SECP256K1_PREFIX = '00'\n\nconst secp256k1: SigningScheme = {\n  deriveKeypair(\n    entropy: Uint8Array,\n    options?: DeriveKeyPairOptions,\n  ): {\n    privateKey: string\n    publicKey: string\n  } {\n    const derived = derivePrivateKey(entropy, options)\n    const privateKey =\n      SECP256K1_PREFIX + bytesToHex(numberToBytesBE(derived, 32))\n\n    const publicKey = bytesToHex(nobleSecp256k1.getPublicKey(derived, true))\n    return { privateKey, publicKey }\n  },\n\n  sign(message: Uint8Array, privateKey: HexString): string {\n    // Some callers pass the privateKey with the prefix, others without.\n    // @noble/curves will throw if the key is not exactly 32 bytes, so we\n    // normalize it before passing to the sign method.\n    assert.ok(\n      (privateKey.length === 66 && privateKey.startsWith(SECP256K1_PREFIX)) ||\n        privateKey.length === 64,\n    )\n    const normedPrivateKey =\n      privateKey.length === 66 ? privateKey.slice(2) : privateKey\n    return nobleSecp256k1\n      .sign(Sha512.half(message), normedPrivateKey, {\n        // \"Canonical\" signatures\n        lowS: true,\n        // Would fail tests if signatures aren't deterministic\n        extraEntropy: undefined,\n      })\n      .toDERHex(true)\n      .toUpperCase()\n  },\n\n  verify(\n    message: Uint8Array,\n    signature: HexString,\n    publicKey: HexString,\n  ): boolean {\n    const decoded = nobleSecp256k1.Signature.fromDER(signature)\n    return nobleSecp256k1.verify(decoded, Sha512.half(message), publicKey)\n  },\n}\n\nexport default secp256k1\n", "/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  abool,\n  abytes,\n  aInRange,\n  bytesToHex,\n  bytesToNumberLE,\n  concatBytes,\n  ensureBytes,\n  memoized,\n  numberToBytesLE,\n  randomBytes,\n  type FHash,\n  type Hex,\n} from '../utils.ts';\nimport {\n  _createCurveFields,\n  normalizeZ,\n  pippenger,\n  wNAF,\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n} from './curve.ts';\nimport { Field, type IField, type NLength } from './modular.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\nexport type UVRatio = (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n\n/** Edwards curves must declare params a & d. */\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes?: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: UVRatio; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\nexport type CurveTypeWithLength = Readonly<CurveType & Partial<NLength>>;\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\n/** Instance of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  is0(): boolean;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toBytes(): Uint8Array;\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array;\n  toHex(): string;\n  precompute(windowSize?: number, isLazy?: boolean): ExtPointType;\n  /** @deprecated use `p.precompute(windowSize)` */\n  _setWindowSize(windowSize: number): void;\n}\n/** Static methods of Extended Point with coordinates in X, Y, Z, T. */\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromBytes(bytes: Uint8Array, zip215?: boolean): ExtPointType;\n  fromHex(hex: Hex, zip215?: boolean): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Twisted Edwards curve options.\n *\n * * a: formula param\n * * d: formula param\n * * p: prime characteristic (order) of finite field, in which arithmetics is done\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * h: cofactor. h*n is group order; n is subgroup order\n * * Gx: x coordinate of generator point a.k.a. base point\n * * Gy: y coordinate of generator point\n */\nexport type EdwardsOpts = Readonly<{\n  a: bigint;\n  d: bigint;\n  p: bigint;\n  n: bigint;\n  h: bigint;\n  Gx: bigint;\n  Gy: bigint;\n}>;\n\n/**\n * Extra curve options for Twisted Edwards.\n *\n * * Fp: redefined Field over curve.p\n * * Fn: redefined Field over curve.n\n * * uvRatio: helper function for decompression, calculating √(u/v)\n */\nexport type EdwardsExtraOpts = Partial<{\n  Fp: IField<bigint>;\n  Fn: IField<bigint>;\n  uvRatio: (u: bigint, v: bigint) => { isValid: boolean; value: bigint };\n}>;\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) options.\n *\n * * hash: hash function used to hash private keys and messages\n * * adjustScalarBytes: clears bits to get valid field element\n * * domain: Used for hashing\n * * mapToCurve: for hash-to-curve standard\n * * prehash: RFC 8032 pre-hashing of messages to sign() / verify()\n * * randomBytes: function generating random bytes, used for randomPrivateKey\n */\nexport type EdDSAOpts = {\n  hash: FHash;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>;\n  prehash?: FHash;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\n/**\n * EdDSA (Edwards Digital Signature algorithm) interface.\n *\n * Allows to create and verify signatures, create public and private keys.\n */\nexport interface EdDSA {\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    /** @deprecated use `point.precompute()` */\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n}\n\n// Legacy params. TODO: remove\nexport type CurveFn = {\n  CURVE: CurveType;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  Point: ExtPointConstructor;\n  /** @deprecated use `Point` */\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n    precompute: (windowSize?: number, point?: ExtPointType) => ExtPointType;\n  };\n};\n\nfunction isEdValidXY(Fp: IField<bigint>, CURVE: EdwardsOpts, x: bigint, y: bigint): boolean {\n  const x2 = Fp.sqr(x);\n  const y2 = Fp.sqr(y);\n  const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n  const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n  return Fp.eql(left, right);\n}\n\nexport function edwards(CURVE: EdwardsOpts, curveOpts: EdwardsExtraOpts = {}): ExtPointConstructor {\n  const { Fp, Fn } = _createCurveFields('edwards', CURVE, curveOpts);\n  const { h: cofactor, n: CURVE_ORDER } = CURVE;\n  _validateObject(curveOpts, {}, { uvRatio: 'function' });\n\n  // Important:\n  // There are some places where Fp.BYTES is used instead of nByteLength.\n  // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n  // TODO: test and find curves which behave otherwise.\n  const MASK = _2n << (BigInt(Fn.BYTES * 8) - _1n);\n  const modP = (n: bigint) => Fp.create(n); // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    curveOpts.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(Fp.div(u, v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n\n  // Validate whether the passed curve params are valid.\n  // equation ax² + y² = 1 + dx²y² should work for generator point.\n  if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy))\n    throw new Error('bad curve params: generator point');\n\n  /**\n   * Asserts coordinate is valid: 0 <= n < MASK.\n   * Coordinates >= Fp.ORDER are allowed for zip215.\n   */\n  function acoord(title: string, n: bigint, banZero = false) {\n    const min = banZero ? _1n : _0n;\n    aInRange('coordinate ' + title, n, min, MASK);\n    return n;\n  }\n\n  function aextpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // fields\n    static readonly Fp = Fp;\n    static readonly Fn = Fn;\n\n    readonly ex: bigint;\n    readonly ey: bigint;\n    readonly ez: bigint;\n    readonly et: bigint;\n\n    constructor(ex: bigint, ey: bigint, ez: bigint, et: bigint) {\n      this.ex = acoord('x', ex);\n      this.ey = acoord('y', ey);\n      this.ez = acoord('z', ez, true);\n      this.et = acoord('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      acoord('x', x);\n      acoord('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      return normalizeZ(Point, 'ez', points);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this.precompute(windowSize);\n    }\n    precompute(windowSize: number = 8, isLazy = true) {\n      wnaf.setWindowSize(this, windowSize);\n      if (!isLazy) this.multiply(_2n); // random number\n      return this;\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      aextpoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      aextpoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = wnaf.wNAFCached(this, n, Point.normalizeZ);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(scalar: bigint, acc = Point.ZERO): Point {\n      const n = scalar;\n      aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return Point.ZERO;\n      if (this.is0() || n === _1n) return this;\n      return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.wNAFCachedUnsafe(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(invertedZ?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, invertedZ);\n    }\n\n    clearCofactor(): Point {\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    static fromBytes(bytes: Uint8Array, zip215 = false): Point {\n      abytes(bytes);\n      return this.fromHex(bytes, zip215);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = bytesToNumberLE(normed);\n\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateScalar(scalar: bigint): Point {\n      return Point.BASE.multiply(scalar);\n    }\n    toBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(): Uint8Array {\n      return this.toBytes();\n    }\n    toHex(): string {\n      return bytesToHex(this.toBytes());\n    }\n\n    toString() {\n      return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n    }\n  }\n  const wnaf = wNAF(Point, Fn.BYTES * 8); // Fn.BITS?\n  return Point;\n}\n\n/**\n * Initializes EdDSA signatures over given Edwards curve.\n */\nexport function eddsa(Point: ExtPointConstructor, eddsaOpts: EdDSAOpts): EdDSA {\n  _validateObject(\n    eddsaOpts,\n    {\n      hash: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function',\n    }\n  );\n\n  const { prehash, hash: cHash } = eddsaOpts;\n  const { BASE: G, Fp, Fn } = Point;\n  const CURVE_ORDER = Fn.ORDER;\n\n  const randomBytes_ = eddsaOpts.randomBytes || randomBytes;\n  const adjustScalarBytes = eddsaOpts.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    eddsaOpts.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n\n  function modN(a: bigint) {\n    return Fn.create(a);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    // Not using Fn.fromBytes: hash can be 2*Fn.BYTES\n    return modN(bytesToNumberLE(hash));\n  }\n\n  // Get the hashed private scalar per RFC8032 5.1.5\n  function getPrivateScalar(key: Hex) {\n    const len = Fp.BYTES;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    return { head, prefix, scalar };\n  }\n\n  // Convenience method that creates public key from scalar. RFC8032 5.1.5\n  function getExtendedPublicKey(key: Hex) {\n    const { head, prefix, scalar } = getPrivateScalar(key);\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = Uint8Array.of(), ...msgs: Uint8Array[]) {\n    const msg = concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const L = Fp.BYTES;\n    const res = concatBytes(R, numberToBytesLE(s, L));\n    return ensureBytes('result', res, L * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n\n  /**\n   * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n   * An extended group equation is checked.\n   */\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    publicKey = ensureBytes('publicKey', publicKey, len);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = bytesToNumberLE(sig.slice(len, 2 * len));\n    let A, R, SB;\n    try {\n      // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // Extended group equation\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().is0();\n  }\n\n  G.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomPrivateKey: (): Uint8Array => randomBytes_!(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point: ExtPointType = Point.BASE): ExtPointType {\n      return point.precompute(windowSize, false);\n    },\n  };\n\n  return { getPublicKey, sign, verify, utils, Point };\n}\n\nexport type EdComposed = {\n  CURVE: EdwardsOpts;\n  curveOpts: EdwardsExtraOpts;\n  eddsaOpts: EdDSAOpts;\n};\nfunction _eddsa_legacy_opts_to_new(c: CurveTypeWithLength): EdComposed {\n  const CURVE: EdwardsOpts = {\n    a: c.a,\n    d: c.d,\n    p: c.Fp.ORDER,\n    n: c.n,\n    h: c.h,\n    Gx: c.Gx,\n    Gy: c.Gy,\n  };\n  const Fp = c.Fp;\n  const Fn = Field(CURVE.n, c.nBitLength, true);\n  const curveOpts: EdwardsExtraOpts = { Fp, Fn, uvRatio: c.uvRatio };\n  const eddsaOpts: EdDSAOpts = {\n    hash: c.hash,\n    randomBytes: c.randomBytes,\n    adjustScalarBytes: c.adjustScalarBytes,\n    domain: c.domain,\n    prehash: c.prehash,\n    mapToCurve: c.mapToCurve,\n  };\n  return { CURVE, curveOpts, eddsaOpts };\n}\nfunction _eddsa_new_output_to_legacy(c: CurveTypeWithLength, eddsa: EdDSA): CurveFn {\n  const legacy = Object.assign({}, eddsa, { ExtendedPoint: eddsa.Point, CURVE: c });\n  return legacy;\n}\n// TODO: remove. Use eddsa\nexport function twistedEdwards(c: CurveTypeWithLength): CurveFn {\n  const { CURVE, curveOpts, eddsaOpts } = _eddsa_legacy_opts_to_new(c);\n  const Point = edwards(CURVE, curveOpts);\n  const EDDSA = eddsa(Point, eddsaOpts);\n  return _eddsa_new_output_to_legacy(c, EDDSA);\n}\n", "/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  _validateObject,\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  randomBytes,\n} from '../utils.ts';\nimport { mod } from './modular.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  type: 'x25519' | 'x448';\n  adjustScalarBytes: (bytes: Uint8Array) => Uint8Array;\n  powPminus2: (x: bigint) => bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  _validateObject(curve, {\n    adjustScalarBytes: 'function',\n    powPminus2: 'function',\n  });\n  return Object.freeze({ ...curve } as const);\n}\n\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n  const is25519 = type === 'x25519';\n  if (!is25519 && type !== 'x448') throw new Error('invalid type');\n  const randomBytes_ = rand || randomBytes;\n\n  const montgomeryBits = is25519 ? 255 : 448;\n  const fieldLen = is25519 ? 32 : 56;\n  const Gu = is25519 ? BigInt(9) : BigInt(5);\n  // RFC 7748 #5:\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n  // (156326 - 2) / 4 = 39081 for curve448/X448\n  // const a = is25519 ? 156326n : 486662n;\n  const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n  // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n  // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n  // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n  const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n  const maxAdded = is25519\n    ? BigInt(8) * _2n ** BigInt(251) - _1n\n    : BigInt(4) * _2n ** BigInt(445) - _1n;\n  const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n  const modP = (n: bigint) => mod(n, P);\n  const GuBytes = encodeU(Gu);\n  function encodeU(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), fieldLen);\n  }\n  function decodeU(u: Hex): bigint {\n    const _u = ensureBytes('u coordinate', u, fieldLen);\n    // RFC: When receiving such an array, implementations of X25519\n    // (but not X448) MUST mask the most significant bit in the final byte.\n    if (is25519) _u[31] &= 127; // 0b0111_1111\n    // RFC: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.  The non-canonical\n    // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n    // - 1 through 2^448 - 1 for X448.\n    return modP(bytesToNumberLE(_u));\n  }\n  function decodeScalar(scalar: Hex): bigint {\n    return bytesToNumberLE(adjustScalarBytes(ensureBytes('scalar', scalar, fieldLen)));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n    // Some public keys are useless, of low-order. Curve author doesn't think\n    // it needs to be validated, but we do it nonetheless.\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeU(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  // cswap from RFC7748 \"example code\"\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): { x_2: bigint; x_3: bigint } {\n    // dummy = mask(swap) AND (x_2 XOR x_3)\n    // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n    // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n    x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n    return { x_2, x_3 };\n  }\n\n  /**\n   * Montgomery x-only multiplication ladder.\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, minScalar, maxScalar);\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n      ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n    ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n    const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n    return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => randomBytes_(fieldLen) },\n    GuBytes: GuBytes.slice(),\n  };\n}\n", "/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha2.js';\nimport { abytes, concatBytes, utf8ToBytes } from '@noble/hashes/utils.js';\nimport { type AffinePoint, type Group, pippenger } from './abstract/curve.ts';\nimport {\n  type CurveFn,\n  type EdwardsOpts,\n  type ExtPointType,\n  twistedEdwards,\n} from './abstract/edwards.ts';\nimport {\n  createHasher,\n  expand_message_xmd,\n  type H2CHasher,\n  type H2CMethod,\n  type htfBasicOpts,\n} from './abstract/hash-to-curve.ts';\nimport { Field, FpInvertBatch, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.ts';\nimport { montgomery, type CurveFn as XCurveFn } from './abstract/montgomery.ts';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  type Hex,\n  numberToBytesLE,\n} from './utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\n// 2n**255n - 19n\n// Removing Fp.create() will still work, and is 10% faster on sign\n//     a: Fp.create(BigInt(-1)),\n// d is -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))\n// Finite field 2n**255n - 19n\n// Subgroup order 2n**252n + 27742317777372353535851937790883648493n;\nconst ed25519_CURVE: EdwardsOpts = {\n  p: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed'),\n  n: BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed'),\n  h: _8n,\n  a: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec'),\n  d: BigInt('0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3'),\n  Gx: BigInt('0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'),\n  Gy: BigInt('0x6666666666666666666666666666666666666666666666666666666666666658'),\n};\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ed25519_CURVE.p;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\n// Fp.sqrt(Fp.neg(1))\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ed25519_CURVE.p;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n/** Weird / bogus points, useful for debugging. */\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ed25519_CURVE.p, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n  ...ed25519_CURVE,\n  Fp,\n  hash: sha512,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n}))();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() => {\n  const P = ed25519_CURVE.p;\n  return montgomery({\n    P,\n    type: 'x25519',\n    powPminus2: (x: bigint): bigint => {\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n  });\n})();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const bpub = ensureBytes('pub', edwardsPub);\n  const { y } = ed25519.Point.fromHex(bpub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const [xd_inv, yd_inv] = FpInvertBatch(Fp, [xd, yd], true); // batch division\n  return { x: Fp.mul(xn, xd_inv), y: Fp.mul(yn, yd_inv) }; //  13. return (xn, xd, yn, yd)\n}\n\nexport const ed25519_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.Point,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() => ed25519_hasher.hashToCurve)();\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  ed25519_hasher.encodeToCurve)();\n\nfunction aristp(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n/**\n * Computes Elligator map for Ristretto255.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n * the [website](https://ristretto.group/formulas/elligator.html).\n */\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  private readonly ep: ExtendedPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(ep: ExtendedPoint) {\n    this.ep = ep;\n  }\n\n  static fromAffine(ap: AffinePoint<bigint>): RistPoint {\n    return new RistPoint(ed25519.Point.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n   * the [website](https://ristretto.group/formulas/elligator.html).\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  static fromBytes(bytes: Uint8Array): RistPoint {\n    abytes(bytes);\n    return this.fromHex(bytes);\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.Point(x, y, _1n, t));\n  }\n\n  static msm(points: RistPoint[], scalars: bigint[]): RistPoint {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).\n   */\n  toBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = Fp.ORDER;\n    const mod = Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  /** @deprecated use `toBytes` */\n  toRawBytes(): Uint8Array {\n    return this.toBytes();\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  /**\n   * Compares two Ristretto points.\n   * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).\n   */\n  equals(other: RistPoint): boolean {\n    aristp(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    aristp(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    aristp(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\n\n/**\n * Wrapper over Edwards Point for ristretto255 from\n * [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n */\nexport const RistrettoPoint: typeof RistPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.Point.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.Point.ZERO);\n  return RistPoint;\n})();\n\n/**\n * hash-to-curve for ristretto255.\n * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B).\n */\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts): RistPoint => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n/** @deprecated */\nexport const hash_to_ristretto255: (msg: Uint8Array, options: htfBasicOpts) => RistPoint =\n  hashToRistretto255; // legacy\n", "import { ed25519 as nobleEd25519 } from '@noble/curves/ed25519'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\nimport type { HexString, SigningScheme } from '../../types'\nimport assert from '../../utils/assert'\nimport Sha512 from '../../utils/Sha512'\n\nconst ED_PREFIX = 'ED'\n\nconst ed25519: SigningScheme = {\n  deriveKeypair(entropy: Uint8Array): {\n    privateKey: string\n    publicKey: string\n  } {\n    const rawPrivateKey = Sha512.half(entropy)\n    const privateKey = ED_PREFIX + bytesToHex(rawPrivateKey)\n    const publicKey =\n      ED_PREFIX + bytesToHex(nobleEd25519.getPublicKey(rawPrivateKey))\n    return { privateKey, publicKey }\n  },\n\n  sign(message: Uint8Array, privateKey: HexString): string {\n    assert.ok(message instanceof Uint8Array, 'message must be array of octets')\n    assert.ok(\n      privateKey.length === 66,\n      'private key must be 33 bytes including prefix',\n    )\n    return bytesToHex(nobleEd25519.sign(message, privateKey.slice(2)))\n  },\n\n  verify(\n    message: Uint8Array,\n    signature: HexString,\n    publicKey: string,\n  ): boolean {\n    // Unlikely to be triggered as these are internal and guarded by getAlgorithmFromKey\n    assert.ok(\n      publicKey.length === 66,\n      'public key must be 33 bytes including prefix',\n    )\n    return nobleEd25519.verify(\n      signature,\n      message,\n      // Remove the 0xED prefix\n      publicKey.slice(2),\n      // By default, set zip215 to false for compatibility reasons.\n      // ZIP 215 is a stricter Ed25519 signature verification scheme.\n      // However, setting it to false adheres to the more commonly used\n      // RFC8032 / NIST186-5 standards, making it compatible with systems\n      // like the XRP Ledger.\n      { zip215: false },\n    )\n  },\n}\n\nexport default ed25519\n", "import {\n  decodeNodePublic,\n  decodeSeed,\n  encodeAccountID,\n  encodeSeed,\n} from 'ripple-address-codec'\nimport { ripemd160 } from '@xrplf/isomorphic/ripemd160'\nimport { sha256 } from '@xrplf/isomorphic/sha256'\nimport { hexToBytes, randomBytes } from '@xrplf/isomorphic/utils'\n\nimport { accountPublicFromPublicGenerator } from './signing-schemes/secp256k1/utils'\nimport Sha512 from './utils/Sha512'\nimport assert from './utils/assert'\nimport type { Algorithm, HexString, KeyPair, SigningScheme } from './types'\nimport {\n  getAlgorithmFromPrivateKey,\n  getAlgorithmFromPublicKey,\n} from './utils/getAlgorithmFromKey'\n\nimport secp256k1 from './signing-schemes/secp256k1'\nimport ed25519 from './signing-schemes/ed25519'\n\nfunction getSigningScheme(algorithm: Algorithm): SigningScheme {\n  const schemes = { 'ecdsa-secp256k1': secp256k1, ed25519 }\n  return schemes[algorithm]\n}\n\nfunction generateSeed(\n  options: {\n    entropy?: Uint8Array\n    algorithm?: Algorithm\n  } = {},\n): string {\n  assert.ok(\n    !options.entropy || options.entropy.length >= 16,\n    'entropy too short',\n  )\n  const entropy = options.entropy\n    ? options.entropy.slice(0, 16)\n    : randomBytes(16)\n  const type = options.algorithm === 'ed25519' ? 'ed25519' : 'secp256k1'\n  return encodeSeed(entropy, type)\n}\n\nfunction deriveKeypair(\n  seed: string,\n  options?: {\n    algorithm?: Algorithm\n    validator?: boolean\n    accountIndex?: number\n  },\n): KeyPair {\n  const decoded = decodeSeed(seed)\n  const proposedAlgorithm = options?.algorithm ?? decoded.type\n  const algorithm =\n    proposedAlgorithm === 'ed25519' ? 'ed25519' : 'ecdsa-secp256k1'\n  const scheme = getSigningScheme(algorithm)\n  const keypair = scheme.deriveKeypair(decoded.bytes, options)\n  const messageToVerify = Sha512.half('This test message should verify.')\n  const signature = scheme.sign(messageToVerify, keypair.privateKey)\n  /* istanbul ignore if */\n  if (!scheme.verify(messageToVerify, signature, keypair.publicKey)) {\n    throw new Error('derived keypair did not generate verifiable signature')\n  }\n  return keypair\n}\n\nfunction sign(messageHex: HexString, privateKey: HexString): HexString {\n  const algorithm = getAlgorithmFromPrivateKey(privateKey)\n  return getSigningScheme(algorithm).sign(hexToBytes(messageHex), privateKey)\n}\n\nfunction verify(\n  messageHex: HexString,\n  signature: HexString,\n  publicKey: HexString,\n): boolean {\n  const algorithm = getAlgorithmFromPublicKey(publicKey)\n  return getSigningScheme(algorithm).verify(\n    hexToBytes(messageHex),\n    signature,\n    publicKey,\n  )\n}\n\nfunction computePublicKeyHash(publicKeyBytes: Uint8Array): Uint8Array {\n  return ripemd160(sha256(publicKeyBytes))\n}\n\nfunction deriveAddressFromBytes(publicKeyBytes: Uint8Array): string {\n  return encodeAccountID(computePublicKeyHash(publicKeyBytes))\n}\n\nfunction deriveAddress(publicKey: string): string {\n  return deriveAddressFromBytes(hexToBytes(publicKey))\n}\n\nfunction deriveNodeAddress(publicKey: string): string {\n  const generatorBytes = decodeNodePublic(publicKey)\n  const accountPublicBytes = accountPublicFromPublicGenerator(generatorBytes)\n  return deriveAddressFromBytes(accountPublicBytes)\n}\n\nexport {\n  generateSeed,\n  deriveKeypair,\n  sign,\n  verify,\n  deriveAddress,\n  deriveNodeAddress,\n  decodeSeed,\n}\n", "import { classicAddressToXAddress } from 'ripple-address-codec'\nimport { deriveKeypair, deriveAddress } from 'ripple-keypairs'\n\n/**\n * Derive an X-Address from a public key and a destination tag.\n *\n * @param options - Public key and destination tag to encode as an X-Address.\n * @param options.publicKey - The public key corresponding to an address.\n * @param options.tag - A destination tag to encode into an X-address. False indicates no destination tag.\n * @param options.test - Whether this address is for use in Testnet.\n * @returns X-Address.\n * @category Utilities\n */\nfunction deriveXAddress(options: {\n  publicKey: string\n  tag: number | false\n  test: boolean\n}): string {\n  const classicAddress = deriveAddress(options.publicKey)\n  return classicAddressToXAddress(classicAddress, options.tag, options.test)\n}\n\nexport { deriveKeypair, deriveAddress, deriveXAddress }\n", "type ValueOf<T> = T[keyof T]\n\n/**\n * Creates an object composed of keys generated from the results of running each element of collection thru iteratee.\n * The order of grouped values is determined by the order they occur in collection.\n * The corresponding value of each key is an array of elements responsible for generating the key.\n *\n * Similar to lodash's groupBy\n *\n * @param array - array to iterate over\n * @param iteratee - function that returns key of the group to place the item\n *\n * @returns a map of arrays\n */\nexport function groupBy<T>(\n  array: T[],\n  iteratee: (value: T, index: number, array: T[]) => string | number,\n): Record<string | number, T[]> {\n  // eslint-disable-next-line max-params -- need all the params for the fallback\n  function predicate(\n    acc: Record<string | number, T[]>,\n    value: T,\n    index: number,\n    arrayReference: T[],\n  ): Record<string | number, T[]> {\n    const key = iteratee(value, index, arrayReference) || 0\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Find existing group or create a new one\n    const group = acc[key] || []\n    group.push(value)\n    acc[key] = group\n    return acc\n  }\n\n  return array.reduce(predicate, {})\n}\n\n/**\n * Creates an object composed of the own and inherited enumerable string keyed properties of object that\n * predicate doesn't return truthy for.\n *\n * @param obj - Object to have properties removed.\n * @param predicate - function that returns whether the property should be removed from the obj.\n *\n * @returns object\n */\nexport function omitBy<T extends object>(\n  obj: T,\n  predicate: (objElement: ValueOf<T>, k: string | number | symbol) => boolean,\n): Partial<T> {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We know the keys are properties of T\n  const keys: Array<keyof T> = Object.keys(obj) as Array<keyof T>\n  const keysToKeep = keys.filter((kb) => !predicate(obj[kb], kb))\n  return keysToKeep.reduce((acc: Partial<T>, key: keyof T) => {\n    acc[key] = obj[key]\n    return acc\n  }, {})\n}\n", "import BigNumber from 'bignumber.js'\n\nimport { ValidationError } from '../errors'\n\nconst DROPS_PER_XRP = 1000000.0\nconst MAX_FRACTION_LENGTH = 6\nconst BASE_TEN = 10\nconst SANITY_CHECK = /^-?[0-9.]+$/u\n\n/**\n * Convert Drops to XRP.\n *\n * @param dropsToConvert - Drops to convert to XRP. This can be a string, number, or BigNumber.\n * @returns Amount in XRP.\n * @throws When drops amount is invalid.\n * @category Utilities\n */\nexport function dropsToXrp(dropsToConvert: BigNumber.Value): number {\n  /*\n   * Converting to BigNumber and then back to string should remove any\n   * decimal point followed by zeros, e.g. '1.00'.\n   * Important: specify base BASE_10 to avoid exponential notation, e.g. '1e-7'.\n   */\n  const drops = new BigNumber(dropsToConvert).toString(BASE_TEN)\n\n  // check that the value is valid and actually a number\n  if (typeof dropsToConvert === 'string' && drops === 'NaN') {\n    throw new ValidationError(\n      `dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`,\n    )\n  }\n\n  // drops are only whole units\n  if (drops.includes('.')) {\n    throw new ValidationError(\n      `dropsToXrp: value '${drops}' has too many decimal places.`,\n    )\n  }\n\n  /*\n   * This should never happen; the value has already been\n   * validated above. This just ensures BigNumber did not do\n   * something unexpected.\n   */\n  if (!SANITY_CHECK.exec(drops)) {\n    throw new ValidationError(\n      `dropsToXrp: failed sanity check -` +\n        ` value '${drops}',` +\n        ` does not match (^-?[0-9]+$).`,\n    )\n  }\n\n  return new BigNumber(drops).dividedBy(DROPS_PER_XRP).toNumber()\n}\n\n/**\n * Convert an amount in XRP to an amount in drops.\n *\n * @param xrpToConvert - Amount in XRP.\n * @returns Amount in drops.\n * @throws When amount in xrp is invalid.\n * @category Utilities\n */\nexport function xrpToDrops(xrpToConvert: BigNumber.Value): string {\n  // Important: specify base BASE_TEN to avoid exponential notation, e.g. '1e-7'.\n  const xrp = new BigNumber(xrpToConvert).toString(BASE_TEN)\n\n  // check that the value is valid and actually a number\n  if (typeof xrpToConvert === 'string' && xrp === 'NaN') {\n    throw new ValidationError(\n      `xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`,\n    )\n  }\n\n  /*\n   * This should never happen; the value has already been\n   * validated above. This just ensures BigNumber did not do\n   * something unexpected.\n   */\n  if (!SANITY_CHECK.exec(xrp)) {\n    throw new ValidationError(\n      `xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`,\n    )\n  }\n\n  const components = xrp.split('.')\n  if (components.length > 2) {\n    throw new ValidationError(\n      `xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`,\n    )\n  }\n\n  const fraction = components[1] || '0'\n  if (fraction.length > MAX_FRACTION_LENGTH) {\n    throw new ValidationError(\n      `xrpToDrops: value '${xrp}' has too many decimal places.`,\n    )\n  }\n\n  return new BigNumber(xrp)\n    .times(DROPS_PER_XRP)\n    .integerValue(BigNumber.ROUND_FLOOR)\n    .toString(BASE_TEN)\n}\n", "import BigNumber from 'bignumber.js'\n\nimport {\n  Amount,\n  Balance,\n  IssuedCurrencyAmount,\n  TransactionMetadata,\n  Node,\n} from '../models'\n\nimport { groupBy } from './collections'\nimport { dropsToXrp } from './xrpConversion'\n\ninterface BalanceChange {\n  account: string\n  balance: Balance\n}\ninterface Fields {\n  Account?: string\n  Balance?: Amount\n  LowLimit?: IssuedCurrencyAmount\n  HighLimit?: IssuedCurrencyAmount\n  // eslint-disable-next-line @typescript-eslint/member-ordering -- okay here, just some of the fields are typed to make it easier\n  [field: string]: unknown\n}\n\ninterface NormalizedNode {\n  // 'CreatedNode' | 'ModifiedNode' | 'DeletedNode'\n  NodeType: string\n  LedgerEntryType: string\n  LedgerIndex: string\n  NewFields?: Fields\n  FinalFields?: Fields\n  PreviousFields?: Fields\n  PreviousTxnID?: string\n  PreviousTxnLgrSeq?: number\n}\n\nfunction normalizeNode(affectedNode: Node): NormalizedNode {\n  const diffType = Object.keys(affectedNode)[0]\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- not quite right, but close enough\n  const node = affectedNode[diffType] as NormalizedNode\n  return {\n    ...node,\n    NodeType: diffType,\n    LedgerEntryType: node.LedgerEntryType,\n    LedgerIndex: node.LedgerIndex,\n    NewFields: node.NewFields,\n    FinalFields: node.FinalFields,\n    PreviousFields: node.PreviousFields,\n  }\n}\n\nfunction normalizeNodes(metadata: TransactionMetadata): NormalizedNode[] {\n  if (metadata.AffectedNodes.length === 0) {\n    return []\n  }\n  return metadata.AffectedNodes.map(normalizeNode)\n}\n\nfunction groupByAccount(balanceChanges: BalanceChange[]): Array<{\n  account: string\n  balances: Balance[]\n}> {\n  const grouped = groupBy(balanceChanges, (node) => node.account)\n  return Object.entries(grouped).map(([account, items]) => {\n    return { account, balances: items.map((item) => item.balance) }\n  })\n}\n\nfunction getValue(balance: Amount): BigNumber {\n  if (typeof balance === 'string') {\n    return new BigNumber(balance)\n  }\n  return new BigNumber(balance.value)\n}\n\nfunction computeBalanceChange(node: NormalizedNode): BigNumber | null {\n  let value: BigNumber | null = null\n  if (node.NewFields?.Balance) {\n    value = getValue(node.NewFields.Balance)\n  } else if (node.PreviousFields?.Balance && node.FinalFields?.Balance) {\n    value = getValue(node.FinalFields.Balance).minus(\n      getValue(node.PreviousFields.Balance),\n    )\n  }\n  if (value === null || value.isZero()) {\n    return null\n  }\n  return value\n}\n\nfunction getXRPQuantity(\n  node: NormalizedNode,\n): { account: string; balance: Balance } | null {\n  const value = computeBalanceChange(node)\n\n  if (value === null) {\n    return null\n  }\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- okay here\n    account: (node.FinalFields?.Account ?? node.NewFields?.Account) as string,\n    balance: {\n      currency: 'XRP',\n      value: dropsToXrp(value).toString(),\n    },\n  }\n}\n\nfunction flipTrustlinePerspective(balanceChange: BalanceChange): BalanceChange {\n  const negatedBalance = new BigNumber(balanceChange.balance.value).negated()\n  return {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know this is true\n    account: balanceChange.balance.issuer as string,\n    balance: {\n      issuer: balanceChange.account,\n      currency: balanceChange.balance.currency,\n      value: negatedBalance.toString(),\n    },\n  }\n}\n\nfunction getTrustlineQuantity(node: NormalizedNode): BalanceChange[] | null {\n  const value = computeBalanceChange(node)\n\n  if (value === null) {\n    return null\n  }\n\n  /*\n   * A trustline can be created with a non-zero starting balance.\n   * If an offer is placed to acquire an asset with no existing trustline,\n   * the trustline can be created when the offer is taken.\n   */\n  const fields = node.NewFields == null ? node.FinalFields : node.NewFields\n\n  // the balance is always from low node's perspective\n  const result = {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that this is true\n    account: fields?.LowLimit?.issuer as string,\n    balance: {\n      issuer: fields?.HighLimit?.issuer,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that this is true\n      currency: (fields?.Balance as IssuedCurrencyAmount).currency,\n      value: value.toString(),\n    },\n  }\n  return [result, flipTrustlinePerspective(result)]\n}\n\n/**\n * Computes the complete list of every balance that changed in the ledger\n * as a result of the given transaction.\n *\n * @param metadata - Transaction metadata.\n * @returns Parsed balance changes.\n * @category Utilities\n */\nexport default function getBalanceChanges(\n  metadata: TransactionMetadata,\n): Array<{\n  account: string\n  balances: Balance[]\n}> {\n  const quantities = normalizeNodes(metadata).map((node) => {\n    if (node.LedgerEntryType === 'AccountRoot') {\n      const xrpQuantity = getXRPQuantity(node)\n      if (xrpQuantity == null) {\n        return []\n      }\n      return [xrpQuantity]\n    }\n    if (node.LedgerEntryType === 'RippleState') {\n      const trustlineQuantity = getTrustlineQuantity(node)\n      if (trustlineQuantity == null) {\n        return []\n      }\n      return trustlineQuantity\n    }\n    return []\n  })\n  return groupByAccount(quantities.flat())\n}\n", "import { Amount, MPTAmount } from '../common'\n\nimport { BaseTransaction } from './common'\nimport {\n  MPTokenIssuanceCreate,\n  MPTokenIssuanceCreateMetadata,\n} from './MPTokenIssuanceCreate'\nimport {\n  NFTokenAcceptOffer,\n  NFTokenAcceptOfferMetadata,\n} from './NFTokenAcceptOffer'\nimport {\n  NFTokenCancelOffer,\n  NFTokenCancelOfferMetadata,\n} from './NFTokenCancelOffer'\nimport {\n  NFTokenCreateOffer,\n  NFTokenCreateOfferMetadata,\n} from './NFTokenCreateOffer'\nimport { NFTokenMint, NFTokenMintMetadata } from './NFTokenMint'\nimport { Payment, PaymentMetadata } from './payment'\nimport type { Transaction } from './transaction'\n\nexport interface CreatedNode {\n  CreatedNode: {\n    LedgerEntryType: string\n    LedgerIndex: string\n    NewFields: { [field: string]: unknown }\n  }\n}\n\nexport interface ModifiedNode {\n  ModifiedNode: {\n    LedgerEntryType: string\n    LedgerIndex: string\n    FinalFields?: { [field: string]: unknown }\n    PreviousFields?: { [field: string]: unknown }\n    PreviousTxnID?: string\n    PreviousTxnLgrSeq?: number\n  }\n}\n\nexport interface DeletedNode {\n  DeletedNode: {\n    LedgerEntryType: string\n    LedgerIndex: string\n    PreviousFields?: { [field: string]: unknown }\n    FinalFields: { [field: string]: unknown }\n  }\n}\n\nexport type Node = CreatedNode | ModifiedNode | DeletedNode\n\n/**\n * A typeguard to check if a node is a CreatedNode.\n *\n * @param node - A node from metadata.\n * @returns whether the given node is a CreatedNode.\n */\nexport function isCreatedNode(node: Node): node is CreatedNode {\n  return Object.prototype.hasOwnProperty.call(node, `CreatedNode`)\n}\n\n/**\n * A typeguard to check if a node is a ModifiedNode.\n *\n * @param node - A node from metadata.\n * @returns whether the given node is a ModifiedNode.\n */\nexport function isModifiedNode(node: Node): node is ModifiedNode {\n  return Object.prototype.hasOwnProperty.call(node, `ModifiedNode`)\n}\n\n/**\n * A typeguard to check if a node is a DeletedNode.\n *\n * @param node - A node from metadata.\n * @returns whether the given node is a DeletedNode.\n */\nexport function isDeletedNode(node: Node): node is DeletedNode {\n  return Object.prototype.hasOwnProperty.call(node, `DeletedNode`)\n}\n\nexport interface TransactionMetadataBase {\n  AffectedNodes: Node[]\n  DeliveredAmount?: Amount | MPTAmount\n  // \"unavailable\" possible for transactions before 2014-01-20\n  delivered_amount?: Amount | MPTAmount | 'unavailable'\n  TransactionIndex: number\n  TransactionResult: string\n}\n\nexport type TransactionMetadata<T extends BaseTransaction = Transaction> =\n  T extends Payment\n    ? PaymentMetadata\n    : T extends NFTokenMint\n    ? NFTokenMintMetadata\n    : T extends NFTokenCreateOffer\n    ? NFTokenCreateOfferMetadata\n    : T extends NFTokenAcceptOffer\n    ? NFTokenAcceptOfferMetadata\n    : T extends NFTokenCancelOffer\n    ? NFTokenCancelOfferMetadata\n    : T extends MPTokenIssuanceCreate\n    ? MPTokenIssuanceCreateMetadata\n    : TransactionMetadataBase\n", "import { decode } from 'ripple-binary-codec'\n\nimport { NFToken } from '../models/ledger/NFTokenPage'\nimport {\n  CreatedNode,\n  isCreatedNode,\n  isModifiedNode,\n  ModifiedNode,\n  TransactionMetadata,\n} from '../models/transactions/metadata'\n\n/**\n * Ensures that the metadata is in a deserialized format to parse.\n *\n * @param meta - the metadata from a `tx` method call. Can be in json format or binary format.\n * @returns the metadata in a deserialized format.\n */\nfunction ensureDecodedMeta(\n  meta: TransactionMetadata | string,\n): TransactionMetadata {\n  if (typeof meta === 'string') {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Meta is either metadata or serialized metadata.\n    return decode(meta) as unknown as TransactionMetadata\n  }\n  return meta\n}\n\n/**\n * Gets the NFTokenID for an NFT recently minted with NFTokenMint.\n *\n * @param meta - Metadata from the response to submitting and waiting for an NFTokenMint transaction or from a `tx` method call.\n * @returns The NFTokenID for the minted NFT.\n * @throws if meta is not TransactionMetadata.\n */\n// eslint-disable-next-line max-lines-per-function -- This function has a lot of documentation\nexport default function getNFTokenID(\n  meta: TransactionMetadata | string | undefined,\n): string | undefined {\n  if (typeof meta !== 'string' && meta?.AffectedNodes === undefined) {\n    throw new TypeError(`Unable to parse the parameter given to getNFTokenID.\n      'meta' must be the metadata from an NFTokenMint transaction. Received ${JSON.stringify(\n        meta,\n      )} instead.`)\n  }\n\n  const decodedMeta = ensureDecodedMeta(meta)\n\n  /*\n   * When a mint results in splitting an existing page,\n   * it results in a created page and a modified node. Sometimes,\n   * the created node needs to be linked to a third page, resulting\n   * in modifying that third page's PreviousPageMin or NextPageMin\n   * field changing, but no NFTs within that page changing. In this\n   * case, there will be no previous NFTs and we need to skip.\n   * However, there will always be NFTs listed in the final fields,\n   * as rippled outputs all fields in final fields even if they were\n   * not changed. Thus why we add the additional condition to check\n   * if the PreviousFields contains NFTokens\n   */\n  const affectedNodes = decodedMeta.AffectedNodes.filter((node) => {\n    if (isCreatedNode(node)) {\n      return node.CreatedNode.LedgerEntryType === 'NFTokenPage'\n    }\n    if (isModifiedNode(node)) {\n      return (\n        node.ModifiedNode.LedgerEntryType === 'NFTokenPage' &&\n        Boolean(node.ModifiedNode.PreviousFields?.NFTokens)\n      )\n    }\n    return false\n  })\n  /* eslint-disable @typescript-eslint/consistent-type-assertions -- Necessary for parsing metadata */\n  const previousTokenIDSet = new Set(\n    affectedNodes\n      .flatMap((node) => {\n        const nftokens = isModifiedNode(node)\n          ? (node.ModifiedNode.PreviousFields?.NFTokens as NFToken[])\n          : []\n        return nftokens.map((token) => token.NFToken.NFTokenID)\n      })\n      .filter((id) => Boolean(id)),\n  )\n\n  /* eslint-disable @typescript-eslint/no-unnecessary-condition -- Cleaner to read */\n  const finalTokenIDs = affectedNodes\n    .flatMap((node) =>\n      (\n        (((node as ModifiedNode).ModifiedNode?.FinalFields?.NFTokens ??\n          (node as CreatedNode).CreatedNode?.NewFields\n            ?.NFTokens) as NFToken[]) ?? []\n      ).map((token) => token.NFToken.NFTokenID),\n    )\n    .filter((nftokenID) => Boolean(nftokenID))\n  /* eslint-enable @typescript-eslint/consistent-type-assertions -- Necessary for parsing metadata */\n  /* eslint-enable @typescript-eslint/no-unnecessary-condition -- Cleaner to read */\n  const nftokenID = finalTokenIDs.find((id) => !previousTokenIDSet.has(id))\n\n  return nftokenID\n}\n", "import { decode } from 'ripple-binary-codec'\n\nimport {\n  CreatedNode,\n  isCreatedNode,\n  TransactionMetadata,\n} from '../models/transactions/metadata'\n\n/**\n * Ensures that the metadata is in a deserialized format to parse.\n *\n * @param meta - the metadata from a `tx` method call. Can be in json format or binary format.\n * @returns the metadata in a deserialized format.\n */\nfunction ensureDecodedMeta(\n  meta: TransactionMetadata | string,\n): TransactionMetadata {\n  if (typeof meta === 'string') {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Meta is either metadata or serialized metadata.\n    return decode(meta) as unknown as TransactionMetadata\n  }\n  return meta\n}\n\n/**\n * Gets the XChainClaimID value from the metadata of an `XChainCreateClaimID` transaction.\n *\n * @param meta - Metadata from the response to submitting and waiting for an XChainCreateClaimID transaction\n *               or from a `tx` method call.\n * @returns The XChainClaimID for the minted NFT.\n * @throws if meta is not TransactionMetadata.\n */\nexport default function getXChainClaimID(\n  meta: TransactionMetadata | string | undefined,\n): string | undefined {\n  if (typeof meta !== 'string' && meta?.AffectedNodes === undefined) {\n    throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.\n      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(\n        meta,\n      )} instead.`)\n  }\n\n  const decodedMeta = ensureDecodedMeta(meta)\n\n  if (!decodedMeta.TransactionResult) {\n    throw new TypeError(\n      'Cannot get XChainClaimID from un-validated transaction',\n    )\n  }\n\n  if (decodedMeta.TransactionResult !== 'tesSUCCESS') {\n    return undefined\n  }\n\n  const createdNode = decodedMeta.AffectedNodes.find(\n    (node) =>\n      isCreatedNode(node) &&\n      node.CreatedNode.LedgerEntryType === 'XChainOwnedClaimID',\n  )\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- necessary here\n  return (createdNode as CreatedNode).CreatedNode.NewFields\n    .XChainClaimID as string\n}\n", "/**\n * Prefix for hashing functions.\n *\n * These prefixes are inserted before the source material used to\n * generate various hashes. This is done to put each hash in its own\n * \"space.\" This way, two different types of objects with the\n * same binary data will produce different hashes.\n *\n * Each prefix is a 4-byte value with the last byte set to zero\n * and the first three bytes formed from the ASCII equivalent of\n * some arbitrary string. For example \"TXN\".\n */\n\nenum HashPrefix {\n  // transaction plus signature to give transaction ID 'TXN'\n  TRANSACTION_ID = 0x54584e00,\n\n  // transaction plus metadata 'TND'\n  TRANSACTION_NODE = 0x534e4400,\n\n  // inner node in tree 'MIN'\n  INNER_NODE = 0x4d494e00,\n\n  // leaf node in tree 'MLN'\n  LEAF_NODE = 0x4d4c4e00,\n\n  // inner transaction to sign 'STX'\n  TRANSACTION_SIGN = 0x53545800,\n\n  // inner transaction to sign (TESTNET) 'stx'\n  TRANSACTION_SIGN_TESTNET = 0x73747800,\n\n  // inner transaction to multisign 'SMT'\n  TRANSACTION_MULTISIGN = 0x534d5400,\n\n  // ledger 'LWR'\n  LEDGER = 0x4c575200,\n}\n\nexport default HashPrefix\n", "import { sha512 } from '@xrplf/isomorphic/sha512'\nimport { bytesToHex, hexToBytes } from '@xrplf/isomorphic/utils'\n\nconst HASH_BYTES = 32\n\n/**\n * Compute a sha512Half Hash of a hex string.\n *\n * @param hex - Hex string to hash.\n * @returns Hash of hex.\n */\nfunction sha512Half(hex: string): string {\n  return bytesToHex(sha512(hexToBytes(hex)).slice(0, HASH_BYTES))\n}\n\nexport default sha512Half\n", "export enum NodeType {\n  INNER = 1,\n  TRANSACTION_NO_METADATA = 2,\n  TRANSACTION_METADATA = 3,\n  ACCOUNT_STATE = 4,\n}\n\n/**\n * Abstract base class for SHAMapNode.\n */\nexport abstract class Node {\n  public abstract get hash(): string\n  public abstract addItem(_tag: string, _node: Node): void\n}\n", "import { XrplError } from '../../../errors'\nimport HashPrefix from '../HashPrefix'\nimport sha512Half from '../sha512Half'\n\nimport { NodeType, Node } from './node'\n\nconst HEX = 16\n\n/**\n * Class for SHAMap Leaf Node.\n */\nclass LeafNode extends Node {\n  public tag: string\n  public type: NodeType\n  public data: string\n\n  /**\n   * Leaf node in a SHAMap tree.\n   *\n   * @param tag - Equates to a ledger entry `index`.\n   * @param data - Hex of account state, transaction etc.\n   * @param type - One of TYPE_ACCOUNT_STATE, TYPE_TRANSACTION_MD etc.\n   */\n  public constructor(tag: string, data: string, type: NodeType) {\n    super()\n    this.tag = tag\n    this.type = type\n    this.data = data\n  }\n\n  /**\n   * Get the hash of a LeafNode.\n   *\n   * @returns Hash or undefined.\n   * @throws If node is of unknown type.\n   */\n  public get hash(): string {\n    switch (this.type) {\n      case NodeType.ACCOUNT_STATE: {\n        const leafPrefix = HashPrefix.LEAF_NODE.toString(HEX)\n        return sha512Half(leafPrefix + this.data + this.tag)\n      }\n      case NodeType.TRANSACTION_NO_METADATA: {\n        const txIDPrefix = HashPrefix.TRANSACTION_ID.toString(HEX)\n        return sha512Half(txIDPrefix + this.data)\n      }\n      case NodeType.TRANSACTION_METADATA: {\n        const txNodePrefix = HashPrefix.TRANSACTION_NODE.toString(HEX)\n        return sha512Half(txNodePrefix + this.data + this.tag)\n      }\n      default:\n        throw new XrplError('Tried to hash a SHAMap node of unknown type.')\n    }\n  }\n\n  /**\n   * Add item to Leaf.\n   *\n   * @param tag - Index of the Node.\n   * @param node - Node to insert.\n   * @throws When called, because LeafNodes cannot addItem.\n   */\n  public addItem(tag: string, node: Node): void {\n    throw new XrplError('Cannot call addItem on a LeafNode')\n    this.addItem(tag, node)\n  }\n}\n\nexport default LeafNode\n", "import { XrplError } from '../../../errors'\nimport HashPrefix from '../HashPrefix'\nimport sha512Half from '../sha512Half'\n\nimport LeafNode from './LeafNode'\nimport { NodeType, Node } from './node'\n\nconst HEX_ZERO =\n  '0000000000000000000000000000000000000000000000000000000000000000'\n\nconst SLOT_MAX = 15\nconst HEX = 16\n\n/**\n * Class for SHAMap InnerNode.\n */\nclass InnerNode extends Node {\n  public leaves: { [slot: number]: Node | undefined }\n  public type: NodeType\n  public depth: number\n  public empty: boolean\n\n  /**\n   * Define an Inner (non-leaf) node in a SHAMap tree.\n   *\n   * @param depth - I.e. How many parent inner nodes.\n   */\n  public constructor(depth = 0) {\n    super()\n    this.leaves = {}\n    this.type = NodeType.INNER\n    this.depth = depth\n    this.empty = true\n  }\n\n  /**\n   * Get the hash of a LeafNode.\n   *\n   * @returns Hash of the LeafNode.\n   */\n  public get hash(): string {\n    if (this.empty) {\n      return HEX_ZERO\n    }\n    let hex = ''\n    for (let iter = 0; iter <= SLOT_MAX; iter++) {\n      const child = this.leaves[iter]\n      const hash: string = child == null ? HEX_ZERO : child.hash\n      hex += hash\n    }\n\n    const prefix = HashPrefix.INNER_NODE.toString(HEX)\n    return sha512Half(prefix + hex)\n  }\n\n  /**\n   * Adds an item to the InnerNode.\n   *\n   * @param tag - Equates to a ledger entry `index`.\n   * @param node - Node to add.\n   * @throws If there is a index collision.\n   */\n  public addItem(tag: string, node: Node): void {\n    const existingNode = this.getNode(parseInt(tag[this.depth], HEX))\n\n    if (existingNode === undefined) {\n      this.setNode(parseInt(tag[this.depth], HEX), node)\n      return\n    }\n\n    // A node already exists in this slot\n    if (existingNode instanceof InnerNode) {\n      // There is an inner node, so we need to go deeper\n      existingNode.addItem(tag, node)\n    } else if (existingNode instanceof LeafNode) {\n      if (existingNode.tag === tag) {\n        // Collision\n        throw new XrplError(\n          'Tried to add a node to a SHAMap that was already in there.',\n        )\n      } else {\n        const newInnerNode = new InnerNode(this.depth + 1)\n\n        // Parent new and existing node\n        newInnerNode.addItem(existingNode.tag, existingNode)\n        newInnerNode.addItem(tag, node)\n\n        // And place the newly created inner node in the slot\n        this.setNode(parseInt(tag[this.depth], HEX), newInnerNode)\n      }\n    }\n  }\n\n  /**\n   * Overwrite the node that is currently in a given slot.\n   *\n   * @param slot - A number 0-15.\n   * @param node - To place.\n   * @throws If slot is out of range.\n   */\n  public setNode(slot: number, node: Node): void {\n    if (slot < 0 || slot > SLOT_MAX) {\n      throw new XrplError('Invalid slot: slot must be between 0-15.')\n    }\n    this.leaves[slot] = node\n    this.empty = false\n  }\n\n  /**\n   * Get the node that is currently in a given slot.\n   *\n   * @param slot - A number 0-15.\n   * @returns Node currently in a slot.\n   * @throws If slot is out of range.\n   */\n  public getNode(slot: number): Node | undefined {\n    if (slot < 0 || slot > SLOT_MAX) {\n      throw new XrplError('Invalid slot: slot must be between 0-15.')\n    }\n    return this.leaves[slot]\n  }\n}\n\nexport default InnerNode\n", "import InnerNode from './InnerNode'\nimport LeafNode from './LeafNode'\nimport { NodeType } from './node'\n\n/**\n * SHAMap is the hash structure used to model ledgers.\n * If the root hash is equivalent, that means all nodes should be equivalent as well.\n */\nclass SHAMap {\n  public root: InnerNode\n\n  /**\n   * SHAMap tree constructor.\n   */\n  public constructor() {\n    this.root = new InnerNode(0)\n  }\n\n  /**\n   * Get the hash of the SHAMap.\n   *\n   * @returns The hash of the root of the SHAMap.\n   */\n  public get hash(): string {\n    return this.root.hash\n  }\n\n  /**\n   * Add an item to the SHAMap.\n   *\n   * @param tag - Index of the Node to add.\n   * @param data - Data to insert into the tree.\n   * @param type - Type of the node to add.\n   */\n  public addItem(tag: string, data: string, type: NodeType): void {\n    this.root.addItem(tag, new LeafNode(tag, data, type))\n  }\n}\n\nexport * from './node'\nexport default SHAMap\n", "/* eslint-disable @typescript-eslint/no-magic-numbers -- this file mimics\n   behavior in rippled. Magic numbers are used for lengths and conditions */\n/* eslint-disable no-bitwise  -- this file mimics behavior in rippled. It uses\n   bitwise operators for and-ing numbers with a mask and bit shifting. */\n\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport { decode, encode } from 'ripple-binary-codec'\n\nimport { ValidationError, XrplError } from '../../errors'\nimport { APIVersion } from '../../models'\nimport { LedgerEntry } from '../../models/ledger'\nimport { LedgerVersionMap } from '../../models/ledger/Ledger'\nimport { Transaction, TransactionMetadata } from '../../models/transactions'\n\nimport HashPrefix from './HashPrefix'\nimport sha512Half from './sha512Half'\nimport SHAMap, { NodeType } from './SHAMap'\n\nconst HEX = 16\n\ninterface HashLedgerHeaderOptions {\n  computeTreeHashes?: boolean\n}\n\nfunction intToHex(integer: number, byteLength: number): string {\n  const foo = Number(integer)\n    .toString(HEX)\n    .padStart(byteLength * 2, '0')\n\n  return foo\n}\n\nfunction bigintToHex(\n  integerString: string | number | BigNumber,\n  byteLength: number,\n): string {\n  const hex = new BigNumber(integerString).toString(HEX)\n  return hex.padStart(byteLength * 2, '0')\n}\n\nfunction addLengthPrefix(hex: string): string {\n  const length = hex.length / 2\n  if (length <= 192) {\n    return bytesToHex([length]) + hex\n  }\n  if (length <= 12480) {\n    const prefix = length - 193\n    return bytesToHex([193 + (prefix >>> 8), prefix & 0xff]) + hex\n  }\n  if (length <= 918744) {\n    const prefix = length - 12481\n    return (\n      bytesToHex([\n        241 + (prefix >>> 16),\n        (prefix >>> 8) & 0xff,\n        prefix & 0xff,\n      ]) + hex\n    )\n  }\n  throw new XrplError('Variable integer overflow.')\n}\n\n/**\n * Hashes the Transaction object as the ledger does. Throws if the transaction is unsigned.\n *\n * @param tx - A transaction to hash. Tx may be in binary blob form. Tx must be signed.\n * @returns A hash of tx.\n * @throws ValidationError if the Transaction is unsigned.\\\n * @category Utilities\n */\nexport function hashSignedTx(tx: Transaction | string): string {\n  let txBlob: string\n  let txObject: Transaction\n  if (typeof tx === 'string') {\n    txBlob = tx\n    /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Required until updated in binary codec. */\n    txObject = decode(tx) as unknown as Transaction\n  } else {\n    txBlob = encode(tx)\n    txObject = tx\n  }\n\n  if (\n    txObject.TxnSignature === undefined &&\n    txObject.Signers === undefined &&\n    txObject.SigningPubKey === undefined\n  ) {\n    throw new ValidationError('The transaction must be signed to hash it.')\n  }\n\n  const prefix = HashPrefix.TRANSACTION_ID.toString(16).toUpperCase()\n  return sha512Half(prefix.concat(txBlob))\n}\n\n/**\n * Compute the hash of a ledger.\n *\n * @param ledgerHeader - Ledger to compute the hash of.\n * @returns The hash of the ledger.\n * @category Utilities\n */\nexport function hashLedgerHeader(\n  ledgerHeader: LedgerVersionMap<APIVersion>,\n): string {\n  const prefix = HashPrefix.LEDGER.toString(HEX).toUpperCase()\n\n  const ledger =\n    prefix +\n    intToHex(Number(ledgerHeader.ledger_index), 4) +\n    bigintToHex(ledgerHeader.total_coins, 8) +\n    ledgerHeader.parent_hash +\n    ledgerHeader.transaction_hash +\n    ledgerHeader.account_hash +\n    intToHex(ledgerHeader.parent_close_time, 4) +\n    intToHex(ledgerHeader.close_time, 4) +\n    intToHex(ledgerHeader.close_time_resolution, 1) +\n    intToHex(ledgerHeader.close_flags, 1)\n\n  return sha512Half(ledger)\n}\n\n/**\n * Compute the root hash of the SHAMap containing all transactions.\n *\n * @param transactions - List of Transactions.\n * @returns The root hash of the SHAMap.\n * @category Utilities\n */\nexport function hashTxTree(\n  transactions: Array<Transaction & { metaData?: TransactionMetadata }>,\n): string {\n  const shamap = new SHAMap()\n  for (const txJSON of transactions) {\n    const txBlobHex = encode(txJSON)\n    const metaHex = encode(txJSON.metaData ?? {})\n    const txHash = hashSignedTx(txBlobHex)\n    const data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex)\n    shamap.addItem(txHash, data, NodeType.TRANSACTION_METADATA)\n  }\n\n  return shamap.hash\n}\n\n/**\n * Compute the state hash of a list of LedgerEntries.\n *\n * @param entries - List of LedgerEntries.\n * @returns Hash of SHAMap that consists of all entries.\n * @category Utilities\n */\nexport function hashStateTree(entries: LedgerEntry[]): string {\n  const shamap = new SHAMap()\n\n  entries.forEach((ledgerEntry) => {\n    const data = encode(ledgerEntry)\n    shamap.addItem(ledgerEntry.index, data, NodeType.ACCOUNT_STATE)\n  })\n\n  return shamap.hash\n}\n\nfunction computeTransactionHash(\n  ledger: LedgerVersionMap<APIVersion>,\n  options: HashLedgerHeaderOptions,\n): string {\n  const { transaction_hash } = ledger\n\n  if (!options.computeTreeHashes) {\n    return transaction_hash\n  }\n\n  if (ledger.transactions == null) {\n    throw new ValidationError('transactions is missing from the ledger')\n  }\n\n  const transactionHash = hashTxTree(ledger.transactions)\n\n  if (transaction_hash !== transactionHash) {\n    throw new ValidationError(\n      'transactionHash in header' +\n        ' does not match computed hash of transactions',\n      {\n        transactionHashInHeader: transaction_hash,\n        computedHashOfTransactions: transactionHash,\n      },\n    )\n  }\n\n  return transactionHash\n}\n\nfunction computeStateHash(\n  ledger: LedgerVersionMap<APIVersion>,\n  options: HashLedgerHeaderOptions,\n): string {\n  const { account_hash } = ledger\n\n  if (!options.computeTreeHashes) {\n    return account_hash\n  }\n\n  if (ledger.accountState == null) {\n    throw new ValidationError('accountState is missing from the ledger')\n  }\n\n  const stateHash = hashStateTree(ledger.accountState)\n\n  if (account_hash !== stateHash) {\n    throw new ValidationError(\n      'stateHash in header does not match computed hash of state',\n    )\n  }\n\n  return stateHash\n}\n\n/**\n * Compute the hash of a ledger.\n *\n * @param ledger - Ledger to compute the hash for.\n * @param options - Allow client to recompute Transaction and State Hashes.\n * @param options.computeTreeHashes - Whether to recompute the Transaction and State Hashes.\n * @returns The has of ledger.\n * @category Utilities\n */\nfunction hashLedger(\n  ledger: LedgerVersionMap<APIVersion>,\n  options: {\n    computeTreeHashes?: boolean\n  } = {},\n): string {\n  const subhashes = {\n    transaction_hash: computeTransactionHash(ledger, options),\n    account_hash: computeStateHash(ledger, options),\n  }\n  return hashLedgerHeader({ ...ledger, ...subhashes })\n}\n\nexport default hashLedger\n", "/**\n * XRP Ledger namespace prefixes.\n *\n * The XRP Ledger is a key-value store. In order to avoid name collisions,\n * names are partitioned into namespaces.\n *\n * Each namespace is just a single character prefix.\n *\n * See [LedgerNameSpace enum](https://github.com/ripple/rippled/blob/master/src/ripple/protocol/LedgerFormats.h#L100).\n */\nconst ledgerSpaces = {\n  account: 'a',\n  dirNode: 'd',\n  generatorMap: 'g',\n  rippleState: 'r',\n  // Entry for an offer.\n  offer: 'o',\n  // Directory of things owned by an account.\n  ownerDir: 'O',\n  // Directory of order books.\n  bookDir: 'B',\n  contract: 'c',\n  skipList: 's',\n  escrow: 'u',\n  amendment: 'f',\n  feeSettings: 'e',\n  ticket: 'T',\n  signerList: 'S',\n  paychan: 'x',\n  check: 'C',\n  depositPreauth: 'p',\n}\n\nexport default ledgerSpaces\n", "/* eslint-disable @typescript-eslint/no-magic-numbers -- this file mimics\n   behavior in rippled. Magic numbers are used for lengths and conditions */\n/* eslint-disable no-bitwise  -- this file mimics behavior in rippled. It uses\n   bitwise operators for and-ing numbers with a mask and bit shifting. */\n\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport { decodeAccountID } from 'ripple-address-codec'\n\nimport hashLedger, {\n  hashLedgerHeader,\n  hashSignedTx,\n  hashTxTree,\n  hashStateTree,\n} from './hashLedger'\nimport HashPrefix from './HashPrefix'\nimport ledgerSpaces from './ledgerSpaces'\nimport sha512Half from './sha512Half'\n\nconst HEX = 16\nconst BYTE_LENGTH = 4\n\nfunction addressToHex(address: string): string {\n  return bytesToHex(decodeAccountID(address))\n}\n\nfunction ledgerSpaceHex(name: keyof typeof ledgerSpaces): string {\n  return ledgerSpaces[name].charCodeAt(0).toString(HEX).padStart(4, '0')\n}\n\nconst MASK = 0xff\nfunction currencyToHex(currency: string): string {\n  if (currency.length !== 3) {\n    return currency\n  }\n\n  const bytes = Array(20).fill(0)\n  bytes[12] = currency.charCodeAt(0) & MASK\n  bytes[13] = currency.charCodeAt(1) & MASK\n  bytes[14] = currency.charCodeAt(2) & MASK\n  return bytesToHex(Uint8Array.from(bytes))\n}\n\n/**\n * Hash the given binary transaction data with the single-signing prefix.\n *\n * See [Serialization Format](https://xrpl.org/serialization.html).\n *\n * @param txBlobHex - The binary transaction blob as a hexadecimal string.\n * @returns The hash to sign.\n * @category Utilities\n */\nexport function hashTx(txBlobHex: string): string {\n  const prefix = HashPrefix.TRANSACTION_SIGN.toString(HEX).toUpperCase()\n  return sha512Half(prefix + txBlobHex)\n}\n\n/**\n * Compute AccountRoot Ledger Object Index.\n *\n * All objects in a ledger's state tree have a unique Index.\n * The AccountRoot Ledger Object Index is derived by hashing the\n * address with a namespace identifier. This ensures every\n * Index is unique.\n *\n * See [Ledger Object Indexes](https://xrpl.org/ledger-object-ids.html).\n *\n * @param address - The classic account address.\n * @returns The Ledger Object Index for the account.\n * @category Utilities\n */\nexport function hashAccountRoot(address: string): string {\n  return sha512Half(ledgerSpaceHex('account') + addressToHex(address))\n}\n\n/**\n * [SignerList Index Format](https://xrpl.org/signerlist.html#signerlist-id-format).\n *\n * The Index of a SignerList object is the SHA-512Half of the following values, concatenated in order:\n *   * The RippleState space key (0x0053)\n *   * The AccountID of the owner of the SignerList\n *   * The SignerListID (currently always 0).\n *\n * This method computes a SignerList Ledger Object Index.\n *\n * @param address - The classic account address of the SignerList owner (starting with r).\n * @returns The Index of the account's SignerList object.\n * @category Utilities\n */\nexport function hashSignerListId(address: string): string {\n  return sha512Half(\n    `${ledgerSpaceHex('signerList') + addressToHex(address)}00000000`,\n  )\n}\n\n/**\n * [Offer Index Format](https://xrpl.org/offer.html#offer-id-format).\n *\n * The Index of a Offer object is the SHA-512Half of the following values, concatenated in order:\n * * The Offer space key (0x006F)\n * * The AccountID of the account placing the offer\n * * The Sequence number of the OfferCreate transaction that created the offer.\n *\n * This method computes an Offer Index.\n *\n * @param address - The classic account address of the SignerList owner (starting with r).\n * @param sequence - Sequence of the Offer.\n * @returns The Index of the account's Offer object.\n * @category Utilities\n */\nexport function hashOfferId(address: string, sequence: number): string {\n  const hexPrefix = ledgerSpaces.offer\n    .charCodeAt(0)\n    .toString(HEX)\n    .padStart(2, '0')\n  const hexSequence = sequence.toString(HEX).padStart(8, '0')\n  const prefix = `00${hexPrefix}`\n  return sha512Half(prefix + addressToHex(address) + hexSequence)\n}\n\n/**\n * Compute the hash of a Trustline.\n *\n * @param address1 - One of the addresses in the Trustline.\n * @param address2 - The other address in the Trustline.\n * @param currency - Currency in the Trustline.\n * @returns The hash of the Trustline.\n * @category Utilities\n */\nexport function hashTrustline(\n  address1: string,\n  address2: string,\n  currency: string,\n): string {\n  const address1Hex = addressToHex(address1)\n  const address2Hex = addressToHex(address2)\n\n  const swap = new BigNumber(address1Hex, 16).isGreaterThan(\n    new BigNumber(address2Hex, 16),\n  )\n  const lowAddressHex = swap ? address2Hex : address1Hex\n  const highAddressHex = swap ? address1Hex : address2Hex\n\n  const prefix = ledgerSpaceHex('rippleState')\n  return sha512Half(\n    prefix + lowAddressHex + highAddressHex + currencyToHex(currency),\n  )\n}\n\n/**\n * Compute the Hash of an Escrow LedgerEntry.\n *\n * @param address - Address of the Escrow.\n * @param sequence - OfferSequence of the Escrow.\n * @returns The hash of the Escrow LedgerEntry.\n * @category Utilities\n */\nexport function hashEscrow(address: string, sequence: number): string {\n  return sha512Half(\n    ledgerSpaceHex('escrow') +\n      addressToHex(address) +\n      sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'),\n  )\n}\n\n/**\n * Compute the hash of a Payment Channel.\n *\n * @param address - Account of the Payment Channel.\n * @param dstAddress - Destination Account of the Payment Channel.\n * @param sequence - Sequence number of the Transaction that created the Payment Channel.\n * @returns Hash of the Payment Channel.\n * @category Utilities\n */\nexport function hashPaymentChannel(\n  address: string,\n  dstAddress: string,\n  sequence: number,\n): string {\n  return sha512Half(\n    ledgerSpaceHex('paychan') +\n      addressToHex(address) +\n      addressToHex(dstAddress) +\n      sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'),\n  )\n}\n\nexport { hashLedgerHeader, hashSignedTx, hashLedger, hashStateTree, hashTxTree }\n", "/* eslint-disable @typescript-eslint/no-magic-numbers -- Doing hex string parsing. */\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport { encodeAccountID } from 'ripple-address-codec'\n\nimport { XrplError } from '../errors'\n\n/**\n * An issuer may issue several NFTs with the same taxon; to ensure that NFTs are\n * spread across multiple pages we lightly mix the taxon up by using the sequence\n * (which is not under the issuer's direct control) as the seed for a simple linear\n * congruential generator.\n *\n * From the Hull-Dobell theorem we know that f(x)=(m*x+c) mod n will yield a\n * permutation of [0, n) when n is a power of 2 if m is congruent to 1 mod 4 and\n * c is odd. By doing a bitwise XOR with this permutation we can scramble/unscramble\n * the taxon.\n *\n * The XLS-20d proposal fixes m = 384160001 and c = 2459.\n * We then take the modulus of 2^32 which is 4294967296.\n *\n * @param taxon - The scrambled or unscrambled taxon (The XOR is both the encoding and decoding)\n * @param tokenSeq - The account sequence when the token was minted. Used as a psuedorandom seed.\n * @returns the opposite taxon. If the taxon was scrambled it becomes unscrambled, and vice versa.\n */\nfunction unscrambleTaxon(taxon: number, tokenSeq: number): number {\n  /* eslint-disable no-bitwise -- XOR is part of the encode/decode scheme. */\n  const seed = 384160001\n  const increment = 2459\n  const max = 4294967296\n\n  const scramble = new BigNumber(seed)\n    .multipliedBy(tokenSeq)\n    .modulo(max)\n    .plus(increment)\n    .modulo(max)\n    .toNumber()\n  return (taxon ^ scramble) >>> 0\n  /* eslint-enable no-bitwise */\n}\n\n/**\n * Parses an NFTokenID into the information it is encoding.\n *\n * Example decoding:\n *\n * 000B 0539 C35B55AA096BA6D87A6E6C965A6534150DC56E5E 12C5D09E 0000000C\n * +--- +--- +--------------------------------------- +------- +-------\n * |    |    |                                        |        |\n * |    |    |                                        |        `---> Sequence: 12\n * |    |    |                                        |\n * |    |    |                                        `---> Scrambled Taxon: 314,953,886\n * |    |    |                                              Unscrambled Taxon: 1337\n * |    |    |\n * |    |    `---> Issuer: rJoxBSzpXhPtAuqFmqxQtGKjA13jUJWthE\n * |    |\n * |    `---> TransferFee: 1337.0 bps or 13.37%\n * |\n * `---> Flags: 11 -> lsfBurnable, lsfOnlyXRP and lsfTransferable\n *\n * @param nftokenID - A hex string which identifies an NFToken on the ledger.\n * @throws XrplError when given an invalid nftokenID.\n * @returns a decoded nftokenID with all fields encoded within.\n */\nexport default function parseNFTokenID(nftokenID: string): {\n  NFTokenID: string\n  Flags: number\n  TransferFee: number\n  Issuer: string\n  Taxon: number\n  Sequence: number\n} {\n  const expectedLength = 64\n  if (nftokenID.length !== expectedLength) {\n    throw new XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}\n    , but expected a token with length ${expectedLength}`)\n  }\n\n  const scrambledTaxon = new BigNumber(\n    nftokenID.substring(48, 56),\n    16,\n  ).toNumber()\n  const sequence = new BigNumber(nftokenID.substring(56, 64), 16).toNumber()\n\n  const NFTokenIDData = {\n    NFTokenID: nftokenID,\n    Flags: new BigNumber(nftokenID.substring(0, 4), 16).toNumber(),\n    TransferFee: new BigNumber(nftokenID.substring(4, 8), 16).toNumber(),\n    Issuer: encodeAccountID(hexToBytes(nftokenID.substring(8, 48))),\n    Taxon: unscrambleTaxon(scrambledTaxon, sequence),\n    Sequence: sequence,\n  }\n\n  return NFTokenIDData\n}\n", "import BigNumber from 'bignumber.js'\n\nimport { ValidationError } from '../errors'\n\nconst BASE_TEN = 10\nconst ONE_BILLION = '1000000000'\nconst TWO_BILLION = '2000000000'\n\nfunction percentToDecimal(percent: string): string {\n  if (!percent.endsWith('%')) {\n    throw new ValidationError(`Value ${percent} must end with %`)\n  }\n\n  // Split the string on % and filter out any empty strings\n  const split = percent.split('%').filter((str) => str !== '')\n  if (split.length !== 1) {\n    throw new ValidationError(`Value ${percent} contains too many % signs`)\n  }\n\n  return new BigNumber(split[0]).dividedBy('100').toString(BASE_TEN)\n}\n\n/**\n * Converts a string decimal to \"billionths\" format for use with TransferRate.\n *\n * @param decimal - A string decimal between 0 and 1.00\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function decimalToTransferRate(decimal: string): number {\n  const rate = new BigNumber(decimal).times(ONE_BILLION).plus(ONE_BILLION)\n\n  if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {\n    throw new ValidationError(`Decimal value must be between 0 and 1.00.`)\n  }\n\n  const billionths = rate.toString(BASE_TEN)\n\n  if (billionths === ONE_BILLION) {\n    return 0\n  }\n\n  if (billionths === 'NaN') {\n    throw new ValidationError(`Value is not a number`)\n  }\n\n  if (billionths.includes('.')) {\n    throw new ValidationError(`Decimal exceeds maximum precision.`)\n  }\n\n  return Number(billionths)\n}\n\n/**\n * Converts a string percent to \"billionths\" format for use with TransferRate.\n *\n * @param percent - A string percent between 0% and 100%.\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the percent parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function percentToTransferRate(percent: string): number {\n  return decimalToTransferRate(percentToDecimal(percent))\n}\n\n/**\n * Converts a string decimal to the \"billionths\" format for use with QualityIn/\n * QualityOut\n *\n * @param decimal - A string decimal (i.e. \".00034\").\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function decimalToQuality(decimal: string): number {\n  const rate = new BigNumber(decimal).times(ONE_BILLION)\n\n  const billionths = rate.toString(BASE_TEN)\n\n  if (billionths === 'NaN') {\n    throw new ValidationError(`Value is not a number`)\n  }\n\n  if (billionths.includes('-')) {\n    throw new ValidationError('Cannot have negative Quality')\n  }\n\n  if (billionths === ONE_BILLION) {\n    return 0\n  }\n\n  if (billionths.includes('.')) {\n    throw new ValidationError(`Decimal exceeds maximum precision.`)\n  }\n\n  return Number(billionths)\n}\n\n/**\n * Converts a quality in \"billionths\" format to a decimal.\n *\n * @param quality - Quality to convert to decimal.\n * @returns decimal representation of quality.\n * @throws ValidationError when quality is not convertible to decimal format.\n * @category Utilities\n */\nexport function qualityToDecimal(quality: number): string {\n  if (!Number.isInteger(quality)) {\n    throw new ValidationError('Quality must be an integer')\n  }\n\n  if (quality < 0) {\n    throw new ValidationError('Negative quality not allowed')\n  }\n\n  if (quality === 0) {\n    return '1'\n  }\n\n  const decimal = new BigNumber(quality).dividedBy(ONE_BILLION)\n\n  return decimal.toString(BASE_TEN)\n}\n\n/**\n * Converts a transfer rate in \"billionths\" format to a decimal.\n *\n * @param rate - TransferRate to convert to decimal.\n * @returns decimal representation of transfer Rate.\n * @throws ValidationError when it cannot convert from billionths format.\n * @category Utilities\n */\nexport function transferRateToDecimal(rate: number): string {\n  if (!Number.isInteger(rate)) {\n    throw new ValidationError(\n      'Error decoding, transfer Rate must be an integer',\n    )\n  }\n\n  if (rate === 0) {\n    return '0'\n  }\n\n  const decimal = new BigNumber(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION)\n\n  if (decimal.isLessThan(0)) {\n    throw new ValidationError('Error decoding, negative transfer rate')\n  }\n\n  return decimal.toString(BASE_TEN)\n}\n\n/**\n * Converts a string percent to the \"billionths\" format for use with QualityIn/\n * QualityOut\n *\n * @param percent - A string percent (i.e. \".034%\").\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the percent parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function percentToQuality(percent: string): number {\n  return decimalToQuality(percentToDecimal(percent))\n}\n", "import { encodeForSigningClaim } from 'ripple-binary-codec'\nimport { sign } from 'ripple-keypairs'\n\nimport { xrpToDrops } from './xrpConversion'\n\n/**\n * Sign a payment channel claim.\n *\n * @param channel - Channel identifier specified by the paymentChannelClaim.\n * @param xrpAmount - XRP Amount specified by the paymentChannelClaim.\n * @param privateKey - Private Key to sign paymentChannelClaim with.\n * @returns True if the channel is valid.\n * @category Utilities\n */\nfunction signPaymentChannelClaim(\n  channel: string,\n  xrpAmount: string,\n  privateKey: string,\n): string {\n  const signingData = encodeForSigningClaim({\n    channel,\n    amount: xrpToDrops(xrpAmount),\n  })\n  return sign(signingData, privateKey)\n}\n\nexport default signPaymentChannelClaim\n", "import { stringToHex, hexToString } from '@xrplf/isomorphic/utils'\n\n/**\n * Converts a string to its hex equivalent. Useful for Memos.\n *\n * @param string - The string to convert to Hex.\n * @returns The Hex equivalent of the string.\n *\n * @deprecated use `@xrplf/isomorphic/utils`'s `stringToHex`\n *\n * @category Utilities\n */\nfunction convertStringToHex(string: string): string {\n  return stringToHex(string)\n}\n\n/**\n * Converts hex to its string equivalent. Useful to read the Domain field and some Memos.\n *\n * @param hex - The hex to convert to a string.\n * @param encoding - The encoding to use. Defaults to 'utf8' (UTF-8). 'ascii' is also allowed.\n * @returns The converted string.\n *\n * @deprecated use `@xrplf/isomorphic/utils`'s `hexToString`\n *\n * @category Utilities\n */\nfunction convertHexToString(hex: string, encoding = 'utf8'): string {\n  return hexToString(hex, encoding)\n}\n\nexport { convertHexToString, convertStringToHex }\n", "const RIPPLE_EPOCH_DIFF = 0x386d4380\n\n/**\n * Convert a ripple timestamp to a unix timestamp.\n *\n * @param rpepoch - (seconds since 1/1/2000 GMT).\n * @returns Milliseconds since unix epoch.\n * @category Utilities\n */\nfunction rippleTimeToUnixTime(rpepoch: number): number {\n  return (rpepoch + RIPPLE_EPOCH_DIFF) * 1000\n}\n\n/**\n * Convert a unix timestamp to a ripple timestamp.\n *\n * @param timestamp - (ms since unix epoch).\n * @returns Seconds since Ripple Epoch (1/1/2000 GMT).\n * @category Utilities\n */\nfunction unixTimeToRippleTime(timestamp: number): number {\n  return Math.round(timestamp / 1000) - RIPPLE_EPOCH_DIFF\n}\n\n/**\n * Convert a ripple timestamp to an Iso8601 timestamp.\n *\n * @param rippleTime - Is the number of seconds since Ripple Epoch (1/1/2000 GMT).\n * @returns Iso8601 international standard date format.\n * @category Utilities\n */\nfunction rippleTimeToISOTime(rippleTime: number): string {\n  return new Date(rippleTimeToUnixTime(rippleTime)).toISOString()\n}\n\n/**\n * Convert an ISO8601 timestmap to a ripple timestamp.\n *\n * @param iso8601 - International standard date format.\n * @returns Seconds since ripple epoch (1/1/2000 GMT).\n * @category Utilities\n */\nfunction isoTimeToRippleTime(iso8601: string | Date): number {\n  const isoDate = typeof iso8601 === 'string' ? new Date(iso8601) : iso8601\n  return unixTimeToRippleTime(isoDate.getTime())\n}\n\nexport {\n  rippleTimeToUnixTime,\n  unixTimeToRippleTime,\n  rippleTimeToISOTime,\n  isoTimeToRippleTime,\n}\n", "import { encodeForSigningClaim } from 'ripple-binary-codec'\nimport { verify } from 'ripple-keypairs'\n\nimport { xrpToDrops } from './xrpConversion'\n\n/**\n * Verify the signature of a payment channel claim.\n *\n * @param channel - Channel identifier specified by the paymentChannelClaim.\n * @param xrpAmount - XRP Amount specified by the paymentChannelClaim.\n * @param signature - Signature produced from signing paymentChannelClaim.\n * @param publicKey - Public key that signed the paymentChannelClaim.\n * @returns True if the channel is valid.\n * @category Utilities\n */\n// eslint-disable-next-line max-params -- Needs 4 params\nfunction verifyPaymentChannelClaim(\n  channel: string,\n  xrpAmount: string,\n  signature: string,\n  publicKey: string,\n): boolean {\n  const signingData = encodeForSigningClaim({\n    channel,\n    amount: xrpToDrops(xrpAmount),\n  })\n  return verify(signingData, signature, publicKey)\n}\n\nexport default verifyPaymentChannelClaim\n", "import {\n  classicAddressToXAddress,\n  decodeAccountID,\n  decodeAccountPublic,\n  decodeNodePublic,\n  decodeSeed,\n  decodeXAddress,\n  encodeAccountID,\n  encodeAccountPublic,\n  encodeNodePublic,\n  encodeSeed,\n  encodeXAddress,\n  isValidClassicAddress,\n  isValidXAddress,\n  xAddressToClassicAddress,\n} from 'ripple-address-codec'\nimport {\n  encode as rbcEncode,\n  decode as rbcDecode,\n  encodeForMultisigning as rbcEncodeForMultisigning,\n  encodeForSigning as rbcEncodeForSigning,\n  encodeForSigningClaim as rbcEncodeForSigningClaim,\n} from 'ripple-binary-codec'\nimport { verify as verifyKeypairSignature } from 'ripple-keypairs'\n\nimport type { APIVersion } from '../models'\nimport { LedgerEntry } from '../models/ledger'\nimport { Response } from '../models/methods'\nimport { PaymentChannelClaim } from '../models/transactions/paymentChannelClaim'\nimport { Transaction } from '../models/transactions/transaction'\n\nimport { deriveKeypair, deriveAddress, deriveXAddress } from './derive'\nimport getBalanceChanges from './getBalanceChanges'\nimport getNFTokenID from './getNFTokenID'\nimport getXChainClaimID from './getXChainClaimID'\nimport {\n  hashSignedTx,\n  hashTx,\n  hashAccountRoot,\n  hashSignerListId,\n  hashOfferId,\n  hashTrustline,\n  hashTxTree,\n  hashStateTree,\n  hashLedger,\n  hashLedgerHeader,\n  hashEscrow,\n  hashPaymentChannel,\n} from './hashes'\nimport parseNFTokenID from './parseNFTokenID'\nimport {\n  percentToTransferRate,\n  decimalToTransferRate,\n  transferRateToDecimal,\n  percentToQuality,\n  decimalToQuality,\n  qualityToDecimal,\n} from './quality'\nimport signPaymentChannelClaim from './signPaymentChannelClaim'\nimport { convertHexToString, convertStringToHex } from './stringConversion'\nimport {\n  rippleTimeToISOTime,\n  isoTimeToRippleTime,\n  rippleTimeToUnixTime,\n  unixTimeToRippleTime,\n} from './timeConversion'\nimport verifyPaymentChannelClaim from './verifyPaymentChannelClaim'\nimport { xrpToDrops, dropsToXrp } from './xrpConversion'\n\n/**\n * Check if a secret is valid.\n *\n * @param secret - Secret to test for validity.\n * @returns True if secret can be derived into a keypair.\n * @category Utilities\n */\nfunction isValidSecret(secret: string): boolean {\n  try {\n    deriveKeypair(secret)\n    return true\n  } catch (_err) {\n    return false\n  }\n}\n\n/**\n * Encodes a LedgerEntry or Transaction into a hex string\n *\n * @param object - LedgerEntry or Transaction in JSON format.\n * @returns A hex string representing the encoded object.\n */\nfunction encode(object: Transaction | LedgerEntry): string {\n  return rbcEncode(object)\n}\n\n/**\n * Encodes a Transaction for signing\n *\n * @param object - LedgerEntry in JSON or Transaction format.\n * @returns A hex string representing the encoded object.\n */\nfunction encodeForSigning(object: Transaction): string {\n  return rbcEncodeForSigning(object)\n}\n\n/**\n * Encodes a PaymentChannelClaim for signing\n *\n * @param object - PaymentChannelClaim in JSON format.\n * @returns A hex string representing the encoded object.\n */\nfunction encodeForSigningClaim(object: PaymentChannelClaim): string {\n  return rbcEncodeForSigningClaim(object)\n}\n\n/**\n * Encodes a Transaction for multi-signing\n *\n * @param object - Transaction in JSON format.\n * @param signer - The address of the account signing this transaction\n * @returns A hex string representing the encoded object.\n */\nfunction encodeForMultiSigning(object: Transaction, signer: string): string {\n  return rbcEncodeForMultisigning(object, signer)\n}\n\n/**\n * Decodes a hex string into a transaction | ledger entry\n *\n * @param hex - hex string in the XRPL serialization format.\n * @returns The hex string decoded according to XRPL serialization format.\n */\nfunction decode(hex: string): Record<string, unknown> {\n  return rbcDecode(hex)\n}\n\n/**\n * Validates that a given address is a valid X-Address or a valid classic\n * address.\n *\n * @param address - Address to validate.\n * @returns True if address is a valid X-Address or classic address.\n * @category Utilities\n */\nfunction isValidAddress(address: string): boolean {\n  return isValidXAddress(address) || isValidClassicAddress(address)\n}\n\n/**\n * Returns true if there are more pages of data.\n *\n * When there are more results than contained in the response, the response\n * includes a `marker` field.\n *\n * See https://ripple.com/build/rippled-apis/#markers-and-pagination.\n *\n * @param response - Response to check for more pages on.\n * @returns Whether the response has more pages of data.\n * @category Utilities\n */\nfunction hasNextPage(response: Response<APIVersion>): boolean {\n  // eslint-disable-next-line @typescript-eslint/dot-notation -- only checking if it exists\n  return Boolean(response.result['marker'])\n}\n\n/**\n * @category Utilities\n */\nconst hashes = {\n  hashSignedTx,\n  hashTx,\n  hashAccountRoot,\n  hashSignerListId,\n  hashOfferId,\n  hashTrustline,\n  hashTxTree,\n  hashStateTree,\n  hashLedger,\n  hashLedgerHeader,\n  hashEscrow,\n  hashPaymentChannel,\n}\n\nexport {\n  getBalanceChanges,\n  dropsToXrp,\n  xrpToDrops,\n  hasNextPage,\n  rippleTimeToISOTime,\n  isoTimeToRippleTime,\n  rippleTimeToUnixTime,\n  unixTimeToRippleTime,\n  percentToQuality,\n  decimalToQuality,\n  percentToTransferRate,\n  decimalToTransferRate,\n  transferRateToDecimal,\n  qualityToDecimal,\n  isValidSecret,\n  isValidAddress,\n  hashes,\n  deriveKeypair,\n  deriveAddress,\n  deriveXAddress,\n  signPaymentChannelClaim,\n  verifyKeypairSignature,\n  verifyPaymentChannelClaim,\n  convertStringToHex,\n  convertHexToString,\n  classicAddressToXAddress,\n  xAddressToClassicAddress,\n  isValidXAddress,\n  isValidClassicAddress,\n  encodeSeed,\n  decodeSeed,\n  encodeAccountID,\n  decodeAccountID,\n  encodeNodePublic,\n  decodeNodePublic,\n  encodeAccountPublic,\n  decodeAccountPublic,\n  encodeXAddress,\n  decodeXAddress,\n  encode,\n  decode,\n  encodeForMultiSigning,\n  encodeForSigning,\n  encodeForSigningClaim,\n  getNFTokenID,\n  parseNFTokenID,\n  getXChainClaimID,\n}\n", "import type {\n  Client,\n  SubmitRequest,\n  SubmitResponse,\n  SubmittableTransaction,\n  Transaction,\n  Wallet,\n} from '..'\nimport { ValidationError, XrplError } from '../errors'\nimport { Signer } from '../models/common'\nimport { TxResponse } from '../models/methods'\nimport { BaseTransaction } from '../models/transactions/common'\nimport { decode, encode } from '../utils'\n\n/** Approximate time for a ledger to close, in milliseconds */\nconst LEDGER_CLOSE_TIME = 1000\n\nasync function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\n// Helper functions\n\n/**\n * Submits a request to the client with a signed transaction.\n *\n * @param client - The client to submit the request to.\n * @param signedTransaction - The signed transaction to submit. It can be either a Transaction object or a\n * string (encode from ripple-binary-codec) representation of the transaction.\n * @param [failHard=false] - Optional. Determines whether the submission should fail hard (true) or not (false). Default is false.\n * @returns A promise that resolves with the response from the client.\n * @throws {ValidationError} If the signed transaction is not valid (not signed).\n *\n * @example\n * import { Client } from \"xrpl\"\n * const client = new Client(\"wss://s.altnet.rippletest.net:51233\");\n * await client.connect();\n * const signedTransaction = createSignedTransaction();\n * // Example 1: Submitting a Transaction object\n * const response1 = await submitRequest(client, signedTransaction);\n *\n * // Example 2: Submitting a string representation of the transaction\n * const signedTransactionString = encode(signedTransaction);\n * const response2 = await submitRequest(client, signedTransactionString, true);\n */\nexport async function submitRequest(\n  client: Client,\n  signedTransaction: SubmittableTransaction | string,\n  failHard = false,\n): Promise<SubmitResponse> {\n  if (!isSigned(signedTransaction)) {\n    throw new ValidationError('Transaction must be signed.')\n  }\n\n  const signedTxEncoded =\n    typeof signedTransaction === 'string'\n      ? signedTransaction\n      : encode(signedTransaction)\n  const request: SubmitRequest = {\n    command: 'submit',\n    tx_blob: signedTxEncoded,\n    fail_hard: isAccountDelete(signedTransaction) || failHard,\n  }\n  return client.request(request)\n}\n\n/**\n * Waits for the final outcome of a transaction by polling the ledger until the result can be considered final,\n * meaning it has either been included in a validated ledger, or the transaction's lastLedgerSequence has been\n * surpassed by the latest ledger sequence (meaning it will never be included in a validated ledger).\n *\n * @template T - The type of the transaction. Defaults to `Transaction`.\n * @param client - The client to use for requesting transaction information.\n * @param txHash - The hash of the transaction to wait for.\n * @param lastLedger - The last ledger sequence of the transaction.\n * @param submissionResult - The preliminary result of the transaction.\n * @returns A promise that resolves with the final transaction response.\n *\n * @throws {XrplError} If the latest ledger sequence surpasses the transaction's lastLedgerSequence.\n *\n * @example\n * import { hashes, Client } from \"xrpl\"\n * const client = new Client(\"wss://s.altnet.rippletest.net:51233\")\n * await client.connect()\n *\n * const transaction = createTransaction() // your transaction function\n *\n * const signedTx = await getSignedTx(this, transaction)\n *\n * const lastLedger = getLastLedgerSequence(signedTx)\n *\n * if (lastLedger == null) {\n *   throw new ValidationError(\n *     'Transaction must contain a LastLedgerSequence value for reliable submission.',\n *   )\n * }\n *\n * const response = await submitRequest(this, signedTx, opts?.failHard)\n *\n * const txHash = hashes.hashSignedTx(signedTx)\n * return waitForFinalTransactionOutcome(\n *   this,\n *   txHash,\n *   lastLedger,\n *   response.result.engine_result,\n * )\n */\n// eslint-disable-next-line max-params, max-lines-per-function -- this function needs to display and do with more information.\nexport async function waitForFinalTransactionOutcome<\n  T extends BaseTransaction = SubmittableTransaction,\n>(\n  client: Client,\n  txHash: string,\n  lastLedger: number,\n  submissionResult: string,\n): Promise<TxResponse<T>> {\n  await sleep(LEDGER_CLOSE_TIME)\n\n  const latestLedger = await client.getLedgerIndex()\n\n  if (lastLedger < latestLedger) {\n    throw new XrplError(\n      `The latest ledger sequence ${latestLedger} is greater than the transaction's LastLedgerSequence (${lastLedger}).\\n` +\n        `Preliminary result: ${submissionResult}`,\n    )\n  }\n\n  const txResponse = await client\n    .request({\n      command: 'tx',\n      transaction: txHash,\n    })\n    .catch(async (error) => {\n      // error is of an unknown type and hence we assert type to extract the value we need.\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions,@typescript-eslint/no-unsafe-member-access -- ^\n      const message = error?.data?.error as string\n      if (message === 'txnNotFound') {\n        return waitForFinalTransactionOutcome<T>(\n          client,\n          txHash,\n          lastLedger,\n          submissionResult,\n        )\n      }\n      throw new Error(\n        `${message} \\n Preliminary result: ${submissionResult}.\\nFull error details: ${String(\n          error,\n        )}`,\n      )\n    })\n\n  if (txResponse.result.validated) {\n    // TODO: resolve the type assertion below\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that txResponse is of type TxResponse\n    return txResponse as TxResponse<T>\n  }\n\n  return waitForFinalTransactionOutcome<T>(\n    client,\n    txHash,\n    lastLedger,\n    submissionResult,\n  )\n}\n\n// checks if the transaction has been signed\nfunction isSigned(transaction: SubmittableTransaction | string): boolean {\n  const tx = typeof transaction === 'string' ? decode(transaction) : transaction\n  if (typeof tx === 'string') {\n    return false\n  }\n  if (tx.Signers != null) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that tx.Signers is an array of Signers\n    const signers = tx.Signers as Signer[]\n    for (const signer of signers) {\n      // eslint-disable-next-line max-depth -- necessary for checking if signer is signed\n      if (\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- necessary check\n        signer.Signer.SigningPubKey == null ||\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- necessary check\n        signer.Signer.TxnSignature == null\n      ) {\n        return false\n      }\n    }\n    return true\n  }\n  return tx.SigningPubKey != null && tx.TxnSignature != null\n}\n\n/**\n * Updates a transaction with `autofill` then signs it if it is unsigned.\n *\n * @param client - The client from which to retrieve the signed transaction.\n * @param transaction - The transaction to retrieve. It can be either a Transaction object or\n * a string (encode from ripple-binary-codec) representation of the transaction.\n * @param [options={}] - Optional. Additional options for retrieving the signed transaction.\n * @param [options.autofill=true] - Optional. Determines whether the transaction should be autofilled (true)\n * or not (false). Default is true.\n * @param [options.wallet] - Optional. A wallet to sign the transaction. It must be provided when submitting\n * an unsigned transaction. Default is undefined.\n * @returns A promise that resolves with the signed transaction.\n *\n * @throws {ValidationError} If the transaction is not signed and no wallet is provided.\n *\n * @example\n * import { Client } from \"xrpl\"\n * import { encode } from \"ripple-binary-codec\"\n *\n * const client = new Client(\"wss://s.altnet.rippletest.net:51233\");\n * await client.connect():\n * const transaction = createTransaction(); // createTransaction is your function to create a transaction\n * const options = {\n *   autofill: true,\n *   wallet: myWallet,\n * };\n *\n * // Example 1: Retrieving a signed Transaction object\n * const signedTx1 = await getSignedTx(client, transaction, options);\n *\n * // Example 2: Retrieving a string representation of the signed transaction\n * const signedTxString = await getSignedTx(client, encode(transaction), options);\n */\nexport async function getSignedTx(\n  client: Client,\n  transaction: SubmittableTransaction | string,\n  {\n    autofill = true,\n    wallet,\n  }: {\n    // If true, autofill a transaction.\n    autofill?: boolean\n    // A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n    wallet?: Wallet\n  } = {},\n): Promise<SubmittableTransaction | string> {\n  if (isSigned(transaction)) {\n    return transaction\n  }\n\n  if (!wallet) {\n    throw new ValidationError(\n      'Wallet must be provided when submitting an unsigned transaction',\n    )\n  }\n\n  let tx =\n    typeof transaction === 'string'\n      ? // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- converts JsonObject to correct Transaction type\n        (decode(transaction) as unknown as SubmittableTransaction)\n      : transaction\n\n  if (autofill) {\n    tx = await client.autofill(tx)\n  }\n\n  return wallet.sign(tx).tx_blob\n}\n\n// checks if there is a LastLedgerSequence as a part of the transaction\n/**\n * Retrieves the last ledger sequence from a transaction.\n *\n * @param transaction - The transaction to retrieve the last ledger sequence from. It can be either a Transaction object or\n * a string (encode from ripple-binary-codec) representation of the transaction.\n * @returns The last ledger sequence of the transaction, or null if not available.\n *\n * @example\n * const transaction = createTransaction(); // your function to create a transaction\n *\n * // Example 1: Retrieving the last ledger sequence from a Transaction object\n * const lastLedgerSequence1 = getLastLedgerSequence(transaction);\n * console.log(lastLedgerSequence1); // Output: 12345\n *\n * // Example 2: Retrieving the last ledger sequence from a string representation of the transaction\n * const transactionString = encode(transaction);\n * const lastLedgerSequence2 = getLastLedgerSequence(transactionString);\n * console.log(lastLedgerSequence2); // Output: 67890\n */\nexport function getLastLedgerSequence(\n  transaction: Transaction | string,\n): number | null {\n  const tx = typeof transaction === 'string' ? decode(transaction) : transaction\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- converts LastLedgSeq to number if present.\n  return tx.LastLedgerSequence as number | null\n}\n\n// checks if the transaction is an AccountDelete transaction\nfunction isAccountDelete(transaction: Transaction | string): boolean {\n  const tx = typeof transaction === 'string' ? decode(transaction) : transaction\n  return tx.TransactionType === 'AccountDelete'\n}\n", "import { xAddressToClassicAddress, isValidXAddress } from 'ripple-address-codec'\n\n/**\n * If an address is an X-Address, converts it to a classic address.\n *\n * @param account - A classic address or X-address.\n * @returns The account's classic address.\n * @throws Error if the X-Address has an associated tag.\n */\nexport function ensureClassicAddress(account: string): string {\n  if (isValidXAddress(account)) {\n    const { classicAddress, tag } = xAddressToClassicAddress(account)\n\n    /*\n     * Except for special cases, X-addresses used for requests\n     * must not have an embedded tag. In other words,\n     * `tag` should be `false`.\n     */\n    if (tag !== false) {\n      throw new Error(\n        'This command does not support the use of a tag. Use an address without a tag.',\n      )\n    }\n\n    // For rippled requests that use an account, always use a classic address.\n    return classicAddress\n  }\n  return account\n}\n", "export * from './submit'\n\nexport * from './utils'\n", "import BigNumber from 'bignumber.js'\n\nimport { type Client } from '..'\nimport { XrplError } from '../errors'\n\nconst NUM_DECIMAL_PLACES = 6\nconst BASE_10 = 10\n\n/**\n * Calculates the current transaction fee for the ledger.\n * Note: This is a public API that can be called directly.\n *\n * @param client - The Client used to connect to the ledger.\n * @param cushion - The fee cushion to use.\n * @returns The transaction fee.\n */\nexport default async function getFeeXrp(\n  client: Client,\n  cushion?: number,\n): Promise<string> {\n  const feeCushion = cushion ?? client.feeCushion\n\n  const serverInfo = (\n    await client.request({\n      command: 'server_info',\n    })\n  ).result.info\n\n  const baseFee = serverInfo.validated_ledger?.base_fee_xrp\n\n  if (baseFee == null) {\n    throw new XrplError(\n      'getFeeXrp: Could not get base_fee_xrp from server_info',\n    )\n  }\n\n  const baseFeeXrp = new BigNumber(baseFee)\n  if (serverInfo.load_factor == null) {\n    // https://github.com/ripple/rippled/issues/3812#issuecomment-816871100\n    serverInfo.load_factor = 1\n  }\n  let fee = baseFeeXrp.times(serverInfo.load_factor).times(feeCushion)\n\n  // Cap fee to `client.maxFeeXRP`\n  fee = BigNumber.min(fee, client.maxFeeXRP)\n  // Round fee to 6 decimal places\n  return new BigNumber(fee.toFixed(NUM_DECIMAL_PLACES)).toString(BASE_10)\n}\n", "import BigNumber from 'bignumber.js'\nimport { xAddressToClassicAddress, isValidXAddress } from 'ripple-address-codec'\n\nimport { type Client } from '..'\nimport { ValidationError, XrplError } from '../errors'\nimport { AccountInfoRequest, AccountObjectsRequest } from '../models/methods'\nimport { Transaction } from '../models/transactions'\nimport { xrpToDrops } from '../utils'\n\nimport getFeeXrp from './getFeeXrp'\n\n// Expire unconfirmed transactions after 20 ledger versions, approximately 1 minute, by default\nconst LEDGER_OFFSET = 20\n// Sidechains are expected to have network IDs above this.\n// Networks with ID above this restricted number are expected specify an accurate NetworkID field\n// in every transaction to that chain to prevent replay attacks.\n// Mainnet and testnet are exceptions. More context: https://github.com/XRPLF/rippled/pull/4370\nconst RESTRICTED_NETWORKS = 1024\nconst REQUIRED_NETWORKID_VERSION = '1.11.0'\n\n/**\n * Determines whether the source rippled version is not later than the target rippled version.\n * Example usage: isNotLaterRippledVersion('1.10.0', '1.11.0') returns true.\n *                isNotLaterRippledVersion('1.10.0', '1.10.0-b1') returns false.\n *\n * @param source -- The source rippled version.\n * @param target -- The target rippled version.\n * @returns True if source is earlier than target, false otherwise.\n */\n// eslint-disable-next-line max-lines-per-function, max-statements -- Disable for this helper functions.\nfunction isNotLaterRippledVersion(source: string, target: string): boolean {\n  if (source === target) {\n    return true\n  }\n  const sourceDecomp = source.split('.')\n  const targetDecomp = target.split('.')\n  const sourceMajor = parseInt(sourceDecomp[0], 10)\n  const sourceMinor = parseInt(sourceDecomp[1], 10)\n  const targetMajor = parseInt(targetDecomp[0], 10)\n  const targetMinor = parseInt(targetDecomp[1], 10)\n  // Compare major version\n  if (sourceMajor !== targetMajor) {\n    return sourceMajor < targetMajor\n  }\n  // Compare minor version\n  if (sourceMinor !== targetMinor) {\n    return sourceMinor < targetMinor\n  }\n  const sourcePatch = sourceDecomp[2].split('-')\n  const targetPatch = targetDecomp[2].split('-')\n\n  const sourcePatchVersion = parseInt(sourcePatch[0], 10)\n  const targetPatchVersion = parseInt(targetPatch[0], 10)\n\n  // Compare patch version\n  if (sourcePatchVersion !== targetPatchVersion) {\n    return sourcePatchVersion < targetPatchVersion\n  }\n\n  // Compare release version\n  if (sourcePatch.length !== targetPatch.length) {\n    return sourcePatch.length > targetPatch.length\n  }\n\n  if (sourcePatch.length === 2) {\n    // Compare different release types\n    if (!sourcePatch[1][0].startsWith(targetPatch[1][0])) {\n      return sourcePatch[1] < targetPatch[1]\n    }\n    // Compare beta version\n    if (sourcePatch[1].startsWith('b')) {\n      return (\n        parseInt(sourcePatch[1].slice(1), 10) <\n        parseInt(targetPatch[1].slice(1), 10)\n      )\n    }\n    // Compare rc version\n    return (\n      parseInt(sourcePatch[1].slice(2), 10) <\n      parseInt(targetPatch[1].slice(2), 10)\n    )\n  }\n\n  return false\n}\n\n/**\n * Determine if the transaction required a networkID to be valid.\n * Transaction needs networkID if later than restricted ID and build version is >= 1.11.0\n *\n * @param client -- The connected client.\n * @returns True if required networkID, false otherwise.\n */\nexport function txNeedsNetworkID(client: Client): boolean {\n  if (\n    client.networkID !== undefined &&\n    client.networkID > RESTRICTED_NETWORKS\n  ) {\n    if (\n      client.buildVersion &&\n      isNotLaterRippledVersion(REQUIRED_NETWORKID_VERSION, client.buildVersion)\n    ) {\n      return true\n    }\n  }\n  return false\n}\n\ninterface ClassicAccountAndTag {\n  classicAccount: string\n  tag: number | false | undefined\n}\n\n/**\n * Sets valid addresses for the transaction.\n *\n * @param tx - The transaction object.\n */\nexport function setValidAddresses(tx: Transaction): void {\n  validateAccountAddress(tx, 'Account', 'SourceTag')\n  // eslint-disable-next-line @typescript-eslint/dot-notation -- Destination can exist on Transaction\n  if (tx['Destination'] != null) {\n    validateAccountAddress(tx, 'Destination', 'DestinationTag')\n  }\n\n  // DepositPreauth:\n  convertToClassicAddress(tx, 'Authorize')\n  convertToClassicAddress(tx, 'Unauthorize')\n  // EscrowCancel, EscrowFinish:\n  convertToClassicAddress(tx, 'Owner')\n  // SetRegularKey:\n  convertToClassicAddress(tx, 'RegularKey')\n}\n\n/**\n * Validates the account address in a transaction object.\n *\n * @param tx - The transaction object.\n * @param accountField - The field name for the account address in the transaction object.\n * @param tagField - The field name for the tag in the transaction object.\n * @throws {ValidationError} If the tag field does not match the tag of the account address.\n */\nfunction validateAccountAddress(\n  tx: Transaction,\n  accountField: string,\n  tagField: string,\n): void {\n  // if X-address is given, convert it to classic address\n  const { classicAccount, tag } = getClassicAccountAndTag(tx[accountField])\n  // eslint-disable-next-line no-param-reassign -- param reassign is safe\n  tx[accountField] = classicAccount\n\n  if (tag != null && tag !== false) {\n    if (tx[tagField] && tx[tagField] !== tag) {\n      throw new ValidationError(\n        `The ${tagField}, if present, must match the tag of the ${accountField} X-address`,\n      )\n    }\n    // eslint-disable-next-line no-param-reassign -- param reassign is safe\n    tx[tagField] = tag\n  }\n}\n\n/**\n * Retrieves the classic account and tag from an account address.\n *\n * @param Account - The account address.\n * @param [expectedTag] - The expected tag for the account address.\n * @returns The classic account and tag.\n * @throws {ValidationError} If the address includes a tag that does not match the tag specified in the transaction.\n */\nfunction getClassicAccountAndTag(\n  Account: string,\n  expectedTag?: number,\n): ClassicAccountAndTag {\n  if (isValidXAddress(Account)) {\n    const classic = xAddressToClassicAddress(Account)\n    if (expectedTag != null && classic.tag !== expectedTag) {\n      throw new ValidationError(\n        'address includes a tag that does not match the tag specified in the transaction',\n      )\n    }\n    return {\n      classicAccount: classic.classicAddress,\n      tag: classic.tag,\n    }\n  }\n  return {\n    classicAccount: Account,\n    tag: expectedTag,\n  }\n}\n\n/**\n * Converts the specified field of a transaction object to a classic address format.\n *\n * @param tx - The transaction object.\n * @param fieldName - The name of the field to convert.export\n */\nfunction convertToClassicAddress(tx: Transaction, fieldName: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- assignment is safe\n  const account = tx[fieldName]\n  if (typeof account === 'string') {\n    const { classicAccount } = getClassicAccountAndTag(account)\n    // eslint-disable-next-line no-param-reassign -- param reassign is safe\n    tx[fieldName] = classicAccount\n  }\n}\n\n/**\n * Sets the next valid sequence number for a transaction.\n *\n * @param client - The client object used for making requests.\n * @param tx - The transaction object for which the sequence number needs to be set.\n * @returns A Promise that resolves when the sequence number is set.\n * @throws {Error} If there is an error retrieving the account information.\n */\nexport async function setNextValidSequenceNumber(\n  client: Client,\n  tx: Transaction,\n): Promise<void> {\n  const request: AccountInfoRequest = {\n    command: 'account_info',\n    account: tx.Account,\n    ledger_index: 'current',\n  }\n  const data = await client.request(request)\n  // eslint-disable-next-line no-param-reassign, require-atomic-updates -- param reassign is safe with no race condition\n  tx.Sequence = data.result.account_data.Sequence\n}\n\n/**\n * Fetches the owner reserve fee from the server state using the provided client.\n *\n * @param client - The client object used to make the request.\n * @returns A Promise that resolves to the owner reserve fee as a BigNumber.\n * @throws {Error} Throws an error if the owner reserve fee cannot be fetched.\n */\nasync function fetchOwnerReserveFee(client: Client): Promise<BigNumber> {\n  const response = await client.request({ command: 'server_state' })\n  const fee = response.result.state.validated_ledger?.reserve_inc\n\n  if (fee == null) {\n    return Promise.reject(new Error('Could not fetch Owner Reserve.'))\n  }\n\n  return new BigNumber(fee)\n}\n\n/**\n * Calculates the fee per transaction type.\n *\n * @param client - The client object.\n * @param tx - The transaction object.\n * @param [signersCount=0] - The number of signers (default is 0). Only used for multisigning.\n * @returns A promise that resolves with void. Modifies the `tx` parameter to give it the calculated fee.\n */\nexport async function calculateFeePerTransactionType(\n  client: Client,\n  tx: Transaction,\n  signersCount = 0,\n): Promise<void> {\n  const netFeeXRP = await getFeeXrp(client)\n  const netFeeDrops = xrpToDrops(netFeeXRP)\n  let baseFee = new BigNumber(netFeeDrops)\n\n  // EscrowFinish Transaction with Fulfillment\n  if (tx.TransactionType === 'EscrowFinish' && tx.Fulfillment != null) {\n    const fulfillmentBytesSize: number = Math.ceil(tx.Fulfillment.length / 2)\n    // BaseFee × (33 + (Fulfillment size in bytes / 16))\n    baseFee = new BigNumber(\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers -- expected use of magic numbers\n      scaleValue(netFeeDrops, 33 + fulfillmentBytesSize / 16),\n    )\n  }\n\n  const isSpecialTxCost = ['AccountDelete', 'AMMCreate'].includes(\n    tx.TransactionType,\n  )\n\n  if (isSpecialTxCost) {\n    baseFee = await fetchOwnerReserveFee(client)\n  }\n\n  /*\n   * Multi-signed Transaction\n   * BaseFee × (1 + Number of Signatures Provided)\n   */\n  if (signersCount > 0) {\n    baseFee = BigNumber.sum(baseFee, scaleValue(netFeeDrops, 1 + signersCount))\n  }\n\n  const maxFeeDrops = xrpToDrops(client.maxFeeXRP)\n  const totalFee = isSpecialTxCost\n    ? baseFee\n    : BigNumber.min(baseFee, maxFeeDrops)\n\n  // Round up baseFee and return it as a string\n  // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-magic-numbers, require-atomic-updates -- safe reassignment.\n  tx.Fee = totalFee.dp(0, BigNumber.ROUND_CEIL).toString(10)\n}\n\n/**\n * Scales the given value by multiplying it with the provided multiplier.\n *\n * @param value - The value to be scaled.\n * @param multiplier - The multiplier to scale the value.\n * @returns The scaled value as a string.\n */\nfunction scaleValue(value, multiplier): string {\n  return new BigNumber(value).times(multiplier).toString()\n}\n\n/**\n * Sets the latest validated ledger sequence for the transaction.\n *\n * @param client - The client object.\n * @param tx - The transaction object.\n * @returns A promise that resolves with void. Modifies the `tx` parameter setting `LastLedgerSequence`.\n */\nexport async function setLatestValidatedLedgerSequence(\n  client: Client,\n  tx: Transaction,\n): Promise<void> {\n  const ledgerSequence = await client.getLedgerIndex()\n  // eslint-disable-next-line no-param-reassign -- param reassign is safe\n  tx.LastLedgerSequence = ledgerSequence + LEDGER_OFFSET\n}\n\n/**\n * Checks for any blockers that prevent the deletion of an account.\n *\n * @param client - The client object.\n * @param tx - The transaction object.\n * @returns A promise that resolves with void if there are no blockers, or rejects with an XrplError if there are blockers.\n */\nexport async function checkAccountDeleteBlockers(\n  client: Client,\n  tx: Transaction,\n): Promise<void> {\n  const request: AccountObjectsRequest = {\n    command: 'account_objects',\n    account: tx.Account,\n    ledger_index: 'validated',\n    deletion_blockers_only: true,\n  }\n  const response = await client.request(request)\n  return new Promise((resolve, reject) => {\n    if (response.result.account_objects.length > 0) {\n      reject(\n        new XrplError(\n          `Account ${tx.Account} cannot be deleted; there are Escrows, PayChannels, RippleStates, or Checks associated with the account.`,\n          response.result.account_objects,\n        ),\n      )\n    }\n    resolve()\n  })\n}\n", "import { AccountLinesTrustline, Balance } from '../models'\n\n/**\n * Formats an array of trustlines into an array of balances.\n *\n * @param trustlines - The array of trustlines to format.\n * @returns An array of balances, each containing the value, currency, and issuer.\n */\nexport function formatBalances(trustlines: AccountLinesTrustline[]): Balance[] {\n  return trustlines.map((trustline) => ({\n    value: trustline.balance,\n    currency: trustline.currency,\n    issuer: trustline.account,\n  }))\n}\n", "import { Amount } from '../common'\n\nimport { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\nexport default interface Offer extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'Offer'\n  /** A bit-map of boolean flags enabled for this Offer. */\n  Flags: number\n  /** The address of the account that placed this Offer. */\n  Account: string\n  /**\n   * The Sequence value of the OfferCreate transaction that created this Offer\n   * object. Used in combination with the Account to identify this Offer.\n   */\n  Sequence: number\n  /** The remaining amount and type of currency requested by the Offer creator. */\n  TakerPays: Amount\n  /**\n   * The remaining amount and type of currency being provided by the Offer\n   * creator.\n   */\n  TakerGets: Amount\n  /** The ID of the Offer Directory that links to this Offer. */\n  BookDirectory: string\n  /**\n   * A hint indicating which page of the Offer Directory links to this object,\n   * in case the directory consists of multiple pages.\n   */\n  BookNode: string\n  /**\n   * A hint indicating which page of the Owner Directory links to this object,\n   * in case the directory consists of multiple pages.\n   */\n  OwnerNode: string\n  /** The time this Offer expires, in seconds since the Ripple Epoch. */\n  Expiration?: number\n}\n\nexport enum OfferFlags {\n  lsfPassive = 0x00010000,\n  lsfSell = 0x00020000,\n}\n", "import BigNumber from 'bignumber.js'\n\nimport type { Client } from '../client'\nimport { ValidationError } from '../errors'\nimport { LedgerIndex } from '../models/common'\nimport { OfferFlags } from '../models/ledger/Offer'\nimport {\n  BookOffer,\n  BookOfferCurrency,\n  BookOffersRequest,\n} from '../models/methods/bookOffers'\n\nconst DEFAULT_LIMIT = 20\n\nfunction sortOffers(offers: BookOffer[]): BookOffer[] {\n  return offers.sort((offerA, offerB) => {\n    const qualityA = offerA.quality ?? 0\n    const qualityB = offerB.quality ?? 0\n\n    return new BigNumber(qualityA).comparedTo(qualityB)\n  })\n}\n\nconst getOrderbookOptionsSet = new Set([\n  'limit',\n  'ledger_index',\n  'ledger_hash',\n  'taker',\n])\n\n/**\n * Represents the options for retrieving the order book.\n */\nexport interface GetOrderBookOptions {\n  /**\n   * The limit on the number of offers to return.\n   */\n  limit?: number\n  /**\n   * The ledger index of the ledger to use.\n   */\n  ledger_index?: LedgerIndex\n  /**\n   * The ledger hash of the ledger to use.\n   */\n  ledger_hash?: string | null\n  /**\n   * The account that takes the offers.\n   */\n  taker?: string | null\n}\n\n/**\n * Validates the options for retrieving the order book.\n *\n * @param options - The options to validate.\n * @throws {ValidationError} If any validation errors occur.\n */\n// eslint-disable-next-line complexity -- Necessary for validation.\nexport function validateOrderbookOptions(options: GetOrderBookOptions): void {\n  for (const key of Object.keys(options)) {\n    if (!getOrderbookOptionsSet.has(key)) {\n      throw new ValidationError(`Unexpected option: ${key}`, options)\n    }\n  }\n\n  if (options.limit && typeof options.limit !== 'number') {\n    throw new ValidationError('limit must be a number', options.limit)\n  }\n\n  if (\n    options.ledger_index &&\n    !(\n      typeof options.ledger_index === 'number' ||\n      (typeof options.ledger_index === 'string' &&\n        ['validated', 'closed', 'current'].includes(options.ledger_index))\n    )\n  ) {\n    throw new ValidationError(\n      'ledger_index must be a number or a string of \"validated\", \"closed\", or \"current\"',\n      options.ledger_index,\n    )\n  }\n\n  if (\n    options.ledger_hash !== undefined &&\n    options.ledger_hash !== null &&\n    typeof options.ledger_hash !== 'string'\n  ) {\n    throw new ValidationError(\n      'ledger_hash must be a string',\n      options.ledger_hash,\n    )\n  }\n\n  if (options.taker !== undefined && typeof options.taker !== 'string') {\n    throw new ValidationError('taker must be a string', options.taker)\n  }\n}\n\n/**\n * Creates a request object for retrieving book offers.\n *\n * @param currency1 - The first currency in the pair.\n * @param currency2 - The second currency in the pair.\n * @param options - Additional options for the request.\n * @param [options.limit] - The maximum number of offers to retrieve.\n * @param [options.ledger_index] - The ledger index to use for retrieval.\n * @param [options.ledger_hash] - The ledger hash to use for retrieval.\n * @param [options.taker] - The taker address for retrieval.\n * @returns The created request object.\n */\nexport function createBookOffersRequest(\n  currency1: BookOfferCurrency,\n  currency2: BookOfferCurrency,\n  options: {\n    limit?: number\n    ledger_index?: LedgerIndex\n    ledger_hash?: string | null\n    taker?: string | null\n  },\n): BookOffersRequest {\n  const request: BookOffersRequest = {\n    command: 'book_offers',\n    taker_pays: currency1,\n    taker_gets: currency2,\n    ledger_index: options.ledger_index ?? 'validated',\n    ledger_hash: options.ledger_hash === null ? undefined : options.ledger_hash,\n    limit: options.limit ?? DEFAULT_LIMIT,\n    taker: options.taker ? options.taker : undefined,\n  }\n\n  return request\n}\n\ntype BookOfferResult = BookOffer[]\n\n/**\n * Retrieves all book offer results using the given request.\n *\n * @param client - The Ripple client.\n * @param request - The request object.\n * @returns The array of book offer results.\n */\nexport async function requestAllOffers(\n  client: Client,\n  request: BookOffersRequest,\n): Promise<BookOfferResult[]> {\n  const results = await client.requestAll(request)\n  return results.map((result) => result.result.offers)\n}\n\n/**\n * Creates a reverse request object by swapping the taker pays and taker gets amounts.\n *\n * @param request - The original request object.\n * @returns The reverse request object.\n */\nexport function reverseRequest(request: BookOffersRequest): BookOffersRequest {\n  return {\n    ...request,\n    taker_pays: request.taker_gets,\n    taker_gets: request.taker_pays,\n  }\n}\n\n/**\n * Extracts the offers from the book offer results.\n *\n * @param offerResults - The array of book offer results.\n * @returns The extracted offers.\n */\nexport function extractOffers(offerResults: BookOfferResult[]): BookOffer[] {\n  return offerResults.flatMap((offerResult) => offerResult)\n}\n\n/**\n * Combines the direct and reverse offers into a single array.\n *\n * @param directOffers - The direct offers.\n * @param reverseOffers - The reverse offers.\n * @returns The combined array of offers.\n */\nexport function combineOrders(\n  directOffers: BookOffer[],\n  reverseOffers: BookOffer[],\n): BookOffer[] {\n  return [...directOffers, ...reverseOffers]\n}\n\n/**\n * Separates the buy and sell orders from the given array of orders.\n *\n * @param orders - The array of orders.\n * @returns The separated buy and sell orders.\n */\nexport function separateBuySellOrders(orders: BookOffer[]): {\n  buy: BookOffer[]\n  sell: BookOffer[]\n} {\n  const buy: BookOffer[] = []\n  const sell: BookOffer[] = []\n\n  orders.forEach((order) => {\n    // eslint-disable-next-line no-bitwise -- necessary for flags check\n    if ((order.Flags & OfferFlags.lsfSell) === 0) {\n      buy.push(order)\n    } else {\n      sell.push(order)\n    }\n  })\n\n  return { buy, sell }\n}\n\n/**\n * Sorts and limits the given array of offers.\n *\n * @param offers - The array of offers to sort and limit.\n * @param [limit] - The maximum number of offers to include.\n * @returns The sorted and limited array of offers.\n */\nexport function sortAndLimitOffers(\n  offers: BookOffer[],\n  limit?: number,\n): BookOffer[] {\n  const sortedOffers = sortOffers(offers)\n  return sortedOffers.slice(0, limit)\n}\n", "/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { mod } from '@noble/curves/abstract/modular';\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/legacy';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport {\n  abytes,\n  bytesToHex,\n  concatBytes,\n  createView,\n  hexToBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils';\nimport { createBase58check } from '@scure/base';\n\nconst Point = secp.ProjectivePoint;\nconst base58check = createBase58check(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\n  return BigInt('0x' + h);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions?: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode?: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    abytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n          seed.length\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\n        throw new Error('invalid child index: ' + c);\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    abytes(hash, 32);\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    abytes(hash, 32);\n    abytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    abytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n", "/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n", "\"use strict\";\n/**\n * Audited & minimal JS implementation of\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @module\n * @example\n```js\nimport * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nconst mn = bip39.generateMnemonic(wordlist);\nconsole.log(mn);\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\nbip39.entropyToMnemonic(ent, wordlist);\nbip39.validateMnemonic(mn, wordlist);\nawait bip39.mnemonicToSeed(mn, 'password');\nbip39.mnemonicToSeedSync(mn, 'password');\n\n// Wordlists\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\n```\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateMnemonic = generateMnemonic;\nexports.mnemonicToEntropy = mnemonicToEntropy;\nexports.entropyToMnemonic = entropyToMnemonic;\nexports.validateMnemonic = validateMnemonic;\nexports.mnemonicToSeed = mnemonicToSeed;\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha2_1 = require(\"@noble/hashes/sha2\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst base_1 = require(\"@scure/base\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction aentropy(ent) {\n    (0, utils_1.abytes)(ent, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    (0, utils_1.anumber)(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha2_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error('wordlist: non-string element: ' + i);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    aentropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    aentropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha2_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha2_1.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordlist = void 0;\nexports.wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n", "enum ECDSA {\n  ed25519 = 'ed25519',\n  secp256k1 = 'ecdsa-secp256k1',\n}\n\nexport default ECDSA\n", "import {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isNumber,\n  validateBaseTransaction,\n  validateCredentialsList,\n  validateOptionalField,\n  validateRequiredField,\n  MAX_AUTHORIZED_CREDENTIALS,\n} from './common'\n\n/**\n * An AccountDelete transaction deletes an account and any objects it owns in\n * the XRP Ledger, if possible, sending the account's remaining XRP to a\n * specified destination account.\n *\n * @category Transaction Models\n */\nexport interface AccountDelete extends BaseTransaction {\n  TransactionType: 'AccountDelete'\n  /**\n   * The address of an account to receive any leftover XRP after deleting the\n   * sending account. Must be a funded account in the ledger, and must not be.\n   * the sending account.\n   */\n  Destination: Account\n  /**\n   * Arbitrary destination tag that identifies a hosted recipient or other.\n   * information for the recipient of the deleted account's leftover XRP.\n   */\n  DestinationTag?: number\n  /**\n   * Credentials associated with sender of this transaction. The credentials included\n   * must not be expired. The list must not be empty when specified and cannot contain\n   * more than 8 credentials.\n   */\n  CredentialIDs?: string[]\n}\n\n/**\n * Verify the form and type of an AccountDelete at runtime.\n *\n * @param tx - An AccountDelete Transaction.\n * @throws When the AccountDelete is Malformed.\n */\nexport function validateAccountDelete(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  validateCredentialsList(\n    tx.CredentialIDs,\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- known from base check\n    tx.TransactionType as string,\n    true,\n    MAX_AUTHORIZED_CREDENTIALS,\n  )\n}\n", "import { ValidationError } from '../../errors'\nimport { AuthAccount, Currency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  isCurrency,\n  validateBaseTransaction,\n} from './common'\n\nconst MAX_AUTH_ACCOUNTS = 4\n\n/**\n * Bid on an Automated Market Maker's (AMM's) auction slot.\n *\n * If you win, you can trade against the AMM at a discounted fee until you are outbid or 24 hours have passed.\n * If you are outbid before 24 hours have passed, you are refunded part of the cost of your bid based on how much time remains.\n * You bid using the AMM's LP Tokens; the amount of a winning bid is returned to the AMM,\n * decreasing the outstanding balance of LP Tokens.\n */\nexport interface AMMBid extends BaseTransaction {\n  TransactionType: 'AMMBid'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * Pay at least this LPToken amount for the slot.\n   * Setting this value higher makes it harder for others to outbid you.\n   * If omitted, pay the minimum necessary to win the bid.\n   */\n  BidMin?: IssuedCurrencyAmount\n\n  /**\n   * Pay at most this LPToken amount for the slot.\n   * If the cost to win the bid is higher than this amount, the transaction fails.\n   * If omitted, pay as much as necessary to win the bid.\n   */\n  BidMax?: IssuedCurrencyAmount\n\n  /**\n   * A list of up to 4 additional accounts that you allow to trade at the discounted fee.\n   * This cannot include the address of the transaction sender.\n   */\n  AuthAccounts?: AuthAccount[]\n}\n\n/**\n * Verify the form and type of an AMMBid at runtime.\n *\n * @param tx - An AMMBid Transaction.\n * @throws When the AMMBid is Malformed.\n */\nexport function validateAMMBid(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMBid: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMBid: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMBid: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMBid: Asset2 must be a Currency')\n  }\n\n  if (tx.BidMin != null && !isAmount(tx.BidMin)) {\n    throw new ValidationError('AMMBid: BidMin must be an Amount')\n  }\n\n  if (tx.BidMax != null && !isAmount(tx.BidMax)) {\n    throw new ValidationError('AMMBid: BidMax must be an Amount')\n  }\n\n  if (tx.AuthAccounts != null) {\n    if (!Array.isArray(tx.AuthAccounts)) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts must be an AuthAccount array`,\n      )\n    }\n    if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`,\n      )\n    }\n    validateAuthAccounts(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n      tx.Account as string,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n      tx.AuthAccounts as Array<Record<string, unknown>>,\n    )\n  }\n}\n\nfunction validateAuthAccounts(\n  senderAddress: string,\n  authAccounts: Array<Record<string, unknown>>,\n): boolean {\n  for (const authAccount of authAccounts) {\n    if (\n      authAccount.AuthAccount == null ||\n      typeof authAccount.AuthAccount !== 'object'\n    ) {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (authAccount.AuthAccount.Account == null) {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (typeof authAccount.AuthAccount.Account !== 'string') {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (authAccount.AuthAccount.Account === senderAddress) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts must not include sender's address`,\n      )\n    }\n  }\n\n  return true\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport { BaseTransaction, isAmount, validateBaseTransaction } from './common'\n\nexport const AMM_MAX_TRADING_FEE = 1000\n\n/**\n * Create a new Automated Market Maker (AMM) instance for trading a pair of assets (fungible tokens or XRP).\n *\n * Creates both an AMM object and a special AccountRoot object to represent the AMM.\n * Also transfers ownership of the starting balance of both assets from the sender to the created AccountRoot\n * and issues an initial balance of liquidity provider tokens (LP Tokens) from the AMM account to the sender.\n *\n * CAUTION: When you create the AMM, you should fund it with (approximately) equal-value amounts of each asset.\n * Otherwise, other users can profit at your expense by trading with this AMM (performing arbitrage).\n * The currency risk that liquidity providers take on increases with the volatility (potential for imbalance) of the asset pair.\n * The higher the trading fee, the more it offsets this risk,\n * so it's best to set the trading fee based on the volatility of the asset pair.\n */\nexport interface AMMCreate extends BaseTransaction {\n  TransactionType: 'AMMCreate'\n\n  /**\n   * The first of the two assets to fund this AMM with. This must be a positive amount.\n   */\n  Amount: Amount\n\n  /**\n   * The second of the two assets to fund this AMM with. This must be a positive amount.\n   */\n  Amount2: Amount\n\n  /**\n   * The fee to charge for trades against this AMM instance, in units of 1/100,000; a value of 1 is equivalent to 0.001%.\n   * The maximum value is 1000, indicating a 1% fee.\n   * The minimum value is 0.\n   */\n  TradingFee: number\n}\n\n/**\n * Verify the form and type of an AMMCreate at runtime.\n *\n * @param tx - An AMMCreate Transaction.\n * @throws When the AMMCreate is Malformed.\n */\nexport function validateAMMCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount == null) {\n    throw new ValidationError('AMMCreate: missing field Amount')\n  }\n\n  if (!isAmount(tx.Amount)) {\n    throw new ValidationError('AMMCreate: Amount must be an Amount')\n  }\n\n  if (tx.Amount2 == null) {\n    throw new ValidationError('AMMCreate: missing field Amount2')\n  }\n\n  if (!isAmount(tx.Amount2)) {\n    throw new ValidationError('AMMCreate: Amount2 must be an Amount')\n  }\n\n  if (tx.TradingFee == null) {\n    throw new ValidationError('AMMCreate: missing field TradingFee')\n  }\n\n  if (typeof tx.TradingFee !== 'number') {\n    throw new ValidationError('AMMCreate: TradingFee must be a number')\n  }\n\n  if (tx.TradingFee < 0 || tx.TradingFee > AMM_MAX_TRADING_FEE) {\n    throw new ValidationError(\n      `AMMCreate: TradingFee must be between 0 and ${AMM_MAX_TRADING_FEE}`,\n    )\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Currency } from '../common'\n\nimport { BaseTransaction, isCurrency, validateBaseTransaction } from './common'\n\n/**\n * Delete an empty Automated Market Maker (AMM) instance that could not be fully deleted automatically.\n *\n * Tip: The AMMWithdraw transaction automatically tries to delete an AMM, along with associated ledger\n * entries such as empty trust lines, if it withdrew all the assets from the AMM's pool.\n * However, if there are too many trust lines to the AMM account to remove in one transaction,\n * it may stop before fully removing the AMM. Similarly, an AMMDelete transaction removes up to\n * a maximum number of trust lines; in extreme cases, it may take several AMMDelete transactions\n * to fully delete the trust lines and the associated AMM.\n * In all cases, the AMM ledger entry and AMM account are deleted by the last such transaction.\n */\nexport interface AMMDelete extends BaseTransaction {\n  TransactionType: 'AMMDelete'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n}\n\n/**\n * Verify the form and type of an AMMDelete at runtime.\n *\n * @param tx - An AMMDelete Transaction.\n * @throws When the AMMDelete is Malformed.\n */\nexport function validateAMMDelete(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMDelete: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMDelete: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMDelete: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMDelete: Asset2 must be a Currency')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Currency } from '../common'\n\nimport { AMM_MAX_TRADING_FEE } from './AMMCreate'\nimport { BaseTransaction, isCurrency, validateBaseTransaction } from './common'\n\n/**\n * Vote on the trading fee for an Automated Market Maker (AMM) instance.\n *\n * Up to 8 accounts can vote in proportion to the amount of the AMM's LP Tokens they hold.\n * Each new vote re-calculates the AMM's trading fee based on a weighted average of the votes.\n */\nexport interface AMMVote extends BaseTransaction {\n  TransactionType: 'AMMVote'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * The proposed fee to vote for, in units of 1/100,000; a value of 1 is equivalent to 0.001%.\n   * The maximum value is 1000, indicating a 1% fee.\n   */\n  TradingFee: number\n}\n\n/**\n * Verify the form and type of an AMMVote at runtime.\n *\n * @param tx - An AMMVote Transaction.\n * @throws When the AMMVote is Malformed.\n */\nexport function validateAMMVote(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMVote: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMVote: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMVote: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMVote: Asset2 must be a Currency')\n  }\n\n  if (tx.TradingFee == null) {\n    throw new ValidationError('AMMVote: missing field TradingFee')\n  }\n\n  if (typeof tx.TradingFee !== 'number') {\n    throw new ValidationError('AMMVote: TradingFee must be a number')\n  }\n\n  if (tx.TradingFee < 0 || tx.TradingFee > AMM_MAX_TRADING_FEE) {\n    throw new ValidationError(\n      `AMMVote: TradingFee must be between 0 and ${AMM_MAX_TRADING_FEE}`,\n    )\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * Cancels an unredeemed Check, removing it from the ledger without sending any\n * money. The source or the destination of the check can cancel a Check at any\n * time using this transaction type. If the Check has expired, any address can\n * cancel it.\n *\n * @category Transaction Models\n */\nexport interface CheckCancel extends BaseTransaction {\n  TransactionType: 'CheckCancel'\n  /**\n   * The ID of the Check ledger object to cancel as a 64-character hexadecimal\n   * string.\n   */\n  CheckID: string\n}\n\n/**\n * Verify the form and type of an CheckCancel at runtime.\n *\n * @param tx - An CheckCancel Transaction.\n * @throws When the CheckCancel is Malformed.\n */\nexport function validateCheckCancel(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.CheckID !== undefined && typeof tx.CheckID !== 'string') {\n    throw new ValidationError('CheckCancel: invalid CheckID')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport { BaseTransaction, validateBaseTransaction, isAmount } from './common'\n\n/**\n * Attempts to redeem a Check object in the ledger to receive up to the amount\n * authorized by the corresponding CheckCreate transaction. Only the Destination\n * address of a Check can cash it with a CheckCash transaction.\n *\n * @category Transaction Models\n */\nexport interface CheckCash extends BaseTransaction {\n  TransactionType: 'CheckCash'\n  /**\n   * The ID of the Check ledger object to cash as a 64-character hexadecimal\n   * string.\n   */\n  CheckID: string\n  /**\n   * Redeem the Check for exactly this amount, if possible. The currency must\n   * match that of the SendMax of the corresponding CheckCreate transaction. You.\n   * must provide either this field or DeliverMin.\n   */\n  Amount?: Amount\n  /**\n   * Redeem the Check for at least this amount and for as much as possible. The\n   * currency must match that of the SendMax of the corresponding CheckCreate.\n   * transaction. You must provide either this field or Amount.\n   */\n  DeliverMin?: Amount\n}\n\n/**\n * Verify the form and type of an CheckCash at runtime.\n *\n * @param tx - An CheckCash Transaction.\n * @throws When the CheckCash is Malformed.\n */\nexport function validateCheckCash(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount == null && tx.DeliverMin == null) {\n    throw new ValidationError(\n      'CheckCash: must have either Amount or DeliverMin',\n    )\n  }\n\n  if (tx.Amount != null && tx.DeliverMin != null) {\n    throw new ValidationError(\n      'CheckCash: cannot have both Amount and DeliverMin',\n    )\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Necessary check\n  if (tx.Amount != null && tx.Amount !== undefined && !isAmount(tx.Amount)) {\n    throw new ValidationError('CheckCash: invalid Amount')\n  }\n\n  if (\n    tx.DeliverMin != null &&\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Necessary check\n    tx.DeliverMin !== undefined &&\n    !isAmount(tx.DeliverMin)\n  ) {\n    throw new ValidationError('CheckCash: invalid DeliverMin')\n  }\n\n  if (tx.CheckID !== undefined && typeof tx.CheckID !== 'string') {\n    throw new ValidationError('CheckCash: invalid CheckID')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  isIssuedCurrency,\n  isAccount,\n  validateRequiredField,\n  validateOptionalField,\n  isNumber,\n  Account,\n} from './common'\n\n/**\n * Create a Check object in the ledger, which is a deferred payment that can be\n * cashed by its intended destination. The sender of this transaction is the\n * sender of the Check.\n *\n * @category Transaction Models\n */\nexport interface CheckCreate extends BaseTransaction {\n  TransactionType: 'CheckCreate'\n  /** The unique address of the account that can cash the Check. */\n  Destination: Account\n  /**\n   * Maximum amount of source currency the Check is allowed to debit the\n   * sender, including transfer fees on non-XRP currencies. The Check can only\n   * credit the destination with the same currency (from the same issuer, for\n   * non-XRP currencies). For non-XRP amounts, the nested field names MUST be.\n   * lower-case.\n   */\n  SendMax: Amount\n  /**\n   * Arbitrary tag that identifies the reason for the Check, or a hosted.\n   * recipient to pay.\n   */\n  DestinationTag?: number\n  /**\n   * Time after which the Check is no longer valid, in seconds since the Ripple.\n   * Epoch.\n   */\n  Expiration?: number\n  /**\n   * Arbitrary 256-bit hash representing a specific reason or identifier for.\n   * this Check.\n   */\n  InvoiceID?: string\n}\n\n/**\n * Verify the form and type of an CheckCreate at runtime.\n *\n * @param tx - An CheckCreate Transaction.\n * @throws When the CheckCreate is Malformed.\n */\nexport function validateCheckCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.SendMax === undefined) {\n    throw new ValidationError('CheckCreate: missing field SendMax')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  if (\n    typeof tx.SendMax !== 'string' &&\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n    !isIssuedCurrency(tx.SendMax as Record<string, unknown>)\n  ) {\n    throw new ValidationError('CheckCreate: invalid SendMax')\n  }\n\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new ValidationError('CheckCreate: invalid Expiration')\n  }\n\n  if (tx.InvoiceID !== undefined && typeof tx.InvoiceID !== 'string') {\n    throw new ValidationError('CheckCreate: invalid InvoiceID')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount, MPTAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  isIssuedCurrency,\n  isMPTAmount,\n  isAccount,\n  validateOptionalField,\n} from './common'\n\n/**\n * The Clawback transaction is used by the token issuer to claw back\n * issued tokens from a holder.\n */\nexport interface Clawback extends BaseTransaction {\n  TransactionType: 'Clawback'\n  /**\n   * Indicates the AccountID that submitted this transaction. The account MUST\n   * be the issuer of the currency or MPT.\n   */\n  Account: string\n  /**\n   * The amount of currency or MPT to clawback, and it must be non-XRP. The nested field\n   * names MUST be lower-case. If the amount is IOU, the `issuer` field MUST be the holder's address,\n   * whom to be clawed back.\n   */\n  Amount: IssuedCurrencyAmount | MPTAmount\n  /**\n   * Indicates the AccountID that the issuer wants to clawback. This field is only valid for clawing back\n   * MPTs.\n   */\n  Holder?: string\n}\n\n/**\n * Verify the form and type of an Clawback at runtime.\n *\n * @param tx - An Clawback Transaction.\n * @throws When the Clawback is Malformed.\n */\nexport function validateClawback(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  validateOptionalField(tx, 'Holder', isAccount)\n\n  if (tx.Amount == null) {\n    throw new ValidationError('Clawback: missing field Amount')\n  }\n\n  if (!isIssuedCurrency(tx.Amount) && !isMPTAmount(tx.Amount)) {\n    throw new ValidationError('Clawback: invalid Amount')\n  }\n\n  if (isIssuedCurrency(tx.Amount) && tx.Account === tx.Amount.issuer) {\n    throw new ValidationError('Clawback: invalid holder Account')\n  }\n\n  if (isMPTAmount(tx.Amount) && tx.Account === tx.Holder) {\n    throw new ValidationError('Clawback: invalid holder Account')\n  }\n\n  if (isIssuedCurrency(tx.Amount) && tx.Holder) {\n    throw new ValidationError('Clawback: cannot have Holder for currency')\n  }\n\n  if (isMPTAmount(tx.Amount) && !tx.Holder) {\n    throw new ValidationError('Clawback: missing Holder')\n  }\n}\n", "import {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateCredentialType,\n  validateRequiredField,\n} from './common'\n\n/**\n * Accepts a credential issued to the Account (i.e. the Account is the Subject of the Credential object).\n * Credentials are represented in hex. Whilst they are allowed a maximum length of 64\n * bytes, every byte requires 2 hex characters for representation.\n * The credential is not considered valid until it has been transferred/accepted.\n *\n * @category Transaction Models\n * */\nexport interface CredentialAccept extends BaseTransaction {\n  TransactionType: 'CredentialAccept'\n\n  /** The subject of the credential. */\n  Account: string\n\n  /** The issuer of the credential. */\n  Issuer: string\n\n  /** A hex-encoded value to identify the type of credential from the issuer. */\n  CredentialType: string\n}\n\n/**\n * Verify the form and type of a CredentialAccept at runtime.\n *\n * @param tx - A CredentialAccept Transaction.\n * @throws When the CredentialAccept is Malformed.\n */\nexport function validateCredentialAccept(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Account', isString)\n\n  validateRequiredField(tx, 'Issuer', isString)\n\n  validateCredentialType(tx)\n}\n", "import { HEX_REGEX } from '@xrplf/isomorphic/utils'\n\nimport { ValidationError } from '../../errors'\n\nimport {\n  BaseTransaction,\n  isNumber,\n  isString,\n  validateBaseTransaction,\n  validateCredentialType,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\nconst MAX_URI_LENGTH = 256\n\n/**\n * Creates a Credential object. It must be sent by the issuer.\n *\n * @category Transaction Models\n * */\nexport interface CredentialCreate extends BaseTransaction {\n  TransactionType: 'CredentialCreate'\n\n  /** The issuer of the credential. */\n  Account: string\n\n  /** The subject of the credential. */\n  Subject: string\n\n  /** A hex-encoded value to identify the type of credential from the issuer. */\n  CredentialType: string\n\n  /** Credential expiration. */\n  Expiration?: number\n\n  /** Additional data about the credential (such as a link to the VC document). */\n  URI?: string\n}\n\n/**\n * Verify the form and type of a CredentialCreate at runtime.\n *\n * @param tx - A CredentialCreate Transaction.\n * @throws When the CredentialCreate is Malformed.\n */\nexport function validateCredentialCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Account', isString)\n\n  validateRequiredField(tx, 'Subject', isString)\n\n  validateCredentialType(tx)\n\n  validateOptionalField(tx, 'Expiration', isNumber)\n\n  validateURI(tx.URI)\n}\n\nfunction validateURI(URI: unknown): void {\n  if (URI === undefined) {\n    return\n  }\n\n  if (typeof URI !== 'string') {\n    throw new ValidationError('CredentialCreate: invalid field URI')\n  }\n\n  if (URI.length === 0) {\n    throw new ValidationError('CredentialCreate: URI cannot be an empty string')\n  } else if (URI.length > MAX_URI_LENGTH) {\n    throw new ValidationError(\n      `CredentialCreate: URI length must be <= ${MAX_URI_LENGTH}`,\n    )\n  }\n\n  if (!HEX_REGEX.test(URI)) {\n    throw new ValidationError('CredentialCreate: URI must be encoded in hex')\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateCredentialType,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Deletes a Credential object.\n *\n * @category Transaction Models\n * */\nexport interface CredentialDelete extends BaseTransaction {\n  TransactionType: 'CredentialDelete'\n\n  /** The transaction submitter. */\n  Account: string\n\n  /** A hex-encoded value to identify the type of credential from the issuer. */\n  CredentialType: string\n\n  /** The person that the credential is for. If omitted, Account is assumed to be the subject. */\n  Subject?: string\n\n  /** The issuer of the credential. If omitted, Account is assumed to be the issuer. */\n  Issuer?: string\n}\n\n/**\n * Verify the form and type of a CredentialDelete at runtime.\n *\n * @param tx - A CredentialDelete Transaction.\n * @throws When the CredentialDelete is Malformed.\n */\nexport function validateCredentialDelete(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (!tx.Subject && !tx.Issuer) {\n    throw new ValidationError(\n      'CredentialDelete: either `Issuer` or `Subject` must be provided',\n    )\n  }\n\n  validateRequiredField(tx, 'Account', isString)\n\n  validateCredentialType(tx)\n\n  validateOptionalField(tx, 'Subject', isString)\n\n  validateOptionalField(tx, 'Issuer', isString)\n}\n", "import { ValidationError } from '../../errors'\nimport { AuthorizeCredential } from '../common'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  validateCredentialsList,\n  MAX_AUTHORIZED_CREDENTIALS,\n} from './common'\n\n/**\n * A DepositPreauth transaction gives another account pre-approval to deliver\n * payments to the sender of this transaction. This is only useful if the sender\n * of this transaction is using (or plans to use) Deposit Authorization.\n *\n * @category Transaction Models\n */\nexport interface DepositPreauth extends BaseTransaction {\n  TransactionType: 'DepositPreauth'\n  /** The XRP Ledger address of the sender to preauthorize. */\n  Authorize?: string\n  /**\n   * The XRP Ledger address of a sender whose preauthorization should be.\n   * revoked.\n   */\n  Unauthorize?: string\n\n  /**\n   * The credential(s) to preauthorize.\n   */\n  AuthorizeCredentials?: AuthorizeCredential[]\n\n  /**\n   * The credential(s) whose preauthorization should be revoked.\n   */\n  UnauthorizeCredentials?: AuthorizeCredential[]\n}\n\n/**\n * Verify the form and type of a DepositPreauth at runtime.\n *\n * @param tx - A DepositPreauth Transaction.\n * @throws When the DepositPreauth is malformed.\n */\nexport function validateDepositPreauth(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateSingleAuthorizationFieldProvided(tx)\n\n  if (tx.Authorize !== undefined) {\n    if (typeof tx.Authorize !== 'string') {\n      throw new ValidationError('DepositPreauth: Authorize must be a string')\n    }\n\n    if (tx.Account === tx.Authorize) {\n      throw new ValidationError(\n        \"DepositPreauth: Account can't preauthorize its own address\",\n      )\n    }\n  } else if (tx.Unauthorize !== undefined) {\n    if (typeof tx.Unauthorize !== 'string') {\n      throw new ValidationError('DepositPreauth: Unauthorize must be a string')\n    }\n\n    if (tx.Account === tx.Unauthorize) {\n      throw new ValidationError(\n        \"DepositPreauth: Account can't unauthorize its own address\",\n      )\n    }\n  } else if (tx.AuthorizeCredentials !== undefined) {\n    validateCredentialsList(\n      tx.AuthorizeCredentials,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- confirmed in base transaction check\n      tx.TransactionType as string,\n      false,\n      MAX_AUTHORIZED_CREDENTIALS,\n    )\n  } else if (tx.UnauthorizeCredentials !== undefined) {\n    validateCredentialsList(\n      tx.UnauthorizeCredentials,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- confirmed in base transaction check\n      tx.TransactionType as string,\n      false,\n      MAX_AUTHORIZED_CREDENTIALS,\n    )\n  }\n}\n\n// Boolean logic to ensure exactly one of 4 inputs was provided\nfunction validateSingleAuthorizationFieldProvided(\n  tx: Record<string, unknown>,\n): void {\n  const fields = [\n    'Authorize',\n    'Unauthorize',\n    'AuthorizeCredentials',\n    'UnauthorizeCredentials',\n  ]\n  const countProvided = fields.filter((key) => tx[key] !== undefined).length\n\n  if (countProvided !== 1) {\n    throw new ValidationError(\n      'DepositPreauth: Requires exactly one field of the following: Authorize, Unauthorize, AuthorizeCredentials, UnauthorizeCredentials.',\n    )\n  }\n}\n", "import { BaseTransaction, validateBaseTransaction } from './common'\n\n// TODO: add docs\n\n/**\n * @category Transaction Models\n */\nexport interface DIDDelete extends BaseTransaction {\n  TransactionType: 'DIDDelete'\n}\n\n/**\n * Verify the form and type of a DIDDelete at runtime.\n *\n * @param tx - A DIDDelete Transaction.\n * @throws When the DIDDelete is malformed.\n */\nexport function validateDIDDelete(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateOptionalField,\n} from './common'\n\n// TODO: add docs\n\n/**\n * @category Transaction Models\n */\nexport interface DIDSet extends BaseTransaction {\n  TransactionType: 'DIDSet'\n\n  Data?: string\n\n  DIDDocument?: string\n\n  URI?: string\n}\n\n/**\n * Verify the form and type of a DIDSet at runtime.\n *\n * @param tx - A DIDSet Transaction.\n * @throws When the DIDSet is malformed.\n */\nexport function validateDIDSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateOptionalField(tx, 'Data', isString)\n\n  validateOptionalField(tx, 'DIDDocument', isString)\n\n  validateOptionalField(tx, 'URI', isString)\n\n  if (\n    tx.Data === undefined &&\n    tx.DIDDocument === undefined &&\n    tx.URI === undefined\n  ) {\n    throw new ValidationError(\n      'DIDSet: Must have at least one of `Data`, `DIDDocument`, and `URI`',\n    )\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * Return escrowed XRP to the sender.\n *\n * @category Transaction Models\n */\nexport interface EscrowCancel extends BaseTransaction {\n  TransactionType: 'EscrowCancel'\n  /** Address of the source account that funded the escrow payment. */\n  Owner: Account\n  /**\n   * Transaction sequence (or Ticket  number) of EscrowCreate transaction that.\n   * created the escrow to cancel.\n   */\n  OfferSequence: number | string\n}\n\n/**\n * Verify the form and type of an EscrowCancel at runtime.\n *\n * @param tx - An EscrowCancel Transaction.\n * @throws When the EscrowCancel is Malformed.\n */\nexport function validateEscrowCancel(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Owner', isAccount)\n\n  if (tx.OfferSequence == null) {\n    throw new ValidationError('EscrowCancel: missing OfferSequence')\n  }\n\n  if (\n    (typeof tx.OfferSequence !== 'number' &&\n      typeof tx.OfferSequence !== 'string') ||\n    Number.isNaN(Number(tx.OfferSequence))\n  ) {\n    throw new ValidationError('EscrowCancel: OfferSequence must be a number')\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isNumber,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Sequester XRP until the escrow process either finishes or is canceled.\n *\n * @category Transaction Models\n */\nexport interface EscrowCreate extends BaseTransaction {\n  TransactionType: 'EscrowCreate'\n  /**\n   * Amount of XRP, in drops, to deduct from the sender's balance and escrow.\n   * Once escrowed, the XRP can either go to the Destination address (after the.\n   * FinishAfter time) or returned to the sender (after the CancelAfter time).\n   */\n  Amount: string\n  /** Address to receive escrowed XRP. */\n  Destination: Account\n  /**\n   * The time, in seconds since the Ripple Epoch, when this escrow expires.\n   * This value is immutable; the funds can only be returned the sender after.\n   * this time.\n   */\n  CancelAfter?: number\n  /**\n   * The time, in seconds since the Ripple Epoch, when the escrowed XRP can be\n   * released to the recipient. This value is immutable; the funds cannot move.\n   * until this time is reached.\n   */\n  FinishAfter?: number\n  /**\n   * Hex value representing a PREIMAGE-SHA-256 crypto-condition . The funds can.\n   * only be delivered to the recipient if this condition is fulfilled.\n   */\n  Condition?: string\n  /**\n   * Arbitrary tag to further specify the destination for this escrowed.\n   * payment, such as a hosted recipient at the destination address.\n   */\n  DestinationTag?: number\n}\n\n/**\n * Verify the form and type of an EscrowCreate at runtime.\n *\n * @param tx - An EscrowCreate Transaction.\n * @throws When the EscrowCreate is Malformed.\n */\nexport function validateEscrowCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('EscrowCreate: missing field Amount')\n  }\n\n  if (typeof tx.Amount !== 'string') {\n    throw new ValidationError('EscrowCreate: Amount must be a string')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  if (tx.CancelAfter === undefined && tx.FinishAfter === undefined) {\n    throw new ValidationError(\n      'EscrowCreate: Either CancelAfter or FinishAfter must be specified',\n    )\n  }\n\n  if (tx.FinishAfter === undefined && tx.Condition === undefined) {\n    throw new ValidationError(\n      'EscrowCreate: Either Condition or FinishAfter must be specified',\n    )\n  }\n\n  if (tx.CancelAfter !== undefined && typeof tx.CancelAfter !== 'number') {\n    throw new ValidationError('EscrowCreate: CancelAfter must be a number')\n  }\n\n  if (tx.FinishAfter !== undefined && typeof tx.FinishAfter !== 'number') {\n    throw new ValidationError('EscrowCreate: FinishAfter must be a number')\n  }\n\n  if (tx.Condition !== undefined && typeof tx.Condition !== 'string') {\n    throw new ValidationError('EscrowCreate: Condition must be a string')\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  validateBaseTransaction,\n  validateCredentialsList,\n  validateRequiredField,\n  MAX_AUTHORIZED_CREDENTIALS,\n} from './common'\n\n/**\n * Deliver XRP from a held payment to the recipient.\n *\n * @category Transaction Models\n */\nexport interface EscrowFinish extends BaseTransaction {\n  TransactionType: 'EscrowFinish'\n  /** Address of the source account that funded the held payment. */\n  Owner: Account\n  /**\n   * Transaction sequence of EscrowCreate transaction that created the held.\n   * payment to finish.\n   */\n  OfferSequence: number | string\n  /**\n   * Hex value matching the previously-supplied PREIMAGE-SHA-256.\n   * crypto-condition of the held payment.\n   */\n  Condition?: string\n  /**\n   * Hex value of the PREIMAGE-SHA-256 crypto-condition fulfillment matching.\n   * the held payment's Condition.\n   */\n  Fulfillment?: string\n  /** Credentials associated with the sender of this transaction.\n   * The credentials included must not be expired.\n   */\n  CredentialIDs?: string[]\n}\n\n/**\n * Verify the form and type of an EscrowFinish at runtime.\n *\n * @param tx - An EscrowFinish Transaction.\n * @throws When the EscrowFinish is Malformed.\n */\nexport function validateEscrowFinish(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Owner', isAccount)\n\n  validateCredentialsList(\n    tx.CredentialIDs,\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- known from base check\n    tx.TransactionType as string,\n    true,\n    MAX_AUTHORIZED_CREDENTIALS,\n  )\n\n  if (tx.OfferSequence == null) {\n    throw new ValidationError('EscrowFinish: missing field OfferSequence')\n  }\n\n  if (\n    (typeof tx.OfferSequence !== 'number' &&\n      typeof tx.OfferSequence !== 'string') ||\n    Number.isNaN(Number(tx.OfferSequence))\n  ) {\n    throw new ValidationError('EscrowFinish: OfferSequence must be a number')\n  }\n\n  if (tx.Condition !== undefined && typeof tx.Condition !== 'string') {\n    throw new ValidationError('EscrowFinish: Condition must be a string')\n  }\n\n  if (tx.Fulfillment !== undefined && typeof tx.Fulfillment !== 'string') {\n    throw new ValidationError('EscrowFinish: Fulfillment must be a string')\n  }\n}\n", "import {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * The MPTokenIssuanceDestroy transaction is used to remove an MPTokenIssuance object\n * from the directory node in which it is being held, effectively removing the token\n * from the ledger. If this operation succeeds, the corresponding\n * MPTokenIssuance is removed and the owner’s reserve requirement is reduced by one.\n * This operation must fail if there are any holders who have non-zero balances.\n */\nexport interface MPTokenIssuanceDestroy extends BaseTransaction {\n  TransactionType: 'MPTokenIssuanceDestroy'\n  /**\n   * Identifies the MPTokenIssuance object to be removed by the transaction.\n   */\n  MPTokenIssuanceID: string\n}\n\n/**\n * Verify the form and type of an MPTokenIssuanceDestroy at runtime.\n *\n * @param tx - An MPTokenIssuanceDestroy Transaction.\n * @throws When the MPTokenIssuanceDestroy is Malformed.\n */\nexport function validateMPTokenIssuanceDestroy(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n  validateRequiredField(tx, 'MPTokenIssuanceID', isString)\n}\n", "import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport {\n  BaseTransaction,\n  parseAmountValue,\n  validateBaseTransaction,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n *  The NFTokenOfferAccept transaction is used to accept offers\n *  to buy or sell an NFToken. It can either:\n *\n *  1. Allow one offer to be accepted. This is called direct\n *     mode.\n *  2. Allow two distinct offers, one offering to buy a\n *     given NFToken and the other offering to sell the same\n *     NFToken, to be accepted in an atomic fashion. This is\n *     called brokered mode.\n *\n *  To indicate direct mode, use either the `sell_offer` or\n *  `buy_offer` fields, but not both. To indicate brokered mode,\n *  use both the `sell_offer` and `buy_offer` fields. If you use\n *  neither `sell_offer` nor `buy_offer`, the transaction is invalid.\n */\nexport interface NFTokenAcceptOffer extends BaseTransaction {\n  TransactionType: 'NFTokenAcceptOffer'\n  /**\n   *  Identifies the NFTokenOffer that offers to sell the NFToken.\n   *\n   *  In direct mode this field is optional, but either NFTokenSellOffer or\n   *  NFTokenBuyOffer must be specified. In brokered mode, both NFTokenSellOffer\n   *  and NFTokenBuyOffer must be specified.\n   */\n  NFTokenSellOffer?: string\n  /**\n   * Identifies the NFTokenOffer that offers to buy the NFToken.\n   *\n   * In direct mode this field is optional, but either NFTokenSellOffer or\n   * NFTokenBuyOffer must be specified. In brokered mode, both NFTokenSellOffer\n   * and NFTokenBuyOffer must be specified.\n   */\n  NFTokenBuyOffer?: string\n  /**\n   * This field is only valid in brokered mode. It specifies the\n   * amount that the broker will keep as part of their fee for\n   * bringing the two offers together; the remaining amount will\n   * be sent to the seller of the NFToken being bought. If\n   * specified, the fee must be such that, prior to accounting\n   * for the transfer fee charged by the issuer, the amount that\n   * the seller would receive is at least as much as the amount\n   * indicated in the sell offer.\n   *\n   * This functionality is intended to allow the owner of an\n   * NFToken to offer their token for sale to a third party\n   * broker, who may then attempt to sell the NFToken on for a\n   * larger amount, without the broker having to own the NFToken\n   * or custody funds.\n   *\n   * Note: in brokered mode, the offers referenced by NFTokenBuyOffer\n   * and NFTokenSellOffer must both specify the same NFTokenID; that is,\n   * both must be for the same NFToken.\n   */\n  NFTokenBrokerFee?: Amount\n}\n\nexport interface NFTokenAcceptOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0 or later\n  nftoken_id?: string\n}\n\nfunction validateNFTokenBrokerFee(tx: Record<string, unknown>): void {\n  const value = parseAmountValue(tx.NFTokenBrokerFee)\n  if (Number.isNaN(value)) {\n    throw new ValidationError('NFTokenAcceptOffer: invalid NFTokenBrokerFee')\n  }\n\n  if (value <= 0) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee',\n    )\n  }\n\n  if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode',\n    )\n  }\n}\n\n/**\n * Verify the form and type of an NFTokenAcceptOffer at runtime.\n *\n * @param tx - An NFTokenAcceptOffer Transaction.\n * @throws When the NFTokenAcceptOffer is Malformed.\n */\nexport function validateNFTokenAcceptOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.NFTokenBrokerFee != null) {\n    validateNFTokenBrokerFee(tx)\n  }\n\n  if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer',\n    )\n  }\n}\n", "import {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isString,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The NFTokenBurn transaction is used to remove an NFToken object from the\n * NFTokenPage in which it is being held, effectively removing the token from\n * the ledger (\"burning\" it).\n *\n * If this operation succeeds, the corresponding NFToken is removed. If this\n * operation empties the NFTokenPage holding the NFToken or results in the\n * consolidation, thus removing an NFTokenPage, the owner’s reserve requirement\n * is reduced by one.\n */\nexport interface NFTokenBurn extends BaseTransaction {\n  TransactionType: 'NFTokenBurn'\n  /**\n   * Indicates the AccountID that submitted this transaction. The account MUST\n   * be either the present owner of the token or, if the lsfBurnable flag is set\n   * in the NFToken, either the issuer account or an account authorized by the\n   * issuer, i.e. MintAccount.\n   */\n  Account: Account\n  /**\n   * Identifies the NFToken object to be removed by the transaction.\n   */\n  NFTokenID: string\n  /**\n   * Indicates which account currently owns the token if it is different than\n   * Account. Only used to burn tokens which have the lsfBurnable flag enabled\n   * and are not owned by the signing account.\n   */\n  Owner?: Account\n}\n\n/**\n * Verify the form and type of an NFTokenBurn at runtime.\n *\n * @param tx - An NFTokenBurn Transaction.\n * @throws When the NFTokenBurn is Malformed.\n */\nexport function validateNFTokenBurn(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  validateRequiredField(tx, 'NFTokenID', isString)\n  validateOptionalField(tx, 'Owner', isAccount)\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * The NFTokenCancelOffer transaction deletes existing NFTokenOffer objects.\n * It is useful if you want to free up space on your account to lower your\n * reserve requirement.\n *\n * The transaction can be executed by the account that originally created\n * the NFTokenOffer, the account in the `Recipient` field of the NFTokenOffer\n * (if present), or any account if the NFTokenOffer has an `Expiration` and\n * the NFTokenOffer has already expired.\n */\nexport interface NFTokenCancelOffer extends BaseTransaction {\n  TransactionType: 'NFTokenCancelOffer'\n  /**\n   * An array of identifiers of NFTokenOffer objects that should be cancelled\n   * by this transaction.\n   *\n   * It is an error if an entry in this list points to an\n   * object that is not an NFTokenOffer object. It is not an\n   * error if an entry in this list points to an object that\n   * does not exist. This field is required.\n   */\n  NFTokenOffers: string[]\n}\n\nexport interface NFTokenCancelOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0  or  later\n  nftoken_ids?: string[]\n}\n\n/**\n * Verify the form and type of an NFTokenCancelOffer at runtime.\n *\n * @param tx - An NFTokenCancelOffer Transaction.\n * @throws When the NFTokenCancelOffer is Malformed.\n */\nexport function validateNFTokenCancelOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (!Array.isArray(tx.NFTokenOffers)) {\n    throw new ValidationError('NFTokenCancelOffer: missing field NFTokenOffers')\n  }\n\n  if (tx.NFTokenOffers.length < 1) {\n    throw new ValidationError('NFTokenCancelOffer: empty field NFTokenOffers')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { isHex } from '../utils'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  isAccount,\n  isString,\n  validateOptionalField,\n  Account,\n  validateRequiredField,\n} from './common'\n\n/**\n * The NFTokenModify transaction modifies an NFToken's URI\n * if its tfMutable is set to true.\n */\nexport interface NFTokenModify extends BaseTransaction {\n  TransactionType: 'NFTokenModify'\n  /**\n   * Identifies the NFTokenID of the NFToken object that the\n   * offer references.\n   */\n  NFTokenID: string\n  /**\n   * Indicates the AccountID of the account that owns the corresponding NFToken.\n   * Can be omitted if the owner is the account submitting this transaction\n   */\n  Owner?: Account\n  /**\n   * URI that points to the data and/or metadata associated with the NFT.\n   * This field need not be an HTTP or HTTPS URL; it could be an IPFS URI, a\n   * magnet link, immediate data encoded as an RFC2379 \"data\" URL, or even an\n   * opaque issuer-specific encoding. The URI is NOT checked for validity, but\n   * the field is limited to a maximum length of 256 bytes.\n   *\n   * This field must be hex-encoded. You can use `convertStringToHex` to\n   * convert this field to the proper encoding.\n   *\n   * This field must not be an empty string. Omit it from the transaction or\n   * set to `null` if you do not use it.\n   */\n  URI?: string | null\n}\n\n/**\n * Verify the form and type of an NFTokenModify at runtime.\n *\n * @param tx - An NFTokenModify Transaction.\n * @throws When the NFTokenModify is Malformed.\n */\nexport function validateNFTokenModify(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'NFTokenID', isString)\n  validateOptionalField(tx, 'Owner', isAccount)\n  validateOptionalField(tx, 'URI', isString)\n\n  if (tx.URI !== undefined && typeof tx.URI === 'string') {\n    if (tx.URI === '') {\n      throw new ValidationError('NFTokenModify: URI must not be empty string')\n    }\n    if (!isHex(tx.URI)) {\n      throw new ValidationError('NFTokenModify: URI must be in hex format')\n    }\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * An OfferCancel transaction removes an Offer object from the XRP Ledger.\n *\n *  @category Transaction Models\n */\nexport interface OfferCancel extends BaseTransaction {\n  TransactionType: 'OfferCancel'\n  /**\n   * The sequence number (or Ticket number) of a previous OfferCreate\n   * transaction. If specified, cancel any offer object in the ledger that was\n   * created by that transaction. It is not considered an error if the offer.\n   * specified does not exist.\n   */\n  OfferSequence: number\n}\n\n/**\n * Verify the form and type of an OfferCancel at runtime.\n *\n * @param tx - An OfferCancel Transaction.\n * @throws When the OfferCancel is Malformed.\n */\nexport function validateOfferCancel(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.OfferSequence === undefined) {\n    throw new ValidationError('OfferCancel: missing field OfferSequence')\n  }\n\n  if (typeof tx.OfferSequence !== 'number') {\n    throw new ValidationError('OfferCancel: OfferSequence must be a number')\n  }\n}\n", "import {\n  BaseTransaction,\n  isNumber,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * Delete an Oracle ledger entry.\n *\n * @category Transaction Models\n */\nexport interface OracleDelete extends BaseTransaction {\n  TransactionType: 'OracleDelete'\n\n  /**\n   * A unique identifier of the price oracle for the Account.\n   */\n  OracleDocumentID: number\n}\n\n/**\n * Verify the form and type of a OracleDelete at runtime.\n *\n * @param tx - A OracleDelete Transaction.\n * @throws When the OracleDelete is malformed.\n */\nexport function validateOracleDelete(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'OracleDocumentID', isNumber)\n}\n", "import { ValidationError } from '../../errors'\nimport { PriceData } from '../common'\nimport { isHex } from '../utils'\n\nimport {\n  BaseTransaction,\n  isNumber,\n  isString,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\nconst PRICE_DATA_SERIES_MAX_LENGTH = 10\nconst SCALE_MAX = 10\nconst MINIMUM_ASSET_PRICE_LENGTH = 1\nconst MAXIMUM_ASSET_PRICE_LENGTH = 16\n\n/**\n * Creates a new Oracle ledger entry or updates the fields of an existing one, using the Oracle ID.\n *\n * The oracle provider must complete these steps before submitting this transaction:\n * 1. Create or own the XRPL account in the Owner field and have enough XRP to meet the reserve and transaction fee requirements.\n * 2. Publish the XRPL account public key, so it can be used for verification by dApps.\n * 3. Publish a registry of available price oracles with their unique OracleDocumentID.\n *\n * @category Transaction Models\n */\nexport interface OracleSet extends BaseTransaction {\n  TransactionType: 'OracleSet'\n\n  /**\n   * A unique identifier of the price oracle for the Account.\n   */\n  OracleDocumentID: number\n\n  /**\n   * The time the data was last updated, represented as a unix timestamp in seconds.\n   */\n  LastUpdateTime: number\n\n  /**\n   * An array of up to 10 PriceData objects, each representing the price information\n   * for a token pair. More than five PriceData objects require two owner reserves.\n   */\n  PriceDataSeries: PriceData[]\n\n  /**\n   * An arbitrary value that identifies an oracle provider, such as Chainlink, Band,\n   * or DIA. This field is a string, up to 256 ASCII hex encoded characters (0x20-0x7E).\n   * This field is required when creating a new Oracle ledger entry, but is optional for updates.\n   */\n  Provider?: string\n\n  /**\n   * An optional Universal Resource Identifier to reference price data off-chain. This field is limited to 256 bytes.\n   */\n  URI?: string\n\n  /**\n   * Describes the type of asset, such as \"currency\", \"commodity\", or \"index\". This field is a string, up to 16 ASCII\n   * hex encoded characters (0x20-0x7E). This field is required when creating a new Oracle ledger entry, but is optional\n   * for updates.\n   */\n  AssetClass?: string\n}\n\n/**\n * Verify the form and type of a OracleSet at runtime.\n *\n * @param tx - A OracleSet Transaction.\n * @throws When the OracleSet is malformed.\n */\n// eslint-disable-next-line max-lines-per-function -- necessary to validate many fields\nexport function validateOracleSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'OracleDocumentID', isNumber)\n\n  validateRequiredField(tx, 'LastUpdateTime', isNumber)\n\n  validateOptionalField(tx, 'Provider', isString)\n\n  validateOptionalField(tx, 'URI', isString)\n\n  validateOptionalField(tx, 'AssetClass', isString)\n\n  /* eslint-disable max-statements, max-lines-per-function -- necessary to validate many fields */\n  validateRequiredField(tx, 'PriceDataSeries', (value) => {\n    if (!Array.isArray(value)) {\n      throw new ValidationError('OracleSet: PriceDataSeries must be an array')\n    }\n\n    if (value.length > PRICE_DATA_SERIES_MAX_LENGTH) {\n      throw new ValidationError(\n        `OracleSet: PriceDataSeries must have at most ${PRICE_DATA_SERIES_MAX_LENGTH} PriceData objects`,\n      )\n    }\n\n    // TODO: add support for handling inner objects easier (similar to validateRequiredField/validateOptionalField)\n    for (const priceData of value) {\n      if (typeof priceData !== 'object') {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must be an array of objects',\n        )\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n      if (priceData.PriceData == null) {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must have a `PriceData` object',\n        )\n      }\n\n      // check if priceData only has PriceData\n      if (Object.keys(priceData).length !== 1) {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must only have a single PriceData object',\n        )\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n      if (typeof priceData.PriceData.BaseAsset !== 'string') {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must have a `BaseAsset` string',\n        )\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n      if (typeof priceData.PriceData.QuoteAsset !== 'string') {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must have a `QuoteAsset` string',\n        )\n      }\n\n      // Either AssetPrice and Scale are both present or both excluded\n      if (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        (priceData.PriceData.AssetPrice == null) !==\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        (priceData.PriceData.Scale == null)\n      ) {\n        throw new ValidationError(\n          'OracleSet: PriceDataSeries must have both `AssetPrice` and `Scale` if any are present',\n        )\n      }\n\n      /* eslint-disable @typescript-eslint/no-unsafe-member-access, max-depth --\n      we need to validate priceData.PriceData.AssetPrice value */\n      if ('AssetPrice' in priceData.PriceData) {\n        if (!isNumber(priceData.PriceData.AssetPrice)) {\n          if (typeof priceData.PriceData.AssetPrice !== 'string') {\n            throw new ValidationError(\n              'OracleSet: Field AssetPrice must be a string or a number',\n            )\n          }\n          if (!isHex(priceData.PriceData.AssetPrice)) {\n            throw new ValidationError(\n              'OracleSet: Field AssetPrice must be a valid hex string',\n            )\n          }\n          if (\n            priceData.PriceData.AssetPrice.length <\n              MINIMUM_ASSET_PRICE_LENGTH ||\n            priceData.PriceData.AssetPrice.length > MAXIMUM_ASSET_PRICE_LENGTH\n          ) {\n            throw new ValidationError(\n              `OracleSet: Length of AssetPrice field must be between ${MINIMUM_ASSET_PRICE_LENGTH} and ${MAXIMUM_ASSET_PRICE_LENGTH} characters long`,\n            )\n          }\n        }\n      }\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access, max-depth */\n\n      if (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        'Scale' in priceData.PriceData &&\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        !isNumber(priceData.PriceData.Scale)\n      ) {\n        throw new ValidationError('OracleSet: invalid field Scale')\n      }\n\n      if (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        priceData.PriceData.Scale < 0 ||\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- we are validating the type\n        priceData.PriceData.Scale > SCALE_MAX\n      ) {\n        throw new ValidationError(\n          `OracleSet: Scale must be in range 0-${SCALE_MAX}`,\n        )\n      }\n    }\n    return true\n  })\n  /* eslint-enable max-statements, max-lines-per-function */\n}\n", "import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isNumber,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Create a unidirectional channel and fund it with XRP. The address sending\n * this transaction becomes the \"source address\" of the payment channel.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelCreate extends BaseTransaction {\n  TransactionType: 'PaymentChannelCreate'\n  /**\n   * Amount of XRP, in drops, to deduct from the sender's balance and set aside\n   * in this channel. While the channel is open, the XRP can only go to the\n   * Destination address. When the channel closes, any unclaimed XRP is returned\n   * to the source address's balance.\n   */\n  Amount: string\n  /**\n   * Address to receive XRP claims against this channel. This is also known as\n   * the \"destination address\" for the channel.\n   */\n  Destination: Account\n  /**\n   * Amount of time the source address must wait before closing the channel if\n   * it has unclaimed XRP.\n   */\n  SettleDelay: number\n  /**\n   * The public key of the key pair the source will use to sign claims against\n   * this channel in hexadecimal. This can be any secp256k1 or ed25519 public\n   * key.\n   */\n  PublicKey: string\n  /**\n   * The time, in seconds since the Ripple Epoch, when this channel expires.\n   * Any transaction that would modify the channel after this time closes the\n   * channel without otherwise affecting it. This value is immutable; the\n   * channel can be closed earlier than this time but cannot remain open after\n   * this time.\n   */\n  CancelAfter?: number\n  /**\n   * Arbitrary tag to further specify the destination for this payment channel,\n   * such as a hosted recipient at the destination address.\n   */\n  DestinationTag?: number\n}\n\n/**\n * Verify the form and type of an PaymentChannelCreate at runtime.\n *\n * @param tx - An PaymentChannelCreate Transaction.\n * @throws When the PaymentChannelCreate is Malformed.\n */\nexport function validatePaymentChannelCreate(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing Amount')\n  }\n\n  if (typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelCreate: Amount must be a string')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  if (tx.SettleDelay === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing SettleDelay')\n  }\n\n  if (typeof tx.SettleDelay !== 'number') {\n    throw new ValidationError(\n      'PaymentChannelCreate: SettleDelay must be a number',\n    )\n  }\n\n  if (tx.PublicKey === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing PublicKey')\n  }\n\n  if (typeof tx.PublicKey !== 'string') {\n    throw new ValidationError(\n      'PaymentChannelCreate: PublicKey must be a string',\n    )\n  }\n\n  if (tx.CancelAfter !== undefined && typeof tx.CancelAfter !== 'number') {\n    throw new ValidationError(\n      'PaymentChannelCreate: CancelAfter must be a number',\n    )\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * Add additional XRP to an open payment channel, and optionally update the\n * expiration time of the channel. Only the source address of the channel can\n * use this transaction.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelFund extends BaseTransaction {\n  TransactionType: 'PaymentChannelFund'\n  /**\n   * The unique ID of the channel to fund as a 64-character hexadecimal\n   * string.\n   */\n  Channel: string\n  /**\n   * Amount of XRP in drops to add to the channel. Must be a positive amount\n   * of XRP.\n   */\n  Amount: string\n  /**\n   * New Expiration time to set for the channel in seconds since the Ripple\n   * Epoch. This must be later than either the current time plus the SettleDelay\n   * of the channel, or the existing Expiration of the channel. After the\n   * Expiration time, any transaction that would access the channel closes the\n   * channel without taking its normal action. Any unspent XRP is returned to\n   * the source address when the channel closes. (Expiration is separate from\n   * the channel's immutable CancelAfter time.) For more information, see the\n   * PayChannel ledger object type.\n   */\n  Expiration?: number\n}\n\n/**\n * Verify the form and type of an PaymentChannelFund at runtime.\n *\n * @param tx - An PaymentChannelFund Transaction.\n * @throws When the PaymentChannelFund is Malformed.\n */\nexport function validatePaymentChannelFund(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Channel === undefined) {\n    throw new ValidationError('PaymentChannelFund: missing Channel')\n  }\n\n  if (typeof tx.Channel !== 'string') {\n    throw new ValidationError('PaymentChannelFund: Channel must be a string')\n  }\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('PaymentChannelFund: missing Amount')\n  }\n\n  if (typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelFund: Amount must be a string')\n  }\n\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new ValidationError('PaymentChannelFund: Expiration must be a number')\n  }\n}\n", "import {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\nexport interface PermissionedDomainDelete extends BaseTransaction {\n  /* The transaction type (PermissionedDomainDelete). */\n  TransactionType: 'PermissionedDomainDelete'\n\n  /* The domain to delete. */\n  DomainID: string\n}\n\n/**\n * Verify the form and type of a PermissionedDomainDelete transaction.\n *\n * @param tx - The transaction to verify.\n * @throws When the transaction is malformed.\n */\nexport function validatePermissionedDomainDelete(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'DomainID', isString)\n}\n", "import { AuthorizeCredential } from '../common'\n\nimport {\n  BaseTransaction,\n  isString,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n  validateCredentialsList,\n} from './common'\n\nconst MAX_ACCEPTED_CREDENTIALS = 10\n\nexport interface PermissionedDomainSet extends BaseTransaction {\n  /* The transaction type (PermissionedDomainSet). */\n  TransactionType: 'PermissionedDomainSet'\n\n  /* The domain to modify. Must be included if modifying an existing domain. */\n  DomainID?: string\n\n  /* The credentials that are accepted by the domain. Ownership of one\n  of these credentials automatically makes you a member of the domain.\n  An empty array means deleting the field. */\n  AcceptedCredentials: AuthorizeCredential[]\n}\n\n/**\n * Validate a PermissionedDomainSet transaction.\n *\n * @param tx - The transaction to validate.\n * @throws {ValidationError} When the transaction is invalid.\n */\nexport function validatePermissionedDomainSet(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateOptionalField(tx, 'DomainID', isString)\n  validateRequiredField(\n    tx,\n    'AcceptedCredentials',\n    () => tx.AcceptedCredentials instanceof Array,\n  )\n\n  validateCredentialsList(\n    tx.AcceptedCredentials,\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- known from base check\n    tx.TransactionType as string,\n    // PermissionedDomainSet uses AuthorizeCredential nested objects only, strings are not allowed\n    false,\n    // PermissionedDomainSet uses at most 10 accepted credentials. This is different from Credential-feature transactions.\n    MAX_ACCEPTED_CREDENTIALS,\n  )\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * A SetRegularKey transaction assigns, changes, or removes the regular key\n * pair associated with an account.\n *\n * @category Transaction Models\n */\nexport interface SetRegularKey extends BaseTransaction {\n  TransactionType: 'SetRegularKey'\n  /**\n   * A base-58-encoded Address that indicates the regular key pair to be\n   * assigned to the account. If omitted, removes any existing regular key pair.\n   * from the account. Must not match the master key pair for the address.\n   */\n  RegularKey?: string\n}\n\n/**\n * Verify the form and type of a SetRegularKey at runtime.\n *\n * @param tx - A SetRegularKey Transaction.\n * @throws When the SetRegularKey is malformed.\n */\nexport function validateSetRegularKey(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.RegularKey !== undefined && typeof tx.RegularKey !== 'string') {\n    throw new ValidationError('SetRegularKey: RegularKey must be a string')\n  }\n}\n", "import { ValidationError } from '../../errors'\nimport { SignerEntry } from '../common'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * The SignerListSet transaction creates, replaces, or removes a list of\n * signers that can be used to multi-sign a transaction.\n *\n * @category Transaction Models\n */\nexport interface SignerListSet extends BaseTransaction {\n  TransactionType: 'SignerListSet'\n  /**\n   * A target number for the signer weights. A multi-signature from this list\n   * is valid only if the sum weights of the signatures provided is greater than\n   * or equal to this value. To delete a signer list, use the value 0.\n   */\n  SignerQuorum: number\n  /**\n   * Array of SignerEntry objects, indicating the addresses and weights of\n   * signers in this list. This signer list must have at least 1 member and no\n   * more than 32 members. No address may appear more than once in the list, nor\n   * may the Account submitting the transaction appear in the list.\n   */\n  SignerEntries?: SignerEntry[]\n}\n\nconst MAX_SIGNERS = 32\n\nconst HEX_WALLET_LOCATOR_REGEX = /^[0-9A-Fa-f]{64}$/u\n\n/**\n * Verify the form and type of an SignerListSet at runtime.\n *\n * @param tx - An SignerListSet Transaction.\n * @throws When the SignerListSet is Malformed.\n */\nexport function validateSignerListSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.SignerQuorum === undefined) {\n    throw new ValidationError('SignerListSet: missing field SignerQuorum')\n  }\n\n  if (typeof tx.SignerQuorum !== 'number') {\n    throw new ValidationError('SignerListSet: invalid SignerQuorum')\n  }\n\n  // All other checks are for if SignerQuorum is greater than 0\n  if (tx.SignerQuorum === 0) {\n    return\n  }\n\n  if (tx.SignerEntries === undefined) {\n    throw new ValidationError('SignerListSet: missing field SignerEntries')\n  }\n\n  if (!Array.isArray(tx.SignerEntries)) {\n    throw new ValidationError('SignerListSet: invalid SignerEntries')\n  }\n\n  if (tx.SignerEntries.length === 0) {\n    throw new ValidationError(\n      'SignerListSet: need at least 1 member in SignerEntries',\n    )\n  }\n\n  if (tx.SignerEntries.length > MAX_SIGNERS) {\n    throw new ValidationError(\n      `SignerListSet: maximum of ${MAX_SIGNERS} members allowed in SignerEntries`,\n    )\n  }\n\n  for (const entry of tx.SignerEntries) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be a SignerEntry\n    const signerEntry = entry as SignerEntry\n    const { WalletLocator } = signerEntry.SignerEntry\n    if (\n      WalletLocator !== undefined &&\n      !HEX_WALLET_LOCATOR_REGEX.test(WalletLocator)\n    ) {\n      throw new ValidationError(\n        `SignerListSet: WalletLocator in SignerEntry must be a 256-bit (32-byte) hexadecimal value`,\n      )\n    }\n  }\n}\n", "import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * A TicketCreate transaction sets aside one or more sequence numbers as\n * Tickets.\n *\n * @category Transaction Models\n */\nexport interface TicketCreate extends BaseTransaction {\n  TransactionType: 'TicketCreate'\n  /**\n   * How many Tickets to create. This must be a positive number and cannot\n   * cause the account to own more than 250 Tickets after executing this\n   * transaction.\n   */\n  TicketCount: number\n}\n\nconst MAX_TICKETS = 250\n\n/**\n * Verify the form and type of a TicketCreate at runtime.\n *\n * @param tx - A TicketCreate Transaction.\n * @throws When the TicketCreate is malformed.\n */\nexport function validateTicketCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  const { TicketCount } = tx\n\n  if (TicketCount === undefined) {\n    throw new ValidationError('TicketCreate: missing field TicketCount')\n  }\n\n  if (typeof TicketCount !== 'number') {\n    throw new ValidationError('TicketCreate: TicketCount must be a number')\n  }\n\n  if (\n    !Number.isInteger(TicketCount) ||\n    TicketCount < 1 ||\n    TicketCount > MAX_TICKETS\n  ) {\n    throw new ValidationError(\n      'TicketCreate: TicketCount must be an integer from 1 to 250',\n    )\n  }\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateRequiredField,\n  isAccount,\n  Account,\n} from './common'\n\n/**\n * The XChainAccountCreateCommit transaction creates a new account on one of the\n * chains a bridge connects, which serves as the bridge entrance for that chain.\n *\n * WARNING: This transaction should only be executed if the witness attestations\n * will be reliably delivered to the destination chain. If the signatures aren't\n * delivered, then account creation will be blocked until attestations are received.\n * This can be used maliciously; to disable this transaction on XRP-XRP bridges,\n * the bridge's MinAccountCreateAmount shouldn't be present.\n *\n * @category Transaction Models\n */\nexport interface XChainAccountCreateCommit extends BaseTransaction {\n  TransactionType: 'XChainAccountCreateCommit'\n\n  /**\n   * The bridge to create accounts for.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The amount, in XRP, to be used to reward the witness servers for providing\n   * signatures. This must match the amount on the {@link Bridge} ledger object.\n   */\n  SignatureReward: Amount\n\n  /**\n   * The destination account on the destination chain.\n   */\n  Destination: Account\n\n  /**\n   * The amount, in XRP, to use for account creation. This must be greater than or\n   * equal to the MinAccountCreateAmount specified in the {@link Bridge} ledger object.\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainAccountCreateCommit at runtime.\n *\n * @param tx - An XChainAccountCreateCommit Transaction.\n * @throws When the XChainAccountCreateCommit is malformed.\n */\nexport function validateXChainAccountCreateCommit(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateRequiredField(tx, 'Destination', isAccount)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainAddAccountCreateAttestation transaction provides an attestation\n * from a witness server that a {@link XChainAccountCreateCommit} transaction\n * occurred on the other chain.\n *\n * @category Transaction Models\n */\nexport interface XChainAddAccountCreateAttestation extends BaseTransaction {\n  TransactionType: 'XChainAddAccountCreateAttestation'\n\n  /**\n   * The amount committed by the {@link XChainAccountCreateCommit} transaction\n   * on the source chain.\n   */\n  Amount: Amount\n\n  /**\n   * The account that should receive this signer's share of the SignatureReward.\n   */\n  AttestationRewardAccount: Account\n\n  /**\n   * The account on the door account's signer list that is signing the transaction.\n   */\n  AttestationSignerAccount: Account\n\n  /**\n   * The destination account for the funds on the destination chain.\n   */\n  Destination: Account\n\n  /**\n   * The account on the source chain that submitted the {@link XChainAccountCreateCommit}\n   * transaction that triggered the event associated with the attestation.\n   */\n  OtherChainSource: Account\n\n  /**\n   * The public key used to verify the signature.\n   */\n  PublicKey: string\n\n  /**\n   * The signature attesting to the event on the other chain.\n   */\n  Signature: string\n\n  /**\n   * The signature reward paid in the {@link XChainAccountCreateCommit} transaction.\n   */\n  SignatureReward: Amount\n\n  /**\n   * A boolean representing the chain where the event occurred.\n   */\n  WasLockingChainSend: 0 | 1\n\n  /**\n   * The counter that represents the order that the claims must be processed in.\n   */\n  XChainAccountCreateCount: number | string\n\n  /**\n   * The bridge associated with the attestation.\n   */\n  XChainBridge: XChainBridge\n}\n\n/**\n * Verify the form and type of an XChainAddAccountCreateAttestation at runtime.\n *\n * @param tx - An XChainAddAccountCreateAttestation Transaction.\n * @throws When the XChainAddAccountCreateAttestation is malformed.\n */\nexport function validateXChainAddAccountCreateAttestation(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n\n  validateRequiredField(tx, 'AttestationRewardAccount', isAccount)\n\n  validateRequiredField(tx, 'AttestationSignerAccount', isAccount)\n\n  validateRequiredField(tx, 'Destination', isAccount)\n\n  validateRequiredField(tx, 'OtherChainSource', isAccount)\n\n  validateRequiredField(tx, 'PublicKey', isString)\n\n  validateRequiredField(tx, 'Signature', isString)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateRequiredField(\n    tx,\n    'WasLockingChainSend',\n    (inp) => inp === 0 || inp === 1,\n  )\n\n  validateRequiredField(\n    tx,\n    'XChainAccountCreateCount',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainAddClaimAttestation transaction provides proof from a witness server,\n * attesting to an {@link XChainCommit} transaction.\n *\n * @category Transaction Models\n */\nexport interface XChainAddClaimAttestation extends BaseTransaction {\n  TransactionType: 'XChainAddClaimAttestation'\n\n  /**\n   * The amount committed by the {@link XChainCommit} transaction on the source chain.\n   */\n  Amount: Amount\n\n  /**\n   * The account that should receive this signer's share of the SignatureReward.\n   */\n  AttestationRewardAccount: Account\n\n  /**\n   * The account on the door account's signer list that is signing the transaction.\n   */\n  AttestationSignerAccount: Account\n\n  /**\n   * The destination account for the funds on the destination chain (taken from\n   * the {@link XChainCommit} transaction).\n   */\n  Destination?: Account\n\n  /**\n   * The account on the source chain that submitted the {@link XChainCommit}\n   * transaction that triggered the event associated with the attestation.\n   */\n  OtherChainSource: Account\n\n  /**\n   * The public key used to verify the attestation signature.\n   */\n  PublicKey: string\n\n  /**\n   * The signature attesting to the event on the other chain.\n   */\n  Signature: string\n\n  /**\n   * A boolean representing the chain where the event occurred.\n   */\n  WasLockingChainSend: 0 | 1\n\n  /**\n   * The bridge to use to transfer funds.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The XChainClaimID associated with the transfer, which was included in the\n   * {@link XChainCommit} transaction.\n   */\n  XChainClaimID: number | string\n}\n\n/**\n * Verify the form and type of an XChainAddClaimAttestation at runtime.\n *\n * @param tx - An XChainAddClaimAttestation Transaction.\n * @throws When the XChainAddClaimAttestation is malformed.\n */\nexport function validateXChainAddClaimAttestation(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n\n  validateRequiredField(tx, 'AttestationRewardAccount', isAccount)\n\n  validateRequiredField(tx, 'AttestationSignerAccount', isAccount)\n\n  validateOptionalField(tx, 'Destination', isAccount)\n\n  validateRequiredField(tx, 'OtherChainSource', isAccount)\n\n  validateRequiredField(tx, 'PublicKey', isString)\n\n  validateRequiredField(tx, 'Signature', isString)\n\n  validateRequiredField(\n    tx,\n    'WasLockingChainSend',\n    (inp) => inp === 0 || inp === 1,\n  )\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainClaim transaction completes a cross-chain transfer of value. It\n * allows a user to claim the value on the destination chain - the equivalent\n * of the value locked on the source chain.\n *\n * @category Transaction Models\n */\nexport interface XChainClaim extends BaseTransaction {\n  TransactionType: 'XChainClaim'\n\n  /**\n   * The bridge to use for the transfer.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The unique integer ID for the cross-chain transfer that was referenced in the\n   * corresponding {@link XChainCommit} transaction.\n   */\n  XChainClaimID: number | string\n\n  /**\n   * The destination account on the destination chain. It must exist or the\n   * transaction will fail. However, if the transaction fails in this case, the\n   * sequence number and collected signatures won't be destroyed, and the\n   * transaction can be rerun with a different destination.\n   */\n  Destination: Account\n\n  /**\n   * An integer destination tag.\n   */\n  DestinationTag?: number\n\n  /**\n   * The amount to claim on the destination chain. This must match the amount\n   * attested to on the attestations associated with this XChainClaimID.\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainClaim at runtime.\n *\n * @param tx - An XChainClaim Transaction.\n * @throws When the XChainClaim is malformed.\n */\nexport function validateXChainClaim(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n\n  validateRequiredField(tx, 'Destination', isAccount)\n\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainCommit is the second step in a cross-chain transfer. It puts assets\n * into trust on the locking chain so that they can be wrapped on the issuing\n * chain, or burns wrapped assets on the issuing chain so that they can be returned\n * on the locking chain.\n *\n * @category Transaction Models\n */\nexport interface XChainCommit extends BaseTransaction {\n  TransactionType: 'XChainCommit'\n\n  /**\n   * The bridge to use to transfer funds.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The unique integer ID for a cross-chain transfer. This must be acquired on\n   * the destination chain (via a {@link XChainCreateClaimID} transaction) and\n   * checked from a validated ledger before submitting this transaction. If an\n   * incorrect sequence number is specified, the funds will be lost.\n   */\n  XChainClaimID: number | string\n\n  /**\n   * The destination account on the destination chain. If this is not specified,\n   * the account that submitted the {@link XChainCreateClaimID} transaction on the\n   * destination chain will need to submit a {@link XChainClaim} transaction to\n   * claim the funds.\n   */\n  OtherChainDestination?: Account\n\n  /**\n   * The asset to commit, and the quantity. This must match the door account's\n   * LockingChainIssue (if on the locking chain) or the door account's\n   * IssuingChainIssue (if on the issuing chain).\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainCommit at runtime.\n *\n * @param tx - An XChainCommit Transaction.\n * @throws When the XChainCommit is malformed.\n */\nexport function validateXChainCommit(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n\n  validateOptionalField(tx, 'OtherChainDestination', isAccount)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainCreateBridge transaction creates a new {@link Bridge} ledger object\n * and defines a new cross-chain bridge entrance on the chain that the transaction\n * is submitted on. It includes information about door accounts and assets for the\n * bridge.\n *\n * @category Transaction Models\n */\nexport interface XChainCreateBridge extends BaseTransaction {\n  TransactionType: 'XChainCreateBridge'\n\n  /**\n   * The bridge (door accounts and assets) to create.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The total amount to pay the witness servers for their signatures. This amount\n   * will be split among the signers.\n   */\n  SignatureReward: Amount\n\n  /**\n   * The minimum amount, in XRP, required for a {@link XChainAccountCreateCommit}\n   * transaction. If this isn't present, the {@link XChainAccountCreateCommit}\n   * transaction will fail. This field can only be present on XRP-XRP bridges.\n   */\n  MinAccountCreateAmount?: Amount\n}\n\n/**\n * Verify the form and type of an XChainCreateBridge at runtime.\n *\n * @param tx - An XChainCreateBridge Transaction.\n * @throws When the XChainCreateBridge is malformed.\n */\nexport function validateXChainCreateBridge(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateOptionalField(tx, 'MinAccountCreateAmount', isAmount)\n}\n", "import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainCreateClaimID transaction creates a new cross-chain claim ID that is\n * used for a cross-chain transfer. A cross-chain claim ID represents one\n * cross-chain transfer of value.\n *\n * @category Transaction Models\n */\nexport interface XChainCreateClaimID extends BaseTransaction {\n  TransactionType: 'XChainCreateClaimID'\n\n  /**\n   * The bridge to create the claim ID for.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The amount, in XRP, to reward the witness servers for providing signatures.\n   * This must match the amount on the {@link Bridge} ledger object.\n   */\n  SignatureReward: Amount\n\n  /**\n   * The account that must send the {@link XChainCommit} transaction on the source chain.\n   */\n  OtherChainSource: Account\n}\n\n/**\n * Verify the form and type of an XChainCreateClaimID at runtime.\n *\n * @param tx - An XChainCreateClaimID Transaction.\n * @throws When the XChainCreateClaimID is malformed.\n */\nexport function validateXChainCreateClaimID(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateRequiredField(tx, 'OtherChainSource', isAccount)\n}\n", "/* eslint-disable max-lines -- need to work with a lot of transactions in a switch statement */\n/* eslint-disable max-lines-per-function -- need to work with a lot of Tx verifications */\n\nimport { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount, Memo } from '../common'\nimport { isHex } from '../utils'\nimport { convertTxFlagsToNumber } from '../utils/flags'\n\nimport { AccountDelete, validateAccountDelete } from './accountDelete'\nimport { AccountSet, validateAccountSet } from './accountSet'\nimport { AMMBid, validateAMMBid } from './AMMBid'\nimport { AMMClawback, validateAMMClawback } from './AMMClawback'\nimport { AMMCreate, validateAMMCreate } from './AMMCreate'\nimport { AMMDelete, validateAMMDelete } from './AMMDelete'\nimport { AMMDeposit, validateAMMDeposit } from './AMMDeposit'\nimport { AMMVote, validateAMMVote } from './AMMVote'\nimport { AMMWithdraw, validateAMMWithdraw } from './AMMWithdraw'\nimport { CheckCancel, validateCheckCancel } from './checkCancel'\nimport { CheckCash, validateCheckCash } from './checkCash'\nimport { CheckCreate, validateCheckCreate } from './checkCreate'\nimport { Clawback, validateClawback } from './clawback'\nimport { BaseTransaction, isIssuedCurrency } from './common'\nimport { CredentialAccept, validateCredentialAccept } from './CredentialAccept'\nimport { CredentialCreate, validateCredentialCreate } from './CredentialCreate'\nimport { CredentialDelete, validateCredentialDelete } from './CredentialDelete'\nimport { DepositPreauth, validateDepositPreauth } from './depositPreauth'\nimport { DIDDelete, validateDIDDelete } from './DIDDelete'\nimport { DIDSet, validateDIDSet } from './DIDSet'\nimport { EnableAmendment } from './enableAmendment'\nimport { EscrowCancel, validateEscrowCancel } from './escrowCancel'\nimport { EscrowCreate, validateEscrowCreate } from './escrowCreate'\nimport { EscrowFinish, validateEscrowFinish } from './escrowFinish'\nimport { TransactionMetadata } from './metadata'\nimport { MPTokenAuthorize, validateMPTokenAuthorize } from './MPTokenAuthorize'\nimport {\n  MPTokenIssuanceCreate,\n  validateMPTokenIssuanceCreate,\n} from './MPTokenIssuanceCreate'\nimport {\n  MPTokenIssuanceDestroy,\n  validateMPTokenIssuanceDestroy,\n} from './MPTokenIssuanceDestroy'\nimport {\n  MPTokenIssuanceSet,\n  validateMPTokenIssuanceSet,\n} from './MPTokenIssuanceSet'\nimport {\n  NFTokenAcceptOffer,\n  validateNFTokenAcceptOffer,\n} from './NFTokenAcceptOffer'\nimport { NFTokenBurn, validateNFTokenBurn } from './NFTokenBurn'\nimport {\n  NFTokenCancelOffer,\n  validateNFTokenCancelOffer,\n} from './NFTokenCancelOffer'\nimport {\n  NFTokenCreateOffer,\n  validateNFTokenCreateOffer,\n} from './NFTokenCreateOffer'\nimport { NFTokenMint, validateNFTokenMint } from './NFTokenMint'\nimport { NFTokenModify, validateNFTokenModify } from './NFTokenModify'\nimport { OfferCancel, validateOfferCancel } from './offerCancel'\nimport { OfferCreate, validateOfferCreate } from './offerCreate'\nimport { OracleDelete, validateOracleDelete } from './oracleDelete'\nimport { OracleSet, validateOracleSet } from './oracleSet'\nimport { Payment, validatePayment } from './payment'\nimport {\n  PaymentChannelClaim,\n  validatePaymentChannelClaim,\n} from './paymentChannelClaim'\nimport {\n  PaymentChannelCreate,\n  validatePaymentChannelCreate,\n} from './paymentChannelCreate'\nimport {\n  PaymentChannelFund,\n  validatePaymentChannelFund,\n} from './paymentChannelFund'\nimport {\n  PermissionedDomainDelete,\n  validatePermissionedDomainDelete,\n} from './permissionedDomainDelete'\nimport {\n  PermissionedDomainSet,\n  validatePermissionedDomainSet,\n} from './permissionedDomainSet'\nimport { SetFee } from './setFee'\nimport { SetRegularKey, validateSetRegularKey } from './setRegularKey'\nimport { SignerListSet, validateSignerListSet } from './signerListSet'\nimport { TicketCreate, validateTicketCreate } from './ticketCreate'\nimport { TrustSet, validateTrustSet } from './trustSet'\nimport { UNLModify } from './UNLModify'\nimport {\n  XChainAccountCreateCommit,\n  validateXChainAccountCreateCommit,\n} from './XChainAccountCreateCommit'\nimport {\n  XChainAddAccountCreateAttestation,\n  validateXChainAddAccountCreateAttestation,\n} from './XChainAddAccountCreateAttestation'\nimport {\n  XChainAddClaimAttestation,\n  validateXChainAddClaimAttestation,\n} from './XChainAddClaimAttestation'\nimport { XChainClaim, validateXChainClaim } from './XChainClaim'\nimport { XChainCommit, validateXChainCommit } from './XChainCommit'\nimport {\n  XChainCreateBridge,\n  validateXChainCreateBridge,\n} from './XChainCreateBridge'\nimport {\n  XChainCreateClaimID,\n  validateXChainCreateClaimID,\n} from './XChainCreateClaimID'\nimport {\n  XChainModifyBridge,\n  validateXChainModifyBridge,\n} from './XChainModifyBridge'\n\n/**\n * Transactions that can be submitted by clients\n *\n * @category Transaction Models\n */\nexport type SubmittableTransaction =\n  | AMMBid\n  | AMMClawback\n  | AMMCreate\n  | AMMDelete\n  | AMMDeposit\n  | AMMVote\n  | AMMWithdraw\n  | AccountDelete\n  | AccountSet\n  | CheckCancel\n  | CheckCash\n  | CheckCreate\n  | Clawback\n  | CredentialAccept\n  | CredentialCreate\n  | CredentialDelete\n  | DIDDelete\n  | DIDSet\n  | DepositPreauth\n  | EscrowCancel\n  | EscrowCreate\n  | EscrowFinish\n  | MPTokenAuthorize\n  | MPTokenIssuanceCreate\n  | MPTokenIssuanceDestroy\n  | MPTokenIssuanceSet\n  | NFTokenAcceptOffer\n  | NFTokenBurn\n  | NFTokenCancelOffer\n  | NFTokenCreateOffer\n  | NFTokenMint\n  | NFTokenModify\n  | OfferCancel\n  | OfferCreate\n  | OracleDelete\n  | OracleSet\n  | Payment\n  | PaymentChannelClaim\n  | PaymentChannelCreate\n  | PaymentChannelFund\n  | PermissionedDomainSet\n  | PermissionedDomainDelete\n  | SetRegularKey\n  | SignerListSet\n  | TicketCreate\n  | TrustSet\n  | XChainAccountCreateCommit\n  | XChainAddAccountCreateAttestation\n  | XChainAddClaimAttestation\n  | XChainClaim\n  | XChainCommit\n  | XChainCreateBridge\n  | XChainCreateClaimID\n  | XChainModifyBridge\n\n/**\n * Transactions that can only be created by validators.\n *\n * @category Transaction Models\n */\nexport type PseudoTransaction = EnableAmendment | SetFee | UNLModify\n\n/**\n * All transactions that can live on the XRPL\n *\n * @category Transaction Models\n */\nexport type Transaction = SubmittableTransaction | PseudoTransaction\n\n/**\n * @category Transaction Models\n */\nexport interface TransactionAndMetadata<\n  T extends BaseTransaction = Transaction,\n> {\n  transaction: T\n  metadata: TransactionMetadata<T>\n}\n\n/**\n * Verifies various Transaction Types.\n * Encode/decode and individual type validation.\n *\n * @param transaction - A Transaction.\n * @throws ValidationError When the Transaction is malformed.\n * @category Utilities\n */\nexport function validate(transaction: Record<string, unknown>): void {\n  const tx = { ...transaction }\n  if (tx.TransactionType == null) {\n    throw new ValidationError('Object does not have a `TransactionType`')\n  }\n  if (typeof tx.TransactionType !== 'string') {\n    throw new ValidationError(\"Object's `TransactionType` is not a string\")\n  }\n\n  /*\n   * - Memos have exclusively hex data.\n   */\n  if (tx.Memos != null && typeof tx.Memos !== 'object') {\n    throw new ValidationError('Memo must be array')\n  }\n  if (tx.Memos != null) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- needed here\n    ;(tx.Memos as Array<Memo | null>).forEach((memo) => {\n      if (memo?.Memo == null) {\n        throw new ValidationError('Memo data must be in a `Memo` field')\n      }\n      if (memo.Memo.MemoData) {\n        if (!isHex(memo.Memo.MemoData)) {\n          throw new ValidationError('MemoData field must be a hex value')\n        }\n      }\n\n      if (memo.Memo.MemoType) {\n        if (!isHex(memo.Memo.MemoType)) {\n          throw new ValidationError('MemoType field must be a hex value')\n        }\n      }\n\n      if (memo.Memo.MemoFormat) {\n        if (!isHex(memo.Memo.MemoFormat)) {\n          throw new ValidationError('MemoFormat field must be a hex value')\n        }\n      }\n    })\n  }\n\n  Object.keys(tx).forEach((key) => {\n    const standard_currency_code_len = 3\n    if (tx[key] && isIssuedCurrency(tx[key])) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- needed\n      const txCurrency = (tx[key] as IssuedCurrencyAmount).currency\n\n      if (\n        txCurrency.length === standard_currency_code_len &&\n        txCurrency.toUpperCase() === 'XRP'\n      ) {\n        throw new ValidationError(\n          `Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`,\n        )\n      }\n    }\n  })\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- okay here\n  tx.Flags = convertTxFlagsToNumber(tx as unknown as Transaction)\n  switch (tx.TransactionType) {\n    case 'AMMBid':\n      validateAMMBid(tx)\n      break\n\n    case 'AMMClawback':\n      validateAMMClawback(tx)\n      break\n\n    case 'AMMCreate':\n      validateAMMCreate(tx)\n      break\n\n    case 'AMMDelete':\n      validateAMMDelete(tx)\n      break\n\n    case 'AMMDeposit':\n      validateAMMDeposit(tx)\n      break\n\n    case 'AMMVote':\n      validateAMMVote(tx)\n      break\n\n    case 'AMMWithdraw':\n      validateAMMWithdraw(tx)\n      break\n\n    case 'AccountDelete':\n      validateAccountDelete(tx)\n      break\n\n    case 'AccountSet':\n      validateAccountSet(tx)\n      break\n\n    case 'CheckCancel':\n      validateCheckCancel(tx)\n      break\n\n    case 'CheckCash':\n      validateCheckCash(tx)\n      break\n\n    case 'CheckCreate':\n      validateCheckCreate(tx)\n      break\n\n    case 'Clawback':\n      validateClawback(tx)\n      break\n\n    case 'CredentialAccept':\n      validateCredentialAccept(tx)\n      break\n\n    case 'CredentialCreate':\n      validateCredentialCreate(tx)\n      break\n\n    case 'CredentialDelete':\n      validateCredentialDelete(tx)\n      break\n\n    case 'DIDDelete':\n      validateDIDDelete(tx)\n      break\n\n    case 'DIDSet':\n      validateDIDSet(tx)\n      break\n\n    case 'DepositPreauth':\n      validateDepositPreauth(tx)\n      break\n\n    case 'EscrowCancel':\n      validateEscrowCancel(tx)\n      break\n\n    case 'EscrowCreate':\n      validateEscrowCreate(tx)\n      break\n\n    case 'EscrowFinish':\n      validateEscrowFinish(tx)\n      break\n\n    case 'MPTokenAuthorize':\n      validateMPTokenAuthorize(tx)\n      break\n\n    case 'MPTokenIssuanceCreate':\n      validateMPTokenIssuanceCreate(tx)\n      break\n\n    case 'MPTokenIssuanceDestroy':\n      validateMPTokenIssuanceDestroy(tx)\n      break\n\n    case 'MPTokenIssuanceSet':\n      validateMPTokenIssuanceSet(tx)\n      break\n\n    case 'NFTokenAcceptOffer':\n      validateNFTokenAcceptOffer(tx)\n      break\n\n    case 'NFTokenBurn':\n      validateNFTokenBurn(tx)\n      break\n\n    case 'NFTokenCancelOffer':\n      validateNFTokenCancelOffer(tx)\n      break\n\n    case 'NFTokenCreateOffer':\n      validateNFTokenCreateOffer(tx)\n      break\n\n    case 'NFTokenMint':\n      validateNFTokenMint(tx)\n      break\n\n    case 'NFTokenModify':\n      validateNFTokenModify(tx)\n      break\n\n    case 'OfferCancel':\n      validateOfferCancel(tx)\n      break\n\n    case 'OfferCreate':\n      validateOfferCreate(tx)\n      break\n\n    case 'OracleDelete':\n      validateOracleDelete(tx)\n      break\n\n    case 'OracleSet':\n      validateOracleSet(tx)\n      break\n\n    case 'Payment':\n      validatePayment(tx)\n      break\n\n    case 'PaymentChannelClaim':\n      validatePaymentChannelClaim(tx)\n      break\n\n    case 'PaymentChannelCreate':\n      validatePaymentChannelCreate(tx)\n      break\n\n    case 'PaymentChannelFund':\n      validatePaymentChannelFund(tx)\n      break\n\n    case 'PermissionedDomainSet':\n      validatePermissionedDomainSet(tx)\n      break\n\n    case 'PermissionedDomainDelete':\n      validatePermissionedDomainDelete(tx)\n      break\n\n    case 'SetRegularKey':\n      validateSetRegularKey(tx)\n      break\n\n    case 'SignerListSet':\n      validateSignerListSet(tx)\n      break\n\n    case 'TicketCreate':\n      validateTicketCreate(tx)\n      break\n\n    case 'TrustSet':\n      validateTrustSet(tx)\n      break\n\n    case 'XChainAccountCreateCommit':\n      validateXChainAccountCreateCommit(tx)\n      break\n\n    case 'XChainAddAccountCreateAttestation':\n      validateXChainAddAccountCreateAttestation(tx)\n      break\n\n    case 'XChainAddClaimAttestation':\n      validateXChainAddClaimAttestation(tx)\n      break\n\n    case 'XChainClaim':\n      validateXChainClaim(tx)\n      break\n\n    case 'XChainCommit':\n      validateXChainCommit(tx)\n      break\n\n    case 'XChainCreateBridge':\n      validateXChainCreateBridge(tx)\n      break\n\n    case 'XChainCreateClaimID':\n      validateXChainCreateClaimID(tx)\n      break\n\n    case 'XChainModifyBridge':\n      validateXChainModifyBridge(tx)\n      break\n\n    default:\n      throw new ValidationError(\n        `Invalid field TransactionType: ${tx.TransactionType}`,\n      )\n  }\n}\n", "import { BaseTransaction } from './common'\n\n/**\n * Transaction Flags for an EnableAmendment Transaction.\n *\n * @category Transaction Flags\n */\nexport enum EnableAmendmentFlags {\n  /** Support for this amendment increased to at least 80% of trusted validators starting with this ledger version. */\n  tfGotMajority = 0x00010000,\n  /** Support for this amendment decreased to less than 80% of trusted validators starting with this ledger version. */\n  tfLostMajority = 0x00020000,\n}\n\n/**\n * Mark a change in the status of a proposed amendment when it gains majority, looses majority, or is enabled.\n *\n * @category Pseudo Transaction Models\n */\nexport interface EnableAmendment extends BaseTransaction {\n  TransactionType: 'EnableAmendment'\n  /** A unique identifier for the amendment. */\n  Amendment: string\n  /** The ledger index where this pseudo-transaction appears. */\n  LedgerSequence: number\n}\n", "export { BaseTransaction, isMPTAmount } from './common'\nexport {\n  validate,\n  PseudoTransaction,\n  SubmittableTransaction,\n  TransactionAndMetadata,\n  Transaction,\n} from './transaction'\nexport * from './metadata'\nexport {\n  AccountSetAsfFlags,\n  AccountSetTfFlags,\n  AccountSetFlagsInterface,\n  AccountSet,\n} from './accountSet'\nexport { AccountDelete } from './accountDelete'\nexport { AMMBid } from './AMMBid'\nexport {\n  AMMClawbackFlags,\n  AMMClawbackFlagsInterface,\n  AMMClawback,\n} from './AMMClawback'\nexport { AMMCreate } from './AMMCreate'\nexport { AMMDelete } from './AMMDelete'\nexport {\n  AMMDepositFlags,\n  AMMDepositFlagsInterface,\n  AMMDeposit,\n} from './AMMDeposit'\nexport { AMMVote } from './AMMVote'\nexport {\n  AMMWithdrawFlags,\n  AMMWithdrawFlagsInterface,\n  AMMWithdraw,\n} from './AMMWithdraw'\nexport { CheckCancel } from './checkCancel'\nexport { CheckCash } from './checkCash'\nexport { CheckCreate } from './checkCreate'\nexport { Clawback } from './clawback'\nexport { CredentialAccept } from './CredentialAccept'\nexport { CredentialCreate } from './CredentialCreate'\nexport { CredentialDelete } from './CredentialDelete'\nexport { DIDDelete } from './DIDDelete'\nexport { DIDSet } from './DIDSet'\nexport { DepositPreauth } from './depositPreauth'\nexport { EscrowCancel } from './escrowCancel'\nexport { EscrowCreate } from './escrowCreate'\nexport { EscrowFinish } from './escrowFinish'\nexport { EnableAmendment, EnableAmendmentFlags } from './enableAmendment'\nexport {\n  MPTokenAuthorize,\n  MPTokenAuthorizeFlags,\n  MPTokenAuthorizeFlagsInterface,\n} from './MPTokenAuthorize'\nexport {\n  MPTokenIssuanceCreate,\n  MPTokenIssuanceCreateFlags,\n  MPTokenIssuanceCreateFlagsInterface,\n} from './MPTokenIssuanceCreate'\nexport { MPTokenIssuanceDestroy } from './MPTokenIssuanceDestroy'\nexport {\n  MPTokenIssuanceSet,\n  MPTokenIssuanceSetFlags,\n  MPTokenIssuanceSetFlagsInterface,\n} from './MPTokenIssuanceSet'\nexport { NFTokenAcceptOffer } from './NFTokenAcceptOffer'\nexport { NFTokenBurn } from './NFTokenBurn'\nexport { NFTokenCancelOffer } from './NFTokenCancelOffer'\nexport {\n  NFTokenCreateOffer,\n  NFTokenCreateOfferFlags,\n  NFTokenCreateOfferFlagsInterface,\n} from './NFTokenCreateOffer'\nexport {\n  NFTokenMint,\n  NFTokenMintFlags,\n  NFTokenMintFlagsInterface,\n} from './NFTokenMint'\nexport { NFTokenModify, validateNFTokenModify } from './NFTokenModify'\nexport { OfferCancel } from './offerCancel'\nexport {\n  OfferCreateFlags,\n  OfferCreateFlagsInterface,\n  OfferCreate,\n} from './offerCreate'\nexport { OracleDelete } from './oracleDelete'\nexport { OracleSet } from './oracleSet'\nexport { PaymentFlags, PaymentFlagsInterface, Payment } from './payment'\nexport {\n  PaymentChannelClaimFlags,\n  PaymentChannelClaimFlagsInterface,\n  PaymentChannelClaim,\n} from './paymentChannelClaim'\nexport { PaymentChannelCreate } from './paymentChannelCreate'\nexport { PaymentChannelFund } from './paymentChannelFund'\nexport { SetFee, SetFeePreAmendment, SetFeePostAmendment } from './setFee'\nexport { SetRegularKey } from './setRegularKey'\nexport { SignerListSet } from './signerListSet'\nexport { TicketCreate } from './ticketCreate'\nexport { TrustSetFlagsInterface, TrustSetFlags, TrustSet } from './trustSet'\nexport { UNLModify } from './UNLModify'\nexport { XChainAddAccountCreateAttestation } from './XChainAddAccountCreateAttestation'\nexport { XChainAddClaimAttestation } from './XChainAddClaimAttestation'\nexport { XChainClaim } from './XChainClaim'\nexport { XChainCommit } from './XChainCommit'\nexport { XChainCreateBridge } from './XChainCreateBridge'\nexport { XChainCreateClaimID } from './XChainCreateClaimID'\nexport { XChainAccountCreateCommit } from './XChainAccountCreateCommit'\nexport {\n  XChainModifyBridge,\n  XChainModifyBridgeFlags,\n  XChainModifyBridgeFlagsInterface,\n} from './XChainModifyBridge'\n\nexport { PermissionedDomainSet } from './permissionedDomainSet'\nexport { PermissionedDomainDelete } from './permissionedDomainDelete'\n", "[\"A\", \"ABE\", \"ACE\", \"ACT\", \"AD\", \"ADA\", \"ADD\",\n    \"AGO\", \"AID\", \"AIM\", \"AIR\", \"ALL\", \"ALP\", \"AM\", \"AMY\", \"AN\", \"ANA\",\n    \"AND\", \"ANN\", \"ANT\", \"ANY\", \"APE\", \"APS\", \"APT\", \"ARC\", \"ARE\", \"ARK\",\n    \"ARM\", \"ART\", \"AS\", \"ASH\", \"ASK\", \"AT\", \"ATE\", \"AUG\", \"AUK\", \"AVE\",\n    \"AWE\", \"AWK\", \"AWL\", \"AWN\", \"AX\", \"AYE\", \"BAD\", \"BAG\", \"BAH\", \"BAM\",\n    \"BAN\", \"BAR\", \"BAT\", \"BAY\", \"BE\", \"BED\", \"BEE\", \"BEG\", \"BEN\", \"BET\",\n    \"BEY\", \"BIB\", \"BID\", \"BIG\", \"BIN\", \"BIT\", \"BOB\", \"BOG\", \"BON\", \"BOO\",\n    \"BOP\", \"BOW\", \"BOY\", \"BUB\", \"BUD\", \"BUG\", \"BUM\", \"BUN\", \"BUS\", \"BUT\",\n    \"BUY\", \"BY\", \"BYE\", \"CAB\", \"CAL\", \"CAM\", \"CAN\", \"CAP\", \"CAR\", \"CAT\",\n    \"CAW\", \"COD\", \"COG\", \"COL\", \"CON\", \"COO\", \"COP\", \"COT\", \"COW\", \"COY\",\n    \"CRY\", \"CUB\", \"CUE\", \"CUP\", \"CUR\", \"CUT\", \"DAB\", \"DAD\", \"DAM\", \"DAN\",\n    \"DAR\", \"DAY\", \"DEE\", \"DEL\", \"DEN\", \"DES\", \"DEW\", \"DID\", \"DIE\", \"DIG\",\n    \"DIN\", \"DIP\", \"DO\", \"DOE\", \"DOG\", \"DON\", \"DOT\", \"DOW\", \"DRY\", \"DUB\",\n    \"DUD\", \"DUE\", \"DUG\", \"DUN\", \"EAR\", \"EAT\", \"ED\", \"EEL\", \"EGG\", \"EGO\",\n    \"ELI\", \"ELK\", \"ELM\", \"ELY\", \"EM\", \"END\", \"EST\", \"ETC\", \"EVA\", \"EVE\",\n    \"EWE\", \"EYE\", \"FAD\", \"FAN\", \"FAR\", \"FAT\", \"FAY\", \"FED\", \"FEE\", \"FEW\",\n    \"FIB\", \"FIG\", \"FIN\", \"FIR\", \"FIT\", \"FLO\", \"FLY\", \"FOE\", \"FOG\", \"FOR\",\n    \"FRY\", \"FUM\", \"FUN\", \"FUR\", \"GAB\", \"GAD\", \"GAG\", \"GAL\", \"GAM\", \"GAP\",\n    \"GAS\", \"GAY\", \"GEE\", \"GEL\", \"GEM\", \"GET\", \"GIG\", \"GIL\", \"GIN\", \"GO\",\n    \"GOT\", \"GUM\", \"GUN\", \"GUS\", \"GUT\", \"GUY\", \"GYM\", \"GYP\", \"HA\", \"HAD\",\n    \"HAL\", \"HAM\", \"HAN\", \"HAP\", \"HAS\", \"HAT\", \"HAW\", \"HAY\", \"HE\", \"HEM\",\n    \"HEN\", \"HER\", \"HEW\", \"HEY\", \"HI\", \"HID\", \"HIM\", \"HIP\", \"HIS\", \"HIT\",\n    \"HO\", \"HOB\", \"HOC\", \"HOE\", \"HOG\", \"HOP\", \"HOT\", \"HOW\", \"HUB\", \"HUE\",\n    \"HUG\", \"HUH\", \"HUM\", \"HUT\", \"I\", \"ICY\", \"IDA\", \"IF\", \"IKE\", \"ILL\",\n    \"INK\", \"INN\", \"IO\", \"ION\", \"IQ\", \"IRA\", \"IRE\", \"IRK\", \"IS\", \"IT\",\n    \"ITS\", \"IVY\", \"JAB\", \"JAG\", \"JAM\", \"JAN\", \"JAR\", \"JAW\", \"JAY\", \"JET\",\n    \"JIG\", \"JIM\", \"JO\", \"JOB\", \"JOE\", \"JOG\", \"JOT\", \"JOY\", \"JUG\", \"JUT\",\n    \"KAY\", \"KEG\", \"KEN\", \"KEY\", \"KID\", \"KIM\", \"KIN\", \"KIT\", \"LA\", \"LAB\",\n    \"LAC\", \"LAD\", \"LAG\", \"LAM\", \"LAP\", \"LAW\", \"LAY\", \"LEA\", \"LED\", \"LEE\",\n    \"LEG\", \"LEN\", \"LEO\", \"LET\", \"LEW\", \"LID\", \"LIE\", \"LIN\", \"LIP\", \"LIT\",\n    \"LO\", \"LOB\", \"LOG\", \"LOP\", \"LOS\", \"LOT\", \"LOU\", \"LOW\", \"LOY\", \"LUG\",\n    \"LYE\", \"MA\", \"MAC\", \"MAD\", \"MAE\", \"MAN\", \"MAO\", \"MAP\", \"MAT\", \"MAW\",\n    \"MAY\", \"ME\", \"MEG\", \"MEL\", \"MEN\", \"MET\", \"MEW\", \"MID\", \"MIN\", \"MIT\",\n    \"MOB\", \"MOD\", \"MOE\", \"MOO\", \"MOP\", \"MOS\", \"MOT\", \"MOW\", \"MUD\", \"MUG\",\n    \"MUM\", \"MY\", \"NAB\", \"NAG\", \"NAN\", \"NAP\", \"NAT\", \"NAY\", \"NE\", \"NED\",\n    \"NEE\", \"NET\", \"NEW\", \"NIB\", \"NIL\", \"NIP\", \"NIT\", \"NO\", \"NOB\", \"NOD\",\n    \"NON\", \"NOR\", \"NOT\", \"NOV\", \"NOW\", \"NU\", \"NUN\", \"NUT\", \"O\", \"OAF\",\n    \"OAK\", \"OAR\", \"OAT\", \"ODD\", \"ODE\", \"OF\", \"OFF\", \"OFT\", \"OH\", \"OIL\",\n    \"OK\", \"OLD\", \"ON\", \"ONE\", \"OR\", \"ORB\", \"ORE\", \"ORR\", \"OS\", \"OTT\",\n    \"OUR\", \"OUT\", \"OVA\", \"OW\", \"OWE\", \"OWL\", \"OWN\", \"OX\", \"PA\", \"PAD\",\n    \"PAL\", \"PAM\", \"PAN\", \"PAP\", \"PAR\", \"PAT\", \"PAW\", \"PAY\", \"PEA\", \"PEG\",\n    \"PEN\", \"PEP\", \"PER\", \"PET\", \"PEW\", \"PHI\", \"PI\", \"PIE\", \"PIN\", \"PIT\",\n    \"PLY\", \"PO\", \"POD\", \"POE\", \"POP\", \"POT\", \"POW\", \"PRO\", \"PRY\", \"PUB\",\n    \"PUG\", \"PUN\", \"PUP\", \"PUT\", \"QUO\", \"RAG\", \"RAM\", \"RAN\", \"RAP\", \"RAT\",\n    \"RAW\", \"RAY\", \"REB\", \"RED\", \"REP\", \"RET\", \"RIB\", \"RID\", \"RIG\", \"RIM\",\n    \"RIO\", \"RIP\", \"ROB\", \"ROD\", \"ROE\", \"RON\", \"ROT\", \"ROW\", \"ROY\", \"RUB\",\n    \"RUE\", \"RUG\", \"RUM\", \"RUN\", \"RYE\", \"SAC\", \"SAD\", \"SAG\", \"SAL\", \"SAM\",\n    \"SAN\", \"SAP\", \"SAT\", \"SAW\", \"SAY\", \"SEA\", \"SEC\", \"SEE\", \"SEN\", \"SET\",\n    \"SEW\", \"SHE\", \"SHY\", \"SIN\", \"SIP\", \"SIR\", \"SIS\", \"SIT\", \"SKI\", \"SKY\",\n    \"SLY\", \"SO\", \"SOB\", \"SOD\", \"SON\", \"SOP\", \"SOW\", \"SOY\", \"SPA\", \"SPY\",\n    \"SUB\", \"SUD\", \"SUE\", \"SUM\", \"SUN\", \"SUP\", \"TAB\", \"TAD\", \"TAG\", \"TAN\",\n    \"TAP\", \"TAR\", \"TEA\", \"TED\", \"TEE\", \"TEN\", \"THE\", \"THY\", \"TIC\", \"TIE\",\n    \"TIM\", \"TIN\", \"TIP\", \"TO\", \"TOE\", \"TOG\", \"TOM\", \"TON\", \"TOO\", \"TOP\",\n    \"TOW\", \"TOY\", \"TRY\", \"TUB\", \"TUG\", \"TUM\", \"TUN\", \"TWO\", \"UN\", \"UP\",\n    \"US\", \"USE\", \"VAN\", \"VAT\", \"VET\", \"VIE\", \"WAD\", \"WAG\", \"WAR\", \"WAS\",\n    \"WAY\", \"WE\", \"WEB\", \"WED\", \"WEE\", \"WET\", \"WHO\", \"WHY\", \"WIN\", \"WIT\",\n    \"WOK\", \"WON\", \"WOO\", \"WOW\", \"WRY\", \"WU\", \"YAM\", \"YAP\", \"YAW\", \"YE\",\n    \"YEA\", \"YES\", \"YET\", \"YOU\", \"ABED\", \"ABEL\", \"ABET\", \"ABLE\", \"ABUT\",\n    \"ACHE\", \"ACID\", \"ACME\", \"ACRE\", \"ACTA\", \"ACTS\", \"ADAM\", \"ADDS\",\n    \"ADEN\", \"AFAR\", \"AFRO\", \"AGEE\", \"AHEM\", \"AHOY\", \"AIDA\", \"AIDE\",\n    \"AIDS\", \"AIRY\", \"AJAR\", \"AKIN\", \"ALAN\", \"ALEC\", \"ALGA\", \"ALIA\",\n    \"ALLY\", \"ALMA\", \"ALOE\", \"ALSO\", \"ALTO\", \"ALUM\", \"ALVA\", \"AMEN\",\n    \"AMES\", \"AMID\", \"AMMO\", \"AMOK\", \"AMOS\", \"AMRA\", \"ANDY\", \"ANEW\",\n    \"ANNA\", \"ANNE\", \"ANTE\", \"ANTI\", \"AQUA\", \"ARAB\", \"ARCH\", \"AREA\",\n    \"ARGO\", \"ARID\", \"ARMY\", \"ARTS\", \"ARTY\", \"ASIA\", \"ASKS\", \"ATOM\",\n    \"AUNT\", \"AURA\", \"AUTO\", \"AVER\", \"AVID\", \"AVIS\", \"AVON\", \"AVOW\",\n    \"AWAY\", \"AWRY\", \"BABE\", \"BABY\", \"BACH\", \"BACK\", \"BADE\", \"BAIL\",\n    \"BAIT\", \"BAKE\", \"BALD\", \"BALE\", \"BALI\", \"BALK\", \"BALL\", \"BALM\",\n    \"BAND\", \"BANE\", \"BANG\", \"BANK\", \"BARB\", \"BARD\", \"BARE\", \"BARK\",\n    \"BARN\", \"BARR\", \"BASE\", \"BASH\", \"BASK\", \"BASS\", \"BATE\", \"BATH\",\n    \"BAWD\", \"BAWL\", \"BEAD\", \"BEAK\", \"BEAM\", \"BEAN\", \"BEAR\", \"BEAT\",\n    \"BEAU\", \"BECK\", \"BEEF\", \"BEEN\", \"BEER\",\n    \"BEET\", \"BELA\", \"BELL\", \"BELT\", \"BEND\", \"BENT\", \"BERG\", \"BERN\",\n    \"BERT\", \"BESS\", \"BEST\", \"BETA\", \"BETH\", \"BHOY\", \"BIAS\", \"BIDE\",\n    \"BIEN\", \"BILE\", \"BILK\", \"BILL\", \"BIND\", \"BING\", \"BIRD\", \"BITE\",\n    \"BITS\", \"BLAB\", \"BLAT\", \"BLED\", \"BLEW\", \"BLOB\", \"BLOC\", \"BLOT\",\n    \"BLOW\", \"BLUE\", \"BLUM\", \"BLUR\", \"BOAR\", \"BOAT\", \"BOCA\", \"BOCK\",\n    \"BODE\", \"BODY\", \"BOGY\", \"BOHR\", \"BOIL\", \"BOLD\", \"BOLO\", \"BOLT\",\n    \"BOMB\", \"BONA\", \"BOND\", \"BONE\", \"BONG\", \"BONN\", \"BONY\", \"BOOK\",\n    \"BOOM\", \"BOON\", \"BOOT\", \"BORE\", \"BORG\", \"BORN\", \"BOSE\", \"BOSS\",\n    \"BOTH\", \"BOUT\", \"BOWL\", \"BOYD\", \"BRAD\", \"BRAE\", \"BRAG\", \"BRAN\",\n    \"BRAY\", \"BRED\", \"BREW\", \"BRIG\", \"BRIM\", \"BROW\", \"BUCK\", \"BUDD\",\n    \"BUFF\", \"BULB\", \"BULK\", \"BULL\", \"BUNK\", \"BUNT\", \"BUOY\", \"BURG\",\n    \"BURL\", \"BURN\", \"BURR\", \"BURT\", \"BURY\", \"BUSH\", \"BUSS\", \"BUST\",\n    \"BUSY\", \"BYTE\", \"CADY\", \"CAFE\", \"CAGE\", \"CAIN\", \"CAKE\", \"CALF\",\n    \"CALL\", \"CALM\", \"CAME\", \"CANE\", \"CANT\", \"CARD\", \"CARE\", \"CARL\",\n    \"CARR\", \"CART\", \"CASE\", \"CASH\", \"CASK\", \"CAST\", \"CAVE\", \"CEIL\",\n    \"CELL\", \"CENT\", \"CERN\", \"CHAD\", \"CHAR\", \"CHAT\", \"CHAW\", \"CHEF\",\n    \"CHEN\", \"CHEW\", \"CHIC\", \"CHIN\", \"CHOU\", \"CHOW\", \"CHUB\", \"CHUG\",\n    \"CHUM\", \"CITE\", \"CITY\", \"CLAD\", \"CLAM\", \"CLAN\", \"CLAW\", \"CLAY\",\n    \"CLOD\", \"CLOG\", \"CLOT\", \"CLUB\", \"CLUE\", \"COAL\", \"COAT\", \"COCA\",\n    \"COCK\", \"COCO\", \"CODA\", \"CODE\", \"CODY\", \"COED\", \"COIL\", \"COIN\",\n    \"COKE\", \"COLA\", \"COLD\", \"COLT\", \"COMA\", \"COMB\", \"COME\", \"COOK\",\n    \"COOL\", \"COON\", \"COOT\", \"CORD\", \"CORE\", \"CORK\", \"CORN\", \"COST\",\n    \"COVE\", \"COWL\", \"CRAB\", \"CRAG\", \"CRAM\", \"CRAY\", \"CREW\", \"CRIB\",\n    \"CROW\", \"CRUD\", \"CUBA\", \"CUBE\", \"CUFF\", \"CULL\", \"CULT\", \"CUNY\",\n    \"CURB\", \"CURD\", \"CURE\", \"CURL\", \"CURT\", \"CUTS\", \"DADE\", \"DALE\",\n    \"DAME\", \"DANA\", \"DANE\", \"DANG\", \"DANK\", \"DARE\", \"DARK\", \"DARN\",\n    \"DART\", \"DASH\", \"DATA\", \"DATE\", \"DAVE\", \"DAVY\", \"DAWN\", \"DAYS\",\n    \"DEAD\", \"DEAF\", \"DEAL\", \"DEAN\", \"DEAR\", \"DEBT\", \"DECK\", \"DEED\",\n    \"DEEM\", \"DEER\", \"DEFT\", \"DEFY\", \"DELL\", \"DENT\", \"DENY\", \"DESK\",\n    \"DIAL\", \"DICE\", \"DIED\", \"DIET\", \"DIME\", \"DINE\", \"DING\", \"DINT\",\n    \"DIRE\", \"DIRT\", \"DISC\", \"DISH\", \"DISK\", \"DIVE\", \"DOCK\", \"DOES\",\n    \"DOLE\", \"DOLL\", \"DOLT\", \"DOME\", \"DONE\", \"DOOM\", \"DOOR\", \"DORA\",\n    \"DOSE\", \"DOTE\", \"DOUG\", \"DOUR\", \"DOVE\", \"DOWN\", \"DRAB\", \"DRAG\",\n    \"DRAM\", \"DRAW\", \"DREW\", \"DRUB\", \"DRUG\", \"DRUM\", \"DUAL\", \"DUCK\",\n    \"DUCT\", \"DUEL\", \"DUET\", \"DUKE\", \"DULL\", \"DUMB\", \"DUNE\", \"DUNK\",\n    \"DUSK\", \"DUST\", \"DUTY\", \"EACH\", \"EARL\", \"EARN\", \"EASE\", \"EAST\",\n    \"EASY\", \"EBEN\", \"ECHO\", \"EDDY\", \"EDEN\", \"EDGE\", \"EDGY\", \"EDIT\",\n    \"EDNA\", \"EGAN\", \"ELAN\", \"ELBA\", \"ELLA\", \"ELSE\", \"EMIL\", \"EMIT\",\n    \"EMMA\", \"ENDS\", \"ERIC\", \"EROS\", \"EVEN\", \"EVER\", \"EVIL\", \"EYED\",\n    \"FACE\", \"FACT\", \"FADE\", \"FAIL\", \"FAIN\", \"FAIR\", \"FAKE\", \"FALL\",\n    \"FAME\", \"FANG\", \"FARM\", \"FAST\", \"FATE\", \"FAWN\", \"FEAR\", \"FEAT\",\n    \"FEED\", \"FEEL\", \"FEET\", \"FELL\", \"FELT\", \"FEND\", \"FERN\", \"FEST\",\n    \"FEUD\", \"FIEF\", \"FIGS\", \"FILE\", \"FILL\", \"FILM\", \"FIND\", \"FINE\",\n    \"FINK\", \"FIRE\", \"FIRM\", \"FISH\", \"FISK\", \"FIST\", \"FITS\", \"FIVE\",\n    \"FLAG\", \"FLAK\", \"FLAM\", \"FLAT\", \"FLAW\", \"FLEA\", \"FLED\", \"FLEW\",\n    \"FLIT\", \"FLOC\", \"FLOG\", \"FLOW\", \"FLUB\", \"FLUE\", \"FOAL\", \"FOAM\",\n    \"FOGY\", \"FOIL\", \"FOLD\", \"FOLK\", \"FOND\", \"FONT\", \"FOOD\", \"FOOL\",\n    \"FOOT\", \"FORD\", \"FORE\", \"FORK\", \"FORM\", \"FORT\", \"FOSS\", \"FOUL\",\n    \"FOUR\", \"FOWL\", \"FRAU\", \"FRAY\", \"FRED\", \"FREE\", \"FRET\", \"FREY\",\n    \"FROG\", \"FROM\", \"FUEL\", \"FULL\", \"FUME\", \"FUND\", \"FUNK\", \"FURY\",\n    \"FUSE\", \"FUSS\", \"GAFF\", \"GAGE\", \"GAIL\", \"GAIN\", \"GAIT\", \"GALA\",\n    \"GALE\", \"GALL\", \"GALT\", \"GAME\", \"GANG\", \"GARB\", \"GARY\", \"GASH\",\n    \"GATE\", \"GAUL\", \"GAUR\", \"GAVE\", \"GAWK\", \"GEAR\", \"GELD\", \"GENE\",\n    \"GENT\", \"GERM\", \"GETS\", \"GIBE\", \"GIFT\", \"GILD\", \"GILL\", \"GILT\",\n    \"GINA\", \"GIRD\", \"GIRL\", \"GIST\", \"GIVE\", \"GLAD\", \"GLEE\", \"GLEN\",\n    \"GLIB\", \"GLOB\", \"GLOM\", \"GLOW\", \"GLUE\", \"GLUM\", \"GLUT\", \"GOAD\",\n    \"GOAL\", \"GOAT\", \"GOER\", \"GOES\", \"GOLD\", \"GOLF\", \"GONE\", \"GONG\",\n    \"GOOD\", \"GOOF\", \"GORE\", \"GORY\", \"GOSH\", \"GOUT\", \"GOWN\", \"GRAB\",\n    \"GRAD\", \"GRAY\", \"GREG\", \"GREW\", \"GREY\", \"GRID\", \"GRIM\", \"GRIN\",\n    \"GRIT\", \"GROW\", \"GRUB\", \"GULF\", \"GULL\", \"GUNK\", \"GURU\", \"GUSH\",\n    \"GUST\", \"GWEN\", \"GWYN\", \"HAAG\", \"HAAS\", \"HACK\", \"HAIL\", \"HAIR\",\n    \"HALE\", \"HALF\", \"HALL\", \"HALO\", \"HALT\", \"HAND\", \"HANG\", \"HANK\",\n    \"HANS\", \"HARD\", \"HARK\", \"HARM\", \"HART\", \"HASH\", \"HAST\", \"HATE\",\n    \"HATH\", \"HAUL\", \"HAVE\", \"HAWK\", \"HAYS\", \"HEAD\", \"HEAL\", \"HEAR\",\n    \"HEAT\", \"HEBE\", \"HECK\", \"HEED\", \"HEEL\", \"HEFT\", \"HELD\", \"HELL\",\n    \"HELM\", \"HERB\", \"HERD\", \"HERE\", \"HERO\", \"HERS\", \"HESS\", \"HEWN\",\n    \"HICK\", \"HIDE\", \"HIGH\", \"HIKE\", \"HILL\", \"HILT\", \"HIND\", \"HINT\",\n    \"HIRE\", \"HISS\", \"HIVE\", \"HOBO\", \"HOCK\", \"HOFF\", \"HOLD\", \"HOLE\",\n    \"HOLM\", \"HOLT\", \"HOME\", \"HONE\", \"HONK\", \"HOOD\", \"HOOF\", \"HOOK\",\n    \"HOOT\", \"HORN\", \"HOSE\", \"HOST\", \"HOUR\", \"HOVE\", \"HOWE\", \"HOWL\",\n    \"HOYT\", \"HUCK\", \"HUED\", \"HUFF\", \"HUGE\", \"HUGH\", \"HUGO\", \"HULK\",\n    \"HULL\", \"HUNK\", \"HUNT\", \"HURD\", \"HURL\", \"HURT\", \"HUSH\", \"HYDE\",\n    \"HYMN\", \"IBIS\", \"ICON\", \"IDEA\", \"IDLE\", \"IFFY\", \"INCA\", \"INCH\",\n    \"INTO\", \"IONS\", \"IOTA\", \"IOWA\", \"IRIS\", \"IRMA\", \"IRON\", \"ISLE\",\n    \"ITCH\", \"ITEM\", \"IVAN\", \"JACK\", \"JADE\", \"JAIL\", \"JAKE\", \"JANE\",\n    \"JAVA\", \"JEAN\", \"JEFF\", \"JERK\", \"JESS\", \"JEST\", \"JIBE\", \"JILL\",\n    \"JILT\", \"JIVE\", \"JOAN\", \"JOBS\", \"JOCK\", \"JOEL\", \"JOEY\", \"JOHN\",\n    \"JOIN\", \"JOKE\", \"JOLT\", \"JOVE\", \"JUDD\", \"JUDE\", \"JUDO\", \"JUDY\",\n    \"JUJU\", \"JUKE\", \"JULY\", \"JUNE\", \"JUNK\", \"JUNO\", \"JURY\", \"JUST\",\n    \"JUTE\", \"KAHN\", \"KALE\", \"KANE\", \"KANT\", \"KARL\", \"KATE\", \"KEEL\",\n    \"KEEN\", \"KENO\", \"KENT\", \"KERN\", \"KERR\", \"KEYS\", \"KICK\", \"KILL\",\n    \"KIND\", \"KING\", \"KIRK\", \"KISS\", \"KITE\", \"KLAN\", \"KNEE\", \"KNEW\",\n    \"KNIT\", \"KNOB\", \"KNOT\", \"KNOW\", \"KOCH\", \"KONG\", \"KUDO\", \"KURD\",\n    \"KURT\", \"KYLE\", \"LACE\", \"LACK\", \"LACY\", \"LADY\", \"LAID\", \"LAIN\",\n    \"LAIR\", \"LAKE\", \"LAMB\", \"LAME\", \"LAND\", \"LANE\", \"LANG\", \"LARD\",\n    \"LARK\", \"LASS\", \"LAST\", \"LATE\", \"LAUD\", \"LAVA\", \"LAWN\", \"LAWS\",\n    \"LAYS\", \"LEAD\", \"LEAF\", \"LEAK\", \"LEAN\", \"LEAR\", \"LEEK\", \"LEER\",\n    \"LEFT\", \"LEND\", \"LENS\", \"LENT\", \"LEON\", \"LESK\", \"LESS\", \"LEST\",\n    \"LETS\", \"LIAR\", \"LICE\", \"LICK\", \"LIED\", \"LIEN\", \"LIES\", \"LIEU\",\n    \"LIFE\", \"LIFT\", \"LIKE\", \"LILA\", \"LILT\", \"LILY\", \"LIMA\", \"LIMB\",\n    \"LIME\", \"LIND\", \"LINE\", \"LINK\", \"LINT\", \"LION\", \"LISA\", \"LIST\",\n    \"LIVE\", \"LOAD\", \"LOAF\", \"LOAM\", \"LOAN\", \"LOCK\", \"LOFT\", \"LOGE\",\n    \"LOIS\", \"LOLA\", \"LONE\", \"LONG\", \"LOOK\", \"LOON\", \"LOOT\", \"LORD\",\n    \"LORE\", \"LOSE\", \"LOSS\", \"LOST\", \"LOUD\", \"LOVE\", \"LOWE\", \"LUCK\",\n    \"LUCY\", \"LUGE\", \"LUKE\", \"LULU\", \"LUND\", \"LUNG\", \"LURA\", \"LURE\",\n    \"LURK\", \"LUSH\", \"LUST\", \"LYLE\", \"LYNN\", \"LYON\", \"LYRA\", \"MACE\",\n    \"MADE\", \"MAGI\", \"MAID\", \"MAIL\", \"MAIN\", \"MAKE\", \"MALE\", \"MALI\",\n    \"MALL\", \"MALT\", \"MANA\", \"MANN\", \"MANY\", \"MARC\", \"MARE\", \"MARK\",\n    \"MARS\", \"MART\", \"MARY\", \"MASH\", \"MASK\", \"MASS\", \"MAST\", \"MATE\",\n    \"MATH\", \"MAUL\", \"MAYO\", \"MEAD\", \"MEAL\", \"MEAN\", \"MEAT\", \"MEEK\",\n    \"MEET\", \"MELD\", \"MELT\", \"MEMO\", \"MEND\", \"MENU\", \"MERT\", \"MESH\",\n    \"MESS\", \"MICE\", \"MIKE\", \"MILD\", \"MILE\", \"MILK\", \"MILL\", \"MILT\",\n    \"MIMI\", \"MIND\", \"MINE\", \"MINI\", \"MINK\", \"MINT\", \"MIRE\", \"MISS\",\n    \"MIST\", \"MITE\", \"MITT\", \"MOAN\", \"MOAT\", \"MOCK\", \"MODE\", \"MOLD\",\n    \"MOLE\", \"MOLL\", \"MOLT\", \"MONA\", \"MONK\", \"MONT\", \"MOOD\", \"MOON\",\n    \"MOOR\", \"MOOT\", \"MORE\", \"MORN\", \"MORT\", \"MOSS\", \"MOST\", \"MOTH\",\n    \"MOVE\", \"MUCH\", \"MUCK\", \"MUDD\", \"MUFF\", \"MULE\", \"MULL\", \"MURK\",\n    \"MUSH\", \"MUST\", \"MUTE\", \"MUTT\", \"MYRA\", \"MYTH\", \"NAGY\", \"NAIL\",\n    \"NAIR\", \"NAME\", \"NARY\", \"NASH\", \"NAVE\", \"NAVY\", \"NEAL\", \"NEAR\",\n    \"NEAT\", \"NECK\", \"NEED\", \"NEIL\", \"NELL\", \"NEON\", \"NERO\", \"NESS\",\n    \"NEST\", \"NEWS\", \"NEWT\", \"NIBS\", \"NICE\", \"NICK\", \"NILE\", \"NINA\",\n    \"NINE\", \"NOAH\", \"NODE\", \"NOEL\", \"NOLL\", \"NONE\", \"NOOK\", \"NOON\",\n    \"NORM\", \"NOSE\", \"NOTE\", \"NOUN\", \"NOVA\", \"NUDE\", \"NULL\", \"NUMB\",\n    \"OATH\", \"OBEY\", \"OBOE\", \"ODIN\", \"OHIO\", \"OILY\", \"OINT\", \"OKAY\",\n    \"OLAF\", \"OLDY\", \"OLGA\", \"OLIN\", \"OMAN\", \"OMEN\", \"OMIT\", \"ONCE\",\n    \"ONES\", \"ONLY\", \"ONTO\", \"ONUS\", \"ORAL\", \"ORGY\", \"OSLO\", \"OTIS\",\n    \"OTTO\", \"OUCH\", \"OUST\", \"OUTS\", \"OVAL\", \"OVEN\", \"OVER\", \"OWLY\",\n    \"OWNS\", \"QUAD\", \"QUIT\", \"QUOD\", \"RACE\", \"RACK\", \"RACY\", \"RAFT\",\n    \"RAGE\", \"RAID\", \"RAIL\", \"RAIN\", \"RAKE\", \"RANK\", \"RANT\", \"RARE\",\n    \"RASH\", \"RATE\", \"RAVE\", \"RAYS\", \"READ\", \"REAL\", \"REAM\", \"REAR\",\n    \"RECK\", \"REED\", \"REEF\", \"REEK\", \"REEL\", \"REID\", \"REIN\", \"RENA\",\n    \"REND\", \"RENT\", \"REST\", \"RICE\", \"RICH\", \"RICK\", \"RIDE\", \"RIFT\",\n    \"RILL\", \"RIME\", \"RING\", \"RINK\", \"RISE\", \"RISK\", \"RITE\", \"ROAD\",\n    \"ROAM\", \"ROAR\", \"ROBE\", \"ROCK\", \"RODE\", \"ROIL\", \"ROLL\", \"ROME\",\n    \"ROOD\", \"ROOF\", \"ROOK\", \"ROOM\", \"ROOT\", \"ROSA\", \"ROSE\", \"ROSS\",\n    \"ROSY\", \"ROTH\", \"ROUT\", \"ROVE\", \"ROWE\", \"ROWS\", \"RUBE\", \"RUBY\",\n    \"RUDE\", \"RUDY\", \"RUIN\", \"RULE\", \"RUNG\", \"RUNS\", \"RUNT\", \"RUSE\",\n    \"RUSH\", \"RUSK\", \"RUSS\", \"RUST\", \"RUTH\", \"SACK\", \"SAFE\", \"SAGE\",\n    \"SAID\", \"SAIL\", \"SALE\", \"SALK\", \"SALT\", \"SAME\", \"SAND\", \"SANE\",\n    \"SANG\", \"SANK\", \"SARA\", \"SAUL\", \"SAVE\", \"SAYS\", \"SCAN\", \"SCAR\",\n    \"SCAT\", \"SCOT\", \"SEAL\", \"SEAM\", \"SEAR\", \"SEAT\", \"SEED\", \"SEEK\",\n    \"SEEM\", \"SEEN\", \"SEES\", \"SELF\", \"SELL\", \"SEND\", \"SENT\", \"SETS\",\n    \"SEWN\", \"SHAG\", \"SHAM\", \"SHAW\", \"SHAY\", \"SHED\", \"SHIM\", \"SHIN\",\n    \"SHOD\", \"SHOE\", \"SHOT\", \"SHOW\", \"SHUN\", \"SHUT\", \"SICK\", \"SIDE\",\n    \"SIFT\", \"SIGH\", \"SIGN\", \"SILK\", \"SILL\", \"SILO\", \"SILT\", \"SINE\",\n    \"SING\", \"SINK\", \"SIRE\", \"SITE\", \"SITS\", \"SITU\", \"SKAT\", \"SKEW\",\n    \"SKID\", \"SKIM\", \"SKIN\", \"SKIT\", \"SLAB\", \"SLAM\", \"SLAT\", \"SLAY\",\n    \"SLED\", \"SLEW\", \"SLID\", \"SLIM\", \"SLIT\", \"SLOB\", \"SLOG\", \"SLOT\",\n    \"SLOW\", \"SLUG\", \"SLUM\", \"SLUR\", \"SMOG\", \"SMUG\", \"SNAG\", \"SNOB\",\n    \"SNOW\", \"SNUB\", \"SNUG\", \"SOAK\", \"SOAR\", \"SOCK\", \"SODA\", \"SOFA\",\n    \"SOFT\", \"SOIL\", \"SOLD\", \"SOME\", \"SONG\", \"SOON\", \"SOOT\", \"SORE\",\n    \"SORT\", \"SOUL\", \"SOUR\", \"SOWN\", \"STAB\", \"STAG\", \"STAN\", \"STAR\",\n    \"STAY\", \"STEM\", \"STEW\", \"STIR\", \"STOW\", \"STUB\", \"STUN\", \"SUCH\",\n    \"SUDS\", \"SUIT\", \"SULK\", \"SUMS\", \"SUNG\", \"SUNK\", \"SURE\", \"SURF\",\n    \"SWAB\", \"SWAG\", \"SWAM\", \"SWAN\", \"SWAT\", \"SWAY\", \"SWIM\", \"SWUM\",\n    \"TACK\", \"TACT\", \"TAIL\", \"TAKE\", \"TALE\", \"TALK\", \"TALL\", \"TANK\",\n    \"TASK\", \"TATE\", \"TAUT\", \"TEAL\", \"TEAM\", \"TEAR\", \"TECH\", \"TEEM\",\n    \"TEEN\", \"TEET\", \"TELL\", \"TEND\", \"TENT\", \"TERM\", \"TERN\", \"TESS\",\n    \"TEST\", \"THAN\", \"THAT\", \"THEE\", \"THEM\", \"THEN\", \"THEY\", \"THIN\",\n    \"THIS\", \"THUD\", \"THUG\", \"TICK\", \"TIDE\", \"TIDY\", \"TIED\", \"TIER\",\n    \"TILE\", \"TILL\", \"TILT\", \"TIME\", \"TINA\", \"TINE\", \"TINT\", \"TINY\",\n    \"TIRE\", \"TOAD\", \"TOGO\", \"TOIL\", \"TOLD\", \"TOLL\", \"TONE\", \"TONG\",\n    \"TONY\", \"TOOK\", \"TOOL\", \"TOOT\", \"TORE\", \"TORN\", \"TOTE\", \"TOUR\",\n    \"TOUT\", \"TOWN\", \"TRAG\", \"TRAM\", \"TRAY\", \"TREE\", \"TREK\", \"TRIG\",\n    \"TRIM\", \"TRIO\", \"TROD\", \"TROT\", \"TROY\", \"TRUE\", \"TUBA\", \"TUBE\",\n    \"TUCK\", \"TUFT\", \"TUNA\", \"TUNE\", \"TUNG\", \"TURF\", \"TURN\", \"TUSK\",\n    \"TWIG\", \"TWIN\", \"TWIT\", \"ULAN\", \"UNIT\", \"URGE\", \"USED\", \"USER\",\n    \"USES\", \"UTAH\", \"VAIL\", \"VAIN\", \"VALE\", \"VARY\", \"VASE\", \"VAST\",\n    \"VEAL\", \"VEDA\", \"VEIL\", \"VEIN\", \"VEND\", \"VENT\", \"VERB\", \"VERY\",\n    \"VETO\", \"VICE\", \"VIEW\", \"VINE\", \"VISE\", \"VOID\", \"VOLT\", \"VOTE\",\n    \"WACK\", \"WADE\", \"WAGE\", \"WAIL\", \"WAIT\", \"WAKE\", \"WALE\", \"WALK\",\n    \"WALL\", \"WALT\", \"WAND\", \"WANE\", \"WANG\", \"WANT\", \"WARD\", \"WARM\",\n    \"WARN\", \"WART\", \"WASH\", \"WAST\", \"WATS\", \"WATT\", \"WAVE\", \"WAVY\",\n    \"WAYS\", \"WEAK\", \"WEAL\", \"WEAN\", \"WEAR\", \"WEED\", \"WEEK\", \"WEIR\",\n    \"WELD\", \"WELL\", \"WELT\", \"WENT\", \"WERE\", \"WERT\", \"WEST\", \"WHAM\",\n    \"WHAT\", \"WHEE\", \"WHEN\", \"WHET\", \"WHOA\", \"WHOM\", \"WICK\", \"WIFE\",\n    \"WILD\", \"WILL\", \"WIND\", \"WINE\", \"WING\", \"WINK\", \"WINO\", \"WIRE\",\n    \"WISE\", \"WISH\", \"WITH\", \"WOLF\", \"WONT\", \"WOOD\", \"WOOL\", \"WORD\",\n    \"WORE\", \"WORK\", \"WORM\", \"WORN\", \"WOVE\", \"WRIT\", \"WYNN\", \"YALE\",\n    \"YANG\", \"YANK\", \"YARD\", \"YARN\", \"YAWL\", \"YAWN\", \"YEAH\", \"YEAR\",\n    \"YELL\", \"YOGA\", \"YOKE\"]\n", "/* eslint-disable @typescript-eslint/no-magic-numbers -- Doing many bitwise operations which need specific numbers */\n/* eslint-disable no-bitwise -- Bitwise operators are required for this encoding/decoding */\n/* eslint-disable id-length -- Bitwise math uses shorthand terms */\n/*\n *rfc1751.ts : Converts between 128-bit strings and a human-readable\n *sequence of words, as defined in RFC1751: \"A Convention for\n *Human-Readable 128-bit Keys\", by Daniel L. McDonald.\n *Ported from rfc1751.py / Python Cryptography Toolkit (public domain).\n *Copied from https://github.com/bip32/bip32.github.io/blob/master/js/rfc1751.js which\n *is part of the public domain.\n */\n\nimport { hexToBytes, concat } from '@xrplf/isomorphic/utils'\n\nimport rfc1751Words from './rfc1751Words.json'\n\nconst rfc1751WordList: string[] = rfc1751Words\n\n// Added prettier-ignore to allow _BINARY to be on two lines, instead of one entry per line.\n\n// prettier-ignore\nconst BINARY = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',\n                '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'];\n\n/**\n * Convert a number array into a binary string.\n *\n * @param key - An array of numbers in base 10.\n * @returns A binary string.\n */\nfunction keyToBinary(key: number[]): string {\n  let res = ''\n  for (const num of key) {\n    res += BINARY[num >> 4] + BINARY[num & 0x0f]\n  }\n  return res\n}\n\n/**\n * Converts a substring of an encoded secret to its numeric value.\n *\n * @param key - The encoded secret.\n * @param start - The start index to parse from.\n * @param length - The number of digits to parse after the start index.\n * @returns The binary value of the substring.\n */\nfunction extract(key: string, start: number, length: number): number {\n  const subKey = key.substring(start, start + length)\n  let acc = 0\n  for (let index = 0; index < subKey.length; index++) {\n    acc = acc * 2 + subKey.charCodeAt(index) - 48\n  }\n  return acc\n}\n\n/**\n * Generates a modified RFC1751 mnemonic in the same way rippled's wallet_propose does.\n *\n * @param hex_key - An encoded secret in hex format.\n * @returns A mnemonic following rippled's modified RFC1751 mnemonic standard.\n */\nfunction keyToRFC1751Mnemonic(hex_key: string): string {\n  // Remove whitespace and interpret hex\n  const buf = hexToBytes(hex_key.replace(/\\s+/gu, ''))\n  // Swap byte order and use rfc1751\n  let key: number[] = bufferToArray(swap128(buf))\n\n  // pad to 8 bytes\n  const padding: number[] = []\n  for (let index = 0; index < (8 - (key.length % 8)) % 8; index++) {\n    padding.push(0)\n  }\n  key = padding.concat(key)\n\n  const english: string[] = []\n  for (let index = 0; index < key.length; index += 8) {\n    const subKey = key.slice(index, index + 8)\n\n    // add parity\n    let skbin = keyToBinary(subKey)\n    let parity = 0\n    for (let j = 0; j < 64; j += 2) {\n      parity += extract(skbin, j, 2)\n    }\n    subKey.push((parity << 6) & 0xff)\n\n    skbin = keyToBinary(subKey)\n    for (let j = 0; j < 64; j += 11) {\n      english.push(rfc1751WordList[extract(skbin, j, 11)])\n    }\n  }\n  return english.join(' ')\n}\n\n/**\n * Converts an english mnemonic following rippled's modified RFC1751 standard to an encoded hex secret.\n *\n * @param english - A mnemonic generated using ripple's modified RFC1751 standard.\n * @throws Error if the parity after decoding does not match.\n * @returns A Buffer containing an encoded secret.\n */\nfunction rfc1751MnemonicToKey(english: string): Uint8Array {\n  const words = english.split(' ')\n  let key: number[] = []\n\n  for (let index = 0; index < words.length; index += 6) {\n    const { subKey, word }: { subKey: number[]; word: string } = getSubKey(\n      words,\n      index,\n    )\n\n    // check parity\n    const skbin = keyToBinary(subKey)\n    let parity = 0\n    for (let j = 0; j < 64; j += 2) {\n      parity += extract(skbin, j, 2)\n    }\n    const cs0 = extract(skbin, 64, 2)\n    const cs1 = parity & 3\n    if (cs0 !== cs1) {\n      throw new Error(`Parity error at ${word}`)\n    }\n\n    key = key.concat(subKey.slice(0, 8))\n  }\n\n  // This is a step specific to the XRPL's implementation\n  const bufferKey = swap128(Uint8Array.from(key))\n  return bufferKey\n}\n\nfunction getSubKey(\n  words: string[],\n  index: number,\n): { subKey: number[]; word: string } {\n  const sublist = words.slice(index, index + 6)\n  let bits = 0\n  const ch = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n  let word = ''\n  for (word of sublist) {\n    const idx = rfc1751WordList.indexOf(word.toUpperCase())\n    if (idx === -1) {\n      throw new TypeError(\n        `Expected an RFC1751 word, but received '${word}'. ` +\n          `For the full list of words in the RFC1751 encoding see https://datatracker.ietf.org/doc/html/rfc1751`,\n      )\n    }\n    const shift = (8 - ((bits + 11) % 8)) % 8\n    const y = idx << shift\n    const cl = y >> 16\n    const cc = (y >> 8) & 0xff\n    const cr = y & 0xff\n    const t = Math.floor(bits / 8)\n    if (shift > 5) {\n      ch[t] |= cl\n      ch[t + 1] |= cc\n      ch[t + 2] |= cr\n    } else if (shift > -3) {\n      ch[t] |= cc\n      ch[t + 1] |= cr\n    } else {\n      ch[t] |= cr\n    }\n    bits += 11\n  }\n  const subKey: number[] = ch.slice()\n  return { subKey, word }\n}\n\nfunction bufferToArray(buf: Uint8Array): number[] {\n  /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We know the end type */\n  return Array.prototype.slice.call(buf) as number[]\n}\n\nfunction swap(arr: Uint8Array, n: number, m: number): void {\n  const i = arr[n]\n  // eslint-disable-next-line no-param-reassign -- we have to swap\n  arr[n] = arr[m]\n  // eslint-disable-next-line no-param-reassign -- see above\n  arr[m] = i\n}\n\n/**\n * Interprets arr as an array of 64-bit numbers and swaps byte order in 64 bit chunks.\n * Example of two 64 bit numbers 0000000100000002 => 1000000020000000\n *\n * @param arr A Uint8Array representation of one or more 64 bit numbers\n * @returns Uint8Array An array containing the bytes of 64 bit numbers each with reversed endianness\n */\nfunction swap64(arr: Uint8Array): Uint8Array {\n  const len = arr.length\n\n  for (let i = 0; i < len; i += 8) {\n    swap(arr, i, i + 7)\n    swap(arr, i + 1, i + 6)\n    swap(arr, i + 2, i + 5)\n    swap(arr, i + 3, i + 4)\n  }\n\n  return arr\n}\n\n/**\n * Swap the byte order of a 128-bit array.\n * Ex. 0000000100000002 => 2000000010000000\n *\n * @param arr - A 128-bit (16 byte) array\n * @returns An array containing the same data with reversed endianness\n */\nfunction swap128(arr: Uint8Array): Uint8Array {\n  // Interprets arr as an array of (two, in this case) 64-bit numbers and swaps byte order in 64 bit chunks.\n  // Ex. 0000000100000002 => 1000000020000000\n  const reversedBytes = swap64(arr)\n  // Further swap the two 64-bit numbers since our buffer is 128 bits.\n  // Ex. 1000000020000000 => 2000000010000000\n  return concat([reversedBytes.slice(8, 16), reversedBytes.slice(0, 8)])\n}\n\nexport { rfc1751MnemonicToKey, keyToRFC1751Mnemonic }\n", "import { bytesToHex } from '@xrplf/isomorphic/utils'\nimport { BigNumber } from 'bignumber.js'\nimport { decodeAccountID } from 'ripple-address-codec'\nimport { decode, encode, encodeForSigning } from 'ripple-binary-codec'\nimport { verify } from 'ripple-keypairs'\n\nimport { ValidationError } from '../errors'\nimport { Signer } from '../models/common'\nimport { Transaction, validate } from '../models/transactions'\n\n/**\n * Takes several transactions with Signer fields (in object or blob form) and creates a\n * single transaction with all Signers that then gets signed and returned.\n *\n * @param transactions - An array of signed Transactions (in object or blob form) to combine into a single signed Transaction.\n * @returns A single signed Transaction which has all Signers from transactions within it.\n * @throws ValidationError if:\n * - There were no transactions given to sign\n * - The SigningPubKey field is not the empty string in any given transaction\n * - Any transaction is missing a Signers field.\n * @category Signing\n */\nfunction multisign(transactions: Array<Transaction | string>): string {\n  if (transactions.length === 0) {\n    throw new ValidationError('There were 0 transactions to multisign')\n  }\n\n  const decodedTransactions: Transaction[] = transactions.map(\n    (txOrBlob: string | Transaction) => {\n      return getDecodedTransaction(txOrBlob)\n    },\n  )\n\n  decodedTransactions.forEach((tx) => {\n    /*\n     * This will throw a more clear error for JS users if any of the supplied transactions has incorrect formatting\n     */\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- validate does not accept Transaction type\n    validate(tx as unknown as Record<string, unknown>)\n    if (tx.Signers == null || tx.Signers.length === 0) {\n      throw new ValidationError(\n        \"For multisigning all transactions must include a Signers field containing an array of signatures. You may have forgotten to pass the 'forMultisign' parameter when signing.\",\n      )\n    }\n\n    if (tx.SigningPubKey !== '') {\n      throw new ValidationError(\n        'SigningPubKey must be an empty string for all transactions when multisigning.',\n      )\n    }\n  })\n\n  validateTransactionEquivalence(decodedTransactions)\n\n  return encode(getTransactionWithAllSigners(decodedTransactions))\n}\n\n/**\n * Verifies that the given transaction has a valid signature based on public-key encryption.\n *\n * @param tx - A transaction to verify the signature of. (Can be in object or encoded string format).\n * @param [publicKey] Specific public key to use to verify. If not specified the `SigningPublicKey` of tx will be used.\n * @returns Returns true if tx has a valid signature, and returns false otherwise.\n * @throws Error when transaction is missing TxnSignature\n * @throws Error when publicKey is not provided and transaction is missing SigningPubKey\n * @category Utilities\n */\nfunction verifySignature(\n  tx: Transaction | string,\n  publicKey?: string,\n): boolean {\n  const decodedTx: Transaction = getDecodedTransaction(tx)\n  let key = publicKey\n\n  // Need a SignedTransaction class where TxnSignature is not optional.\n  if (typeof decodedTx.TxnSignature !== 'string' || !decodedTx.TxnSignature) {\n    throw new Error('Transaction is missing a signature, TxnSignature')\n  }\n\n  if (!key) {\n    // Need a SignedTransaction class where TxnSignature is not optional.\n    if (\n      typeof decodedTx.SigningPubKey !== 'string' ||\n      !decodedTx.SigningPubKey\n    ) {\n      throw new Error('Transaction is missing a public key, SigningPubKey')\n    }\n    key = decodedTx.SigningPubKey\n  }\n\n  return verify(encodeForSigning(decodedTx), decodedTx.TxnSignature, key)\n}\n\n/**\n * The transactions should all be equal except for the 'Signers' field.\n *\n * @param transactions - An array of Transactions which are expected to be equal other than 'Signers'.\n * @throws ValidationError if the transactions are not equal in any field other than 'Signers'.\n */\nfunction validateTransactionEquivalence(transactions: Transaction[]): void {\n  const exampleTransaction = JSON.stringify({\n    ...transactions[0],\n    Signers: null,\n  })\n  if (\n    transactions\n      .slice(1)\n      .some(\n        (tx) => JSON.stringify({ ...tx, Signers: null }) !== exampleTransaction,\n      )\n  ) {\n    throw new ValidationError(\n      'txJSON is not the same for all signedTransactions',\n    )\n  }\n}\n\nfunction getTransactionWithAllSigners(\n  transactions: Transaction[],\n): Transaction {\n  // Signers must be sorted in the combined transaction - See compareSigners' documentation for more details\n  const sortedSigners: Signer[] = transactions\n    .flatMap((tx) => tx.Signers ?? [])\n    .sort(compareSigners)\n\n  return { ...transactions[0], Signers: sortedSigners }\n}\n\n/**\n * If presented in binary form, the Signers array must be sorted based on\n * the numeric value of the signer addresses, with the lowest value first.\n * (If submitted as JSON, the submit_multisigned method handles this automatically.)\n * https://xrpl.org/multi-signing.html.\n *\n * @param left - A Signer to compare with.\n * @param right - A second Signer to compare with.\n * @returns 1 if left \\> right, 0 if left = right, -1 if left \\< right, and null if left or right are NaN.\n */\nfunction compareSigners(left: Signer, right: Signer): number {\n  return addressToBigNumber(left.Signer.Account).comparedTo(\n    addressToBigNumber(right.Signer.Account),\n  )\n}\n\nconst NUM_BITS_IN_HEX = 16\n\nfunction addressToBigNumber(address: string): BigNumber {\n  const hex = bytesToHex(decodeAccountID(address))\n  return new BigNumber(hex, NUM_BITS_IN_HEX)\n}\n\nfunction getDecodedTransaction(txOrBlob: Transaction | string): Transaction {\n  if (typeof txOrBlob === 'object') {\n    // We need this to handle X-addresses in multisigning\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We are casting here to get strong typing\n    return decode(encode(txOrBlob)) as unknown as Transaction\n  }\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We are casting here to get strong typing\n  return decode(txOrBlob) as unknown as Transaction\n}\n\nexport { verifySignature, multisign }\n", "import { HDKey } from '@scure/bip32'\nimport { mnemonicToSeedSync, validateMnemonic } from '@scure/bip39'\nimport { wordlist } from '@scure/bip39/wordlists/english'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport {\n  classicAddressToXAddress,\n  isValidXAddress,\n  xAddressToClassicAddress,\n  encodeSeed,\n} from 'ripple-address-codec'\nimport {\n  encodeForSigning,\n  encodeForMultisigning,\n  encode,\n} from 'ripple-binary-codec'\nimport {\n  deriveAddress,\n  deriveKeypair,\n  generateSeed,\n  sign,\n} from 'ripple-keypairs'\n\nimport ECDSA from '../ECDSA'\nimport { ValidationError } from '../errors'\nimport { Transaction, validate } from '../models/transactions'\nimport { ensureClassicAddress } from '../sugar/utils'\nimport { omitBy } from '../utils/collections'\nimport { hashSignedTx } from '../utils/hashes/hashLedger'\n\nimport { rfc1751MnemonicToKey } from './rfc1751'\nimport { verifySignature } from './signer'\n\nconst DEFAULT_ALGORITHM: ECDSA = ECDSA.ed25519\nconst DEFAULT_DERIVATION_PATH = \"m/44'/144'/0'/0/0\"\n\ntype ValidHDKey = HDKey & {\n  privateKey: Uint8Array\n  publicKey: Uint8Array\n}\n\nfunction validateKey(node: HDKey): asserts node is ValidHDKey {\n  if (!(node.privateKey instanceof Uint8Array)) {\n    throw new ValidationError('Unable to derive privateKey from mnemonic input')\n  }\n\n  if (!(node.publicKey instanceof Uint8Array)) {\n    throw new ValidationError('Unable to derive publicKey from mnemonic input')\n  }\n}\n\n/**\n * A utility for deriving a wallet composed of a keypair (publicKey/privateKey).\n * A wallet can be derived from either a seed, mnemonic, or entropy (array of random numbers).\n * It provides functionality to sign/verify transactions offline.\n *\n * @example\n * ```typescript\n *\n * // Derive a wallet from a base58 encoded seed.\n * const seedWallet = Wallet.fromSeed('ssZkdwURFMBXenJPbrpE14b6noJSu')\n * console.log(seedWallet)\n * // Wallet {\n * // publicKey: '02FE9932A9C4AA2AC9F0ED0F2B89302DE7C2C95F91D782DA3CF06E64E1C1216449',\n * // privateKey: '00445D0A16DD05EFAF6D5AF45E6B8A6DE4170D93C0627021A0B8E705786CBCCFF7',\n * // classicAddress: 'rG88FVLjvYiQaGftSa1cKuE2qNx7aK5ivo',\n * // seed: 'ssZkdwURFMBXenJPbrpE14b6noJSu'\n * // }.\n *\n * // Sign a JSON Transaction\n *  const signed = seedWallet.signTransaction({\n *      TransactionType: 'Payment',\n *      Account: 'rG88FVLjvYiQaGftSa1cKuE2qNx7aK5ivo'\n *      ...........\n * }).\n *\n * console.log(signed)\n * // '1200007321......B01BE1DFF3'.\n * console.log(decode(signed))\n * // {\n * //   TransactionType: 'Payment',\n * //   SigningPubKey: '02FE9932A9C4AA2AC9F0ED0F2B89302DE7C2C95F91D782DA3CF06E64E1C1216449',\n * //   TxnSignature: '3045022100AAD......5B631ABD21171B61B07D304',\n * //   Account: 'rG88FVLjvYiQaGftSa1cKuE2qNx7aK5ivo'\n * //   ...........\n * // }\n * ```\n *\n * @category Signing\n */\nexport class Wallet {\n  public readonly publicKey: string\n  public readonly privateKey: string\n  public readonly classicAddress: string\n  public readonly seed?: string\n\n  /**\n   * Creates a new Wallet.\n   *\n   * @param publicKey - The public key for the account.\n   * @param privateKey - The private key used for signing transactions for the account.\n   * @param opts - (Optional) Options to initialize a Wallet.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @param opts.seed - The seed used to derive the account keys.\n   */\n  public constructor(\n    publicKey: string,\n    privateKey: string,\n    opts: {\n      masterAddress?: string\n      seed?: string\n    } = {},\n  ) {\n    this.publicKey = publicKey\n    this.privateKey = privateKey\n    this.classicAddress = opts.masterAddress\n      ? ensureClassicAddress(opts.masterAddress)\n      : deriveAddress(publicKey)\n    this.seed = opts.seed\n  }\n\n  /**\n   * Alias for wallet.classicAddress.\n   *\n   * @returns The wallet's classic address.\n   */\n  public get address(): string {\n    return this.classicAddress\n  }\n\n  /**\n   * `generate()` creates a new random Wallet. In order to make this a valid account on ledger, you must\n   * Send XRP to it. On test networks that can be done with \"faucets\" which send XRP to any account which asks\n   * For it. You can call `client.fundWallet()` in order to generate credentials and fund the account on test networks.\n   *\n   * @example\n   * ```ts\n   * const { Wallet } = require('xrpl')\n   * const wallet = Wallet.generate()\n   * ```\n   *\n   * @param algorithm - The digital signature algorithm to generate an address for.\n   * @returns A new Wallet derived from a generated seed.\n   *\n   * @throws ValidationError when signing algorithm isn't valid\n   */\n  public static generate(algorithm: ECDSA = DEFAULT_ALGORITHM): Wallet {\n    if (!Object.values(ECDSA).includes(algorithm)) {\n      throw new ValidationError('Invalid cryptographic signing algorithm')\n    }\n    const seed = generateSeed({ algorithm })\n    return Wallet.fromSeed(seed, { algorithm })\n  }\n\n  /**\n   * Derives a wallet from a seed.\n   *\n   * @param seed - A string used to generate a keypair (publicKey/privateKey) to derive a wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.algorithm - The digital signature algorithm to generate an address for.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @returns A Wallet derived from a seed.\n   */\n  public static fromSeed(\n    seed: string,\n    opts: { masterAddress?: string; algorithm?: ECDSA } = {},\n  ): Wallet {\n    return Wallet.deriveWallet(seed, {\n      algorithm: opts.algorithm,\n      masterAddress: opts.masterAddress,\n    })\n  }\n\n  /**\n   * Derives a wallet from a secret (AKA a seed).\n   *\n   * @param secret - A string used to generate a keypair (publicKey/privateKey) to derive a wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.algorithm - The digital signature algorithm to generate an address for.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @returns A Wallet derived from a secret (AKA a seed).\n   */\n  // eslint-disable-next-line @typescript-eslint/member-ordering -- Member is used as a function here\n  public static fromSecret = Wallet.fromSeed\n\n  /**\n   * Derives a wallet from an entropy (array of random numbers).\n   *\n   * @param entropy - An array of random numbers to generate a seed used to derive a wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.algorithm - The digital signature algorithm to generate an address for.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @returns A Wallet derived from an entropy.\n   */\n  public static fromEntropy(\n    entropy: Uint8Array | number[],\n    opts: { masterAddress?: string; algorithm?: ECDSA } = {},\n  ): Wallet {\n    const algorithm = opts.algorithm ?? DEFAULT_ALGORITHM\n    const options = {\n      entropy: Uint8Array.from(entropy),\n      algorithm,\n    }\n    const seed = generateSeed(options)\n    return Wallet.deriveWallet(seed, {\n      algorithm,\n      masterAddress: opts.masterAddress,\n    })\n  }\n\n  /**\n   * Derives a wallet from a bip39 or RFC1751 mnemonic (Defaults to bip39).\n   *\n   * @deprecated since version 2.6.1.\n   * Will be deleted in version 3.0.0.\n   * This representation is currently deprecated in rippled.\n   * You should use another method to represent your keys such as a seed or public/private keypair.\n   *\n   * @param mnemonic - A string consisting of words (whitespace delimited) used to derive a wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @param opts.derivationPath - The path to derive a keypair (publicKey/privateKey). Only used for bip39 conversions.\n   * @param opts.mnemonicEncoding - If set to 'rfc1751', this interprets the mnemonic as a rippled RFC1751 mnemonic like\n   *                          `wallet_propose` generates in rippled. Otherwise the function defaults to bip39 decoding.\n   * @param opts.algorithm - Only used if opts.mnemonicEncoding is 'rfc1751'. Allows the mnemonic to generate its\n   *                         secp256k1 seed, or its ed25519 seed. By default, it will generate the secp256k1 seed\n   *                         to match the rippled `wallet_propose` default algorithm.\n   * @returns A Wallet derived from a mnemonic.\n   * @throws ValidationError if unable to derive private key from mnemonic input.\n   */\n  public static fromMnemonic(\n    mnemonic: string,\n    opts: {\n      masterAddress?: string\n      derivationPath?: string\n      mnemonicEncoding?: 'bip39' | 'rfc1751'\n      algorithm?: ECDSA\n    } = {},\n  ): Wallet {\n    if (opts.mnemonicEncoding === 'rfc1751') {\n      return Wallet.fromRFC1751Mnemonic(mnemonic, {\n        masterAddress: opts.masterAddress,\n        algorithm: opts.algorithm,\n      })\n    }\n    // Otherwise decode using bip39's mnemonic standard\n    if (!validateMnemonic(mnemonic, wordlist)) {\n      throw new ValidationError(\n        'Unable to parse the given mnemonic using bip39 encoding',\n      )\n    }\n\n    const seed = mnemonicToSeedSync(mnemonic)\n    const masterNode = HDKey.fromMasterSeed(seed)\n    const node = masterNode.derive(\n      opts.derivationPath ?? DEFAULT_DERIVATION_PATH,\n    )\n    validateKey(node)\n\n    const publicKey = bytesToHex(node.publicKey)\n    const privateKey = bytesToHex(node.privateKey)\n    return new Wallet(publicKey, `00${privateKey}`, {\n      masterAddress: opts.masterAddress,\n    })\n  }\n\n  /**\n   * Derives a wallet from a RFC1751 mnemonic, which is how `wallet_propose` encodes mnemonics.\n   *\n   * @param mnemonic - A string consisting of words (whitespace delimited) used to derive a wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @param opts.algorithm - The digital signature algorithm to generate an address for.\n   * @returns A Wallet derived from a mnemonic.\n   */\n  private static fromRFC1751Mnemonic(\n    mnemonic: string,\n    opts: { masterAddress?: string; algorithm?: ECDSA },\n  ): Wallet {\n    const seed = rfc1751MnemonicToKey(mnemonic)\n    let encodeAlgorithm: 'ed25519' | 'secp256k1'\n    if (opts.algorithm === ECDSA.ed25519) {\n      encodeAlgorithm = 'ed25519'\n    } else {\n      // Defaults to secp256k1 since that's the default for `wallet_propose`\n      encodeAlgorithm = 'secp256k1'\n    }\n    const encodedSeed = encodeSeed(seed, encodeAlgorithm)\n    return Wallet.fromSeed(encodedSeed, {\n      masterAddress: opts.masterAddress,\n      algorithm: opts.algorithm,\n    })\n  }\n\n  /**\n   * Derive a Wallet from a seed.\n   *\n   * @param seed - The seed used to derive the wallet.\n   * @param opts - (Optional) Options to derive a Wallet.\n   * @param opts.algorithm - The digital signature algorithm to generate an address for.\n   * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n   * @returns A Wallet derived from the seed.\n   */\n  private static deriveWallet(\n    seed: string,\n    opts: { masterAddress?: string; algorithm?: ECDSA } = {},\n  ): Wallet {\n    const { publicKey, privateKey } = deriveKeypair(seed, {\n      algorithm: opts.algorithm ?? DEFAULT_ALGORITHM,\n    })\n    return new Wallet(publicKey, privateKey, {\n      seed,\n      masterAddress: opts.masterAddress,\n    })\n  }\n\n  /**\n   * Signs a transaction offline.\n   *\n   * @example\n   *\n   * ```ts\n   * const { Client, Wallet } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * async function signTransaction() {\n   *   await client.connect()\n   *   const { balance: balance1, wallet: wallet1 } = client.fundWallet()\n   *   const { balance: balance2, wallet: wallet2 } = client.fundWallet()\n   *\n   *   const transaction = {\n   *     TransactionType: 'Payment',\n   *     Account: wallet1.address,\n   *     Destination: wallet2.address,\n   *     Amount: '10'\n   *   }\n   *\n   *   try {\n   *     await client.autofill(transaction)\n   *     const { tx_blob: signed_tx_blob, hash} = await wallet1.sign(transaction)\n   *     console.log(signed_tx_blob)\n   *   } catch (error) {\n   *     console.error(`Failed to sign transaction: ${error}`)\n   *   }\n   *   const result = await client.submit(signed_tx_blob)\n   *   await client.disconnect()\n   * }\n   *\n   * signTransaction()\n   * ```\n   * In order for a transaction to be validated, it must be signed by the account sending the transaction to prove\n   * That the owner is actually the one deciding to take that action.\n   *\n   * In this example, we created, signed, and then submitted a transaction to testnet. You may notice that the\n   * Output of `sign` includes a `tx_blob` and a `hash`, both of which are needed to submit & verify the results.\n   * Note: If you pass a `Wallet` to `client.submit` or `client.submitAndWait` it will do signing like this under the hood.\n   *\n   * `tx_blob` is a binary representation of a transaction on the XRP Ledger. It's essentially a byte array\n   * that encodes all of the data necessary to execute the transaction, including the source address, the destination\n   * address, the amount, and any additional fields required for the specific transaction type.\n   *\n   * `hash` is a unique identifier that's generated from the signed transaction data on the XRP Ledger. It's essentially\n   * A cryptographic digest of the signed transaction blob, created using a hash function. The signed transaction hash is\n   * Useful for identifying and tracking specific transactions on the XRP Ledger. It can be used to query transaction\n   * Information, verify the authenticity of a transaction, and detect any tampering with the transaction data.\n   *\n   * @param this - Wallet instance.\n   * @param transaction - A transaction to be signed offline.\n   * @param multisign - Specify true/false to use multisign or actual address (classic/x-address) to make multisign tx request.\n   * @returns A signed transaction.\n   * @throws ValidationError if the transaction is already signed or does not encode/decode to same result.\n   * @throws XrplError if the issued currency being signed is XRP ignoring case.\n   */\n  // eslint-disable-next-line max-lines-per-function -- introduced more checks to support both string and boolean inputs.\n  public sign(\n    this: Wallet,\n    transaction: Transaction,\n    multisign?: boolean | string,\n  ): {\n    tx_blob: string\n    hash: string\n  } {\n    let multisignAddress: boolean | string = false\n    if (typeof multisign === 'string' && multisign.startsWith('X')) {\n      multisignAddress = multisign\n    } else if (multisign) {\n      multisignAddress = this.classicAddress\n    }\n\n    // clean null & undefined valued tx properties\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- ensure Transaction flows through\n    const tx = omitBy(\n      { ...transaction },\n      (value) => value == null,\n    ) as unknown as Transaction\n\n    if (tx.TxnSignature || tx.Signers) {\n      throw new ValidationError(\n        'txJSON must not contain \"TxnSignature\" or \"Signers\" properties',\n      )\n    }\n\n    removeTrailingZeros(tx)\n\n    /*\n     * This will throw a more clear error for JS users if the supplied transaction has incorrect formatting\n     */\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- validate does not accept Transaction type\n    validate(tx as unknown as Record<string, unknown>)\n\n    const txToSignAndEncode = { ...tx }\n\n    txToSignAndEncode.SigningPubKey = multisignAddress ? '' : this.publicKey\n\n    if (multisignAddress) {\n      const signer = {\n        Account: multisignAddress,\n        SigningPubKey: this.publicKey,\n        TxnSignature: computeSignature(\n          txToSignAndEncode,\n          this.privateKey,\n          multisignAddress,\n        ),\n      }\n      txToSignAndEncode.Signers = [{ Signer: signer }]\n    } else {\n      txToSignAndEncode.TxnSignature = computeSignature(\n        txToSignAndEncode,\n        this.privateKey,\n      )\n    }\n\n    const serialized = encode(txToSignAndEncode)\n    return {\n      tx_blob: serialized,\n      hash: hashSignedTx(serialized),\n    }\n  }\n\n  /**\n   * Verifies a signed transaction offline.\n   *\n   * @param signedTransaction - A signed transaction (hex string of signTransaction result) to be verified offline.\n   * @returns Returns true if a signedTransaction is valid.\n   * @throws {Error} Transaction is missing a signature, TxnSignature\n   */\n  public verifyTransaction(signedTransaction: Transaction | string): boolean {\n    return verifySignature(signedTransaction, this.publicKey)\n  }\n\n  /**\n   * Gets an X-address in Testnet/Mainnet format.\n   *\n   * @param tag - A tag to be included within the X-address.\n   * @param isTestnet - A boolean to indicate if X-address should be in Testnet (true) or Mainnet (false) format.\n   * @returns An X-address.\n   */\n  public getXAddress(tag: number | false = false, isTestnet = false): string {\n    return classicAddressToXAddress(this.classicAddress, tag, isTestnet)\n  }\n}\n\n/**\n * Signs a transaction with the proper signing encoding.\n *\n * @param tx - A transaction to sign.\n * @param privateKey - A key to sign the transaction with.\n * @param signAs - Multisign only. An account address to include in the Signer field.\n * Can be either a classic address or an XAddress.\n * @returns A signed transaction in the proper format.\n */\nfunction computeSignature(\n  tx: Transaction,\n  privateKey: string,\n  signAs?: string,\n): string {\n  if (signAs) {\n    const classicAddress = isValidXAddress(signAs)\n      ? xAddressToClassicAddress(signAs).classicAddress\n      : signAs\n\n    return sign(encodeForMultisigning(tx, classicAddress), privateKey)\n  }\n  return sign(encodeForSigning(tx), privateKey)\n}\n\n/**\n * Remove trailing insignificant zeros for non-XRP Payment amount.\n * This resolves the serialization mismatch bug when encoding/decoding a non-XRP Payment transaction\n * with an amount that contains trailing insignificant zeros; for example, '123.4000' would serialize\n * to '123.4' and cause a mismatch.\n *\n * @param tx - The transaction prior to signing.\n */\nfunction removeTrailingZeros(tx: Transaction): void {\n  if (\n    tx.TransactionType === 'Payment' &&\n    typeof tx.Amount !== 'string' &&\n    tx.Amount.value.includes('.') &&\n    tx.Amount.value.endsWith('0')\n  ) {\n    // eslint-disable-next-line no-param-reassign -- Required to update Transaction.Amount.value\n    tx.Amount = { ...tx.Amount }\n    // eslint-disable-next-line no-param-reassign -- Required to update Transaction.Amount.value\n    tx.Amount.value = new BigNumber(tx.Amount.value).toString()\n  }\n}\n", "import type { Client } from '../client'\nimport { XRPLFaucetError } from '../errors'\n\nexport interface FaucetWallet {\n  account: {\n    xAddress: string\n    classicAddress?: string\n    secret: string\n  }\n  amount: number\n  balance: number\n}\n\nexport enum FaucetNetwork {\n  Testnet = 'faucet.altnet.rippletest.net',\n  Devnet = 'faucet.devnet.rippletest.net',\n}\n\nexport const FaucetNetworkPaths: Record<string, string> = {\n  [FaucetNetwork.Testnet]: '/accounts',\n  [FaucetNetwork.Devnet]: '/accounts',\n}\n\n/**\n * Get the faucet host based on the Client connection.\n *\n * @param client - Client.\n * @returns A {@link FaucetNetwork}.\n * @throws When the client url is not on altnet or devnet.\n */\nexport function getFaucetHost(client: Client): FaucetNetwork | undefined {\n  const connectionUrl = client.url\n\n  // 'altnet' for Ripple Testnet server and 'testnet' for XRPL Labs Testnet server\n  if (connectionUrl.includes('altnet') || connectionUrl.includes('testnet')) {\n    return FaucetNetwork.Testnet\n  }\n\n  if (connectionUrl.includes('sidechain-net2')) {\n    throw new XRPLFaucetError(\n      'Cannot fund an account on an issuing chain. Accounts must be created via the bridge.',\n    )\n  }\n\n  if (connectionUrl.includes('devnet')) {\n    return FaucetNetwork.Devnet\n  }\n\n  throw new XRPLFaucetError('Faucet URL is not defined or inferrable.')\n}\n\n/**\n * Get the faucet pathname based on the faucet hostname.\n *\n * @param hostname - hostname.\n * @returns A String with the correct path for the input hostname.\n * If hostname undefined or cannot find (key, value) pair in {@link FaucetNetworkPaths}, defaults to '/accounts'\n */\nexport function getDefaultFaucetPath(hostname: string | undefined): string {\n  if (hostname === undefined) {\n    return '/accounts'\n  }\n  return FaucetNetworkPaths[hostname] || '/accounts'\n}\n", "import { isValidClassicAddress } from 'ripple-address-codec'\n\nimport type { Client } from '../client'\nimport { XRPLFaucetError } from '../errors'\n\nimport {\n  FaucetWallet,\n  getFaucetHost,\n  getDefaultFaucetPath,\n} from './defaultFaucets'\n\nimport { Wallet } from '.'\n\n// Interval to check an account balance\nconst INTERVAL_SECONDS = 1\n// Maximum attempts to retrieve a balance\nconst MAX_ATTEMPTS = 20\n\nexport interface FundingOptions {\n  /**\n   *  A custom amount to fund, if undefined or null, the default amount will be 1000.\n   */\n  amount?: string\n  /**\n   * A custom host for a faucet server. On devnet, testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct server automatically. In other environments, or if you would like to customize\n   * the faucet host in devnet or testnet, you should provide the host using this option.\n   */\n  faucetHost?: string\n  /**\n   * A custom path for a faucet server. On devnet,\n   * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct path automatically. In other environments,\n   * or if you would like to customize the faucet path in devnet or testnet,\n   * you should provide the path using this option.\n   * Ex: client.fundWallet(null,{'faucet.altnet.rippletest.net', '/accounts'})\n   * specifies a request to 'faucet.altnet.rippletest.net/accounts' to fund a new wallet.\n   */\n  faucetPath?: string\n  /**\n   * An optional field to indicate the use case context of the faucet transaction\n   * Ex: integration test, code snippets.\n   */\n  usageContext?: string\n}\n\n/**\n * Parameters to pass into a faucet request to fund an XRP account.\n */\nexport interface FaucetRequestBody {\n  /**\n   * The address to fund. If no address is provided the faucet will fund a random account.\n   */\n  destination?: string\n  /**\n   * The total amount of XRP to fund the account with.\n   */\n  xrpAmount?: string\n  /**\n   * An optional field to indicate the use case context of the faucet transaction\n   * Ex: integration test, code snippets.\n   */\n  usageContext?: string\n  /**\n   * Information about the context of where the faucet is being called from.\n   * Ex: xrpl.js or xrpl-py\n   */\n  userAgent: string\n}\n\n/**\n * Generate a new wallet to fund if no existing wallet is provided or its address is invalid.\n *\n * @param wallet - Optional existing wallet.\n * @returns The wallet to fund.\n */\nexport function generateWalletToFund(wallet?: Wallet | null): Wallet {\n  if (wallet && isValidClassicAddress(wallet.classicAddress)) {\n    return wallet\n  }\n  return Wallet.generate()\n}\n\n/**\n * Get the starting balance of the wallet.\n *\n * @param client - The client object.\n * @param classicAddress - The classic address of the wallet.\n * @returns The starting balance.\n */\nexport async function getStartingBalance(\n  client: Client,\n  classicAddress: string,\n): Promise<number> {\n  let startingBalance = 0\n  try {\n    startingBalance = Number(await client.getXrpBalance(classicAddress))\n  } catch {\n    // startingBalance remains '0'\n  }\n  return startingBalance\n}\n\nexport interface FundWalletOptions {\n  faucetHost?: string\n  faucetPath?: string\n  amount?: string\n  usageContext?: string\n}\n\n/**\n *\n * Helper function to request funding from a faucet. Should not be called directly from outside the xrpl.js library.\n *\n * @param options - See below\n * @param options.faucetHost - A custom host for a faucet server. On devnet,\n * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n * attempt to determine the correct server automatically. In other environments,\n * or if you would like to customize the faucet host in devnet or testnet,\n * you should provide the host using this option.\n * @param options.faucetPath - A custom path for a faucet server. On devnet,\n * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n * attempt to determine the correct path automatically. In other environments,\n * or if you would like to customize the faucet path in devnet or testnet,\n * you should provide the path using this option.\n * Ex: client.fundWallet(null,{'faucet.altnet.rippletest.net', '/accounts'})\n * specifies a request to 'faucet.altnet.rippletest.net/accounts' to fund a new wallet.\n * @param options.amount - A custom amount to fund, if undefined or null, the default amount will be 1000.\n * @param client - A connection to the XRPL to send requests and transactions.\n * @param startingBalance - The amount of XRP in the given walletToFund on ledger already.\n * @param walletToFund - An existing XRPL Wallet to fund.\n * @param postBody - The content to send the faucet to indicate which address to fund, how much to fund it, and\n * where the request is coming from.\n * @returns A promise that resolves to a funded wallet and the balance within it.\n */\n// eslint-disable-next-line max-params -- Helper function created for organizational purposes\nexport async function requestFunding(\n  options: FundingOptions,\n  client: Client,\n  startingBalance: number,\n  walletToFund: Wallet,\n  postBody: FaucetRequestBody,\n): Promise<{\n  wallet: Wallet\n  balance: number\n}> {\n  const hostname = options.faucetHost ?? getFaucetHost(client)\n  if (!hostname) {\n    throw new XRPLFaucetError('No faucet hostname could be derived')\n  }\n  const pathname = options.faucetPath ?? getDefaultFaucetPath(hostname)\n  const response = await fetch(`https://${hostname}${pathname}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(postBody),\n  })\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- it can be anything\n  const body = await response.json()\n  if (\n    response.ok &&\n    response.headers.get('Content-Type')?.startsWith('application/json')\n  ) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- It's a FaucetWallet\n    const classicAddress = (body as FaucetWallet).account.classicAddress\n    return processSuccessfulResponse(\n      client,\n      classicAddress,\n      walletToFund,\n      startingBalance,\n    )\n  }\n  return processError(response, body)\n}\n\n// eslint-disable-next-line max-params -- Only used as a helper function, lines inc due to added balance.\nasync function processSuccessfulResponse(\n  client: Client,\n  classicAddress: string | undefined,\n  walletToFund: Wallet,\n  startingBalance: number,\n): Promise<{\n  wallet: Wallet\n  balance: number\n}> {\n  if (!classicAddress) {\n    return Promise.reject(\n      new XRPLFaucetError(`The faucet account is undefined`),\n    )\n  }\n  try {\n    // Check at regular interval if the address is enabled on the XRPL and funded\n    const updatedBalance = await getUpdatedBalance(\n      client,\n      classicAddress,\n      startingBalance,\n    )\n\n    if (updatedBalance > startingBalance) {\n      return {\n        wallet: walletToFund,\n        balance: updatedBalance,\n      }\n    }\n    throw new XRPLFaucetError(\n      `Unable to fund address with faucet after waiting ${\n        INTERVAL_SECONDS * MAX_ATTEMPTS\n      } seconds`,\n    )\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new XRPLFaucetError(err.message)\n    }\n    throw err\n  }\n}\n\nasync function processError(response: Response, body): Promise<never> {\n  return Promise.reject(\n    new XRPLFaucetError(\n      `Request failed: ${JSON.stringify({\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- json response could be anything\n        body: body || {},\n        contentType: response.headers.get('Content-Type'),\n        statusCode: response.status,\n      })}`,\n    ),\n  )\n}\n\n/**\n * Check at regular interval if the address is enabled on the XRPL and funded.\n *\n * @param client - Client.\n * @param address - The account address to check.\n * @param originalBalance - The initial balance before the funding.\n * @returns A Promise boolean.\n */\nasync function getUpdatedBalance(\n  client: Client,\n  address: string,\n  originalBalance: number,\n): Promise<number> {\n  return new Promise((resolve, reject) => {\n    let attempts = MAX_ATTEMPTS\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises -- Not actually misused here, different resolve\n    const interval = setInterval(async () => {\n      if (attempts < 0) {\n        clearInterval(interval)\n        resolve(originalBalance)\n      } else {\n        attempts -= 1\n      }\n\n      try {\n        let newBalance\n        try {\n          newBalance = Number(await client.getXrpBalance(address))\n        } catch {\n          /* newBalance remains undefined */\n        }\n\n        if (newBalance > originalBalance) {\n          clearInterval(interval)\n          resolve(newBalance)\n        }\n      } catch (err) {\n        clearInterval(interval)\n        if (err instanceof Error) {\n          reject(\n            new XRPLFaucetError(\n              `Unable to check if the address ${address} balance has increased. Error: ${err.message}`,\n            ),\n          )\n        }\n        reject(err)\n      }\n    }, INTERVAL_SECONDS * 1000)\n  })\n}\n", "/* eslint-disable max-classes-per-file -- Needs to be a wrapper for ws */\nimport { EventEmitter } from 'eventemitter3'\n\n// Define the global WebSocket class found on the native browser\ndeclare class WebSocket {\n  public onclose?: (closeEvent: CloseEvent) => void\n  public onopen?: (openEvent: Event) => void\n  public onerror?: (error: Error) => void\n  public onmessage?: (message: MessageEvent) => void\n  public readyState: number\n  public constructor(url: string)\n  public close(code?: number, reason?: Uint8Array): void\n  public send(message: string): void\n}\n\ninterface WSWrapperOptions {\n  perMessageDeflate: boolean\n  handshakeTimeout: number\n  protocolVersion: number\n  origin: string\n  maxPayload: number\n  followRedirects: boolean\n  maxRedirects: number\n}\n\n/**\n * Provides `EventEmitter` interface for native browser `WebSocket`,\n * same, as `ws` package provides.\n */\nexport default class WSWrapper extends EventEmitter {\n  public static CONNECTING = 0\n  public static OPEN = 1\n  public static CLOSING = 2\n\n  public static CLOSED = 3\n  private readonly ws: WebSocket\n\n  /**\n   * Constructs a browser-safe websocket.\n   *\n   * @param url - URL to connect to.\n   * @param _protocols - Not used.\n   * @param _websocketOptions - Not used.\n   */\n  public constructor(\n    url: string,\n    _protocols: string | string[] | WSWrapperOptions | undefined,\n    _websocketOptions: WSWrapperOptions,\n  ) {\n    super()\n\n    this.ws = new WebSocket(url)\n\n    this.ws.onclose = (closeEvent: CloseEvent): void => {\n      let reason: Uint8Array | undefined\n      if (closeEvent.reason) {\n        const enc = new TextEncoder()\n        reason = enc.encode(closeEvent.reason)\n      }\n      this.emit('close', closeEvent.code, reason)\n    }\n\n    this.ws.onopen = (): void => {\n      this.emit('open')\n    }\n\n    this.ws.onerror = (error): void => {\n      this.emit('error', error)\n    }\n\n    this.ws.onmessage = (message: MessageEvent): void => {\n      this.emit('message', message.data)\n    }\n  }\n\n  /**\n   * Get the ready state of the websocket.\n   *\n   * @returns The Websocket's ready state.\n   */\n  public get readyState(): number {\n    return this.ws.readyState\n  }\n\n  /**\n   * Closes the websocket.\n   *\n   * @param code - Close code.\n   * @param reason - Close reason.\n   */\n  public close(code?: number, reason?: Buffer): void {\n    if (this.readyState === 1) {\n      this.ws.close(code, reason)\n    }\n  }\n\n  /**\n   * Sends a message over the Websocket connection.\n   *\n   * @param message - Message to send.\n   */\n  public send(message: string): void {\n    this.ws.send(message)\n  }\n}\n", "/**\n * Manage all the requests made to the websocket, and their async responses\n * that come in from the WebSocket. Because they come in over the WS connection\n * after-the-fact.\n */\nexport default class ConnectionManager {\n  private promisesAwaitingConnection: Array<{\n    resolve: (value?: void | PromiseLike<void>) => void\n    reject: (value?: Error) => void\n  }> = []\n\n  /**\n   * Resolves all awaiting connections.\n   */\n  public resolveAllAwaiting(): void {\n    this.promisesAwaitingConnection.map(({ resolve }) => resolve())\n    this.promisesAwaitingConnection = []\n  }\n\n  /**\n   * Rejects all awaiting connections.\n   *\n   * @param error - Error to throw in the rejection.\n   */\n  public rejectAllAwaiting(error: Error): void {\n    this.promisesAwaitingConnection.map(({ reject }) => reject(error))\n    this.promisesAwaitingConnection = []\n  }\n\n  /**\n   * Await a new connection.\n   *\n   * @returns A promise for resolving the connection.\n   */\n  public async awaitConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.promisesAwaitingConnection.push({ resolve, reject })\n    })\n  }\n}\n", "/*\n * Original code based on \"backo\" - https://github.com/segmentio/backo\n * MIT License - Copyright 2014 Segment.io\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n * is furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\ninterface ExponentialBackoffOptions {\n  // The min backoff duration.\n  min?: number\n  // The max backoff duration.\n  max?: number\n}\n\nconst DEFAULT_MIN = 100\nconst DEFAULT_MAX = 1000\n\n/**\n * A Back off strategy that increases exponentially. Useful with repeated\n * setTimeout calls over a network (where the destination may be down).\n */\nexport default class ExponentialBackoff {\n  private readonly ms: number\n  private readonly max: number\n  private readonly factor: number = 2\n  private numAttempts = 0\n\n  /**\n   * Constructs an ExponentialBackoff object.\n   *\n   * @param opts - The options for the object.\n   */\n  public constructor(opts: ExponentialBackoffOptions = {}) {\n    this.ms = opts.min ?? DEFAULT_MIN\n    this.max = opts.max ?? DEFAULT_MAX\n  }\n\n  /**\n   * Number of attempts for backoff so far.\n   *\n   * @returns Number of attempts.\n   */\n  public get attempts(): number {\n    return this.numAttempts\n  }\n\n  /**\n   * Return the backoff duration.\n   *\n   * @returns The backoff duration in milliseconds.\n   */\n  public duration(): number {\n    const ms = this.ms * this.factor ** this.numAttempts\n    this.numAttempts += 1\n    return Math.floor(Math.min(ms, this.max))\n  }\n\n  /**\n   * Reset the number of attempts.\n   */\n  public reset(): void {\n    this.numAttempts = 0\n  }\n}\n", "import {\n  ResponseFormatError,\n  RippledError,\n  TimeoutError,\n  XrplError,\n} from '../errors'\nimport type { APIVersion } from '../models'\nimport { Response, RequestResponseMap } from '../models/methods'\nimport { BaseRequest, ErrorResponse } from '../models/methods/baseMethod'\n\ninterface PromiseEntry<T> {\n  resolve: (value: T | PromiseLike<T>) => void\n  reject: (value: Error) => void\n  timer: ReturnType<typeof setTimeout>\n}\n\n/**\n * Manage all the requests made to the websocket, and their async responses\n * that come in from the WebSocket. Responses come in over the WS connection\n * after-the-fact, so this manager will tie that response to resolve the\n * original request.\n */\nexport default class RequestManager {\n  private nextId = 0\n  private readonly promisesAwaitingResponse = new Map<\n    string | number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Necessary and typed wrapper in addPromise method\n    PromiseEntry<any>\n  >()\n\n  /**\n   * Adds a promise to the collection of promises awaiting response. Handles typing with generics.\n   *\n   * @template T The generic type parameter representing the resolved value type.\n   * @param newId - The identifier for the new promise.\n   * @param timer - The timer associated with the promise.\n   * @returns A promise that resolves to the specified generic type.\n   */\n  public async addPromise<\n    R extends BaseRequest,\n    T = RequestResponseMap<R, APIVersion>,\n  >(newId: string | number, timer: ReturnType<typeof setTimeout>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.promisesAwaitingResponse.set(newId, {\n        resolve,\n        reject,\n        timer,\n      })\n    })\n  }\n\n  /**\n   * Successfully resolves a request.\n   *\n   * @param id - ID of the request.\n   * @param response - Response to return.\n   * @throws Error if no existing promise with the given ID.\n   */\n  public resolve(\n    id: string | number,\n    response: Partial<Response<APIVersion>>,\n  ): void {\n    const promise = this.promisesAwaitingResponse.get(id)\n    if (promise == null) {\n      throw new XrplError(`No existing promise with id ${id}`, {\n        type: 'resolve',\n        response,\n      })\n    }\n    clearTimeout(promise.timer)\n    promise.resolve(response)\n    this.deletePromise(id)\n  }\n\n  /**\n   * Rejects a request.\n   *\n   * @param id - ID of the request.\n   * @param error - Error to throw with the reject.\n   * @throws Error if no existing promise with the given ID.\n   */\n  public reject(id: string | number, error: Error): void {\n    const promise = this.promisesAwaitingResponse.get(id)\n    if (promise == null) {\n      throw new XrplError(`No existing promise with id ${id}`, {\n        type: 'reject',\n        error,\n      })\n    }\n    clearTimeout(promise.timer)\n    // TODO: figure out how to have a better stack trace for an error\n    promise.reject(error)\n    this.deletePromise(id)\n  }\n\n  /**\n   * Reject all pending requests.\n   *\n   * @param error - Error to throw with the reject.\n   */\n  public rejectAll(error: Error): void {\n    this.promisesAwaitingResponse.forEach((_promise, id, _map) => {\n      this.reject(id, error)\n      this.deletePromise(id)\n    })\n  }\n\n  /**\n   * Creates a new WebSocket request. This sets up a timeout timer to catch\n   * hung responses, and a promise that will resolve with the response once\n   * the response is seen & handled.\n   *\n   * @param request - Request to create.\n   * @param timeout - Timeout length to catch hung responses.\n   * @returns Request ID, new request form, and the promise for resolving the request.\n   * @throws XrplError if request with the same ID is already pending.\n   */\n  public createRequest<\n    R extends BaseRequest,\n    T = RequestResponseMap<R, APIVersion>,\n  >(request: R, timeout: number): [string | number, string, Promise<T>] {\n    let newId: string | number\n    if (request.id == null) {\n      newId = this.nextId\n      this.nextId += 1\n    } else {\n      newId = request.id\n    }\n    const newRequest = JSON.stringify({ ...request, id: newId })\n    // Typing required for Jest running in browser\n    const timer: ReturnType<typeof setTimeout> = setTimeout(() => {\n      this.reject(\n        newId,\n        new TimeoutError(\n          `Timeout for request: ${JSON.stringify(request)} with id ${newId}`,\n          request,\n        ),\n      )\n    }, timeout)\n    /*\n     * Node.js won't exit if a timer is still running, so we tell Node to ignore.\n     * (Node will still wait for the request to complete).\n     */\n    // The following type assertions are required to get this code to pass in browser environments\n    // where setTimeout has a different type\n    // eslint-disable-next-line max-len -- Necessary to disable both rules.\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access -- Reason above.\n    if ((timer as unknown as any).unref) {\n      // eslint-disable-next-line max-len -- Necessary to disable both rules.\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call -- Reason above.\n      ;(timer as unknown as any).unref()\n    }\n    if (this.promisesAwaitingResponse.has(newId)) {\n      clearTimeout(timer)\n      throw new XrplError(\n        `Response with id '${newId}' is already pending`,\n        request,\n      )\n    }\n    const newPromise = new Promise<T>((resolve, reject) => {\n      this.promisesAwaitingResponse.set(newId, {\n        resolve,\n        reject,\n        timer,\n      })\n    })\n\n    return [newId, newRequest, newPromise]\n  }\n\n  /**\n   * Handle a \"response\". Responses match to the earlier request handlers,\n   * and resolve/reject based on the data received.\n   *\n   * @param response - The response to handle.\n   * @throws ResponseFormatError if the response format is invalid, RippledError if rippled returns an error.\n   */\n  public handleResponse(\n    response: Partial<Response<APIVersion> | ErrorResponse>,\n  ): void {\n    if (\n      response.id == null ||\n      !(typeof response.id === 'string' || typeof response.id === 'number')\n    ) {\n      throw new ResponseFormatError('valid id not found in response', response)\n    }\n    if (!this.promisesAwaitingResponse.has(response.id)) {\n      return\n    }\n    if (response.status == null) {\n      const error = new ResponseFormatError('Response has no status')\n      this.reject(response.id, error)\n    }\n    if (response.status === 'error') {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We know this must be true\n      const errorResponse = response as Partial<ErrorResponse>\n      const error = new RippledError(\n        errorResponse.error_message ?? errorResponse.error,\n        errorResponse,\n      )\n      this.reject(response.id, error)\n      return\n    }\n    if (response.status !== 'success') {\n      const error = new ResponseFormatError(\n        `unrecognized response.status: ${response.status ?? ''}`,\n        response,\n      )\n      this.reject(response.id, error)\n      return\n    }\n    // status no longer needed because error is thrown if status is not \"success\"\n    delete response.status\n    this.resolve(response.id, response)\n  }\n\n  /**\n   * Delete a promise after it has been returned.\n   *\n   * @param id - ID of the request.\n   */\n  private deletePromise(id: string | number): void {\n    this.promisesAwaitingResponse.delete(id)\n  }\n}\n", "/* eslint-disable max-lines -- Connection is a large file w/ lots of imports/exports */\nimport type { Agent } from 'http'\n\nimport { bytesToHex, hexToString } from '@xrplf/isomorphic/utils'\nimport WebSocket, { ClientOptions } from '@xrplf/isomorphic/ws'\nimport { EventEmitter } from 'eventemitter3'\n\nimport {\n  DisconnectedError,\n  NotConnectedError,\n  ConnectionError,\n  XrplError,\n} from '../errors'\nimport type { APIVersion, RequestResponseMap } from '../models'\nimport { BaseRequest } from '../models/methods/baseMethod'\n\nimport ConnectionManager from './ConnectionManager'\nimport ExponentialBackoff from './ExponentialBackoff'\nimport RequestManager from './RequestManager'\n\nconst SECONDS_PER_MINUTE = 60\nconst TIMEOUT = 20\nconst CONNECTION_TIMEOUT = 5\n\n/**\n * ConnectionOptions is the configuration for the Connection class.\n */\ninterface ConnectionOptions {\n  trace?: boolean | ((id: string, message: string) => void)\n  headers?: { [key: string]: string }\n  agent?: Agent\n  authorization?: string\n  connectionTimeout: number\n  timeout: number\n}\n\n/**\n * ConnectionUserOptions is the user-provided configuration object. All configuration\n * is optional, so any ConnectionOptions configuration that has a default value is\n * still optional at the point that the user provides it.\n */\nexport type ConnectionUserOptions = Partial<ConnectionOptions>\n\n/**\n * Represents an intentionally triggered web-socket disconnect code.\n * WebSocket spec allows 4xxx codes for app/library specific codes.\n * See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n */\nexport const INTENTIONAL_DISCONNECT_CODE = 4000\n\ntype WebsocketState = 0 | 1 | 2 | 3\n\n/**\n * Create a new websocket given your URL and optional proxy/certificate\n * configuration.\n *\n * @param url - The URL to connect to.\n * @param config - THe configuration options for the WebSocket.\n * @returns A Websocket that fits the given configuration parameters.\n */\nfunction createWebSocket(\n  url: string,\n  config: ConnectionOptions,\n): WebSocket | null {\n  const options: ClientOptions = {\n    agent: config.agent,\n  }\n  if (config.headers) {\n    options.headers = config.headers\n  }\n  if (config.authorization != null) {\n    options.headers = {\n      ...options.headers,\n      Authorization: `Basic ${btoa(config.authorization)}`,\n    }\n  }\n  const websocketOptions = { ...options }\n  return new WebSocket(url, websocketOptions)\n}\n\n/**\n * Ws.send(), but promisified.\n *\n * @param ws - Websocket to send with.\n * @param message - Message to send.\n * @returns When the message has been sent.\n */\nasync function websocketSendAsync(\n  ws: WebSocket,\n  message: string,\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    ws.send(message, (error) => {\n      if (error) {\n        reject(new DisconnectedError(error.message, error))\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n/**\n * The main Connection class. Responsible for connecting to & managing\n * an active WebSocket connection to a XRPL node.\n */\nexport class Connection extends EventEmitter {\n  private readonly url: string | undefined\n  private ws: WebSocket | null = null\n  // Typing necessary for Jest tests running in browser\n  private reconnectTimeoutID: null | ReturnType<typeof setTimeout> = null\n  // Typing necessary for Jest tests running in browser\n  private heartbeatIntervalID: null | ReturnType<typeof setTimeout> = null\n  private readonly retryConnectionBackoff = new ExponentialBackoff({\n    min: 100,\n    max: SECONDS_PER_MINUTE * 1000,\n  })\n\n  private readonly config: ConnectionOptions\n  private readonly requestManager = new RequestManager()\n  private readonly connectionManager = new ConnectionManager()\n\n  /**\n   * Creates a new Connection object.\n   *\n   * @param url - URL to connect to.\n   * @param options - Options for the Connection object.\n   */\n  public constructor(url?: string, options: ConnectionUserOptions = {}) {\n    super()\n    this.url = url\n    this.config = {\n      timeout: TIMEOUT * 1000,\n      connectionTimeout: CONNECTION_TIMEOUT * 1000,\n      ...options,\n    }\n    if (typeof options.trace === 'function') {\n      this.trace = options.trace\n    } else if (options.trace) {\n      // eslint-disable-next-line no-console -- Used for tracing only\n      this.trace = console.log\n    }\n  }\n\n  /**\n   * Gets the state of the websocket.\n   *\n   * @returns The Websocket's ready state.\n   */\n  private get state(): WebsocketState {\n    return this.ws ? this.ws.readyState : WebSocket.CLOSED\n  }\n\n  /**\n   * Returns whether the server should be connected.\n   *\n   * @returns Whether the server should be connected.\n   */\n  private get shouldBeConnected(): boolean {\n    return this.ws !== null\n  }\n\n  /**\n   * Returns whether the websocket is connected.\n   *\n   * @returns Whether the websocket connection is open.\n   */\n  public isConnected(): boolean {\n    return this.state === WebSocket.OPEN\n  }\n\n  /**\n   * Connects the websocket to the provided URL.\n   *\n   * @returns When the websocket is connected.\n   * @throws ConnectionError if there is a connection error, RippleError if there is already a WebSocket in existence.\n   */\n  // eslint-disable-next-line max-lines-per-function -- Necessary\n  public async connect(): Promise<void> {\n    if (this.isConnected()) {\n      return Promise.resolve()\n    }\n    if (this.state === WebSocket.CONNECTING) {\n      return this.connectionManager.awaitConnection()\n    }\n    if (!this.url) {\n      return Promise.reject(\n        new ConnectionError('Cannot connect because no server was specified'),\n      )\n    }\n    if (this.ws != null) {\n      return Promise.reject(\n        new XrplError('Websocket connection never cleaned up.', {\n          state: this.state,\n        }),\n      )\n    }\n\n    // Create the connection timeout, in case the connection hangs longer than expected.\n    const connectionTimeoutID: ReturnType<typeof setTimeout> = setTimeout(\n      () => {\n        this.onConnectionFailed(\n          new ConnectionError(\n            `Error: connect() timed out after ${this.config.connectionTimeout} ms. If your internet connection is working, the ` +\n              `rippled server may be blocked or inaccessible. You can also try setting the 'connectionTimeout' option in the Client constructor.`,\n          ),\n        )\n      },\n      this.config.connectionTimeout,\n    )\n    // Connection listeners: these stay attached only until a connection is done/open.\n    this.ws = createWebSocket(this.url, this.config)\n\n    if (this.ws == null) {\n      throw new XrplError('Connect: created null websocket')\n    }\n\n    this.ws.on('error', (error) => this.onConnectionFailed(error))\n    this.ws.on('error', () => clearTimeout(connectionTimeoutID))\n    this.ws.on('close', (reason) => this.onConnectionFailed(reason))\n    this.ws.on('close', () => clearTimeout(connectionTimeoutID))\n    this.ws.once('open', () => {\n      void this.onceOpen(connectionTimeoutID)\n    })\n    return this.connectionManager.awaitConnection()\n  }\n\n  /**\n   * Disconnect the websocket connection.\n   * We never expect this method to reject. Even on \"bad\" disconnects, the websocket\n   * should still successfully close with the relevant error code returned.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent for the full list.\n   * If no open websocket connection exists, resolve with no code (`undefined`).\n   *\n   * @returns A promise containing either `undefined` or a disconnected code, that resolves when the connection is destroyed.\n   */\n  public async disconnect(): Promise<number | undefined> {\n    this.clearHeartbeatInterval()\n    if (this.reconnectTimeoutID !== null) {\n      clearTimeout(this.reconnectTimeoutID)\n      this.reconnectTimeoutID = null\n    }\n    if (this.state === WebSocket.CLOSED) {\n      return Promise.resolve(undefined)\n    }\n    if (this.ws == null) {\n      return Promise.resolve(undefined)\n    }\n\n    return new Promise((resolve) => {\n      if (this.ws == null) {\n        resolve(undefined)\n      }\n      if (this.ws != null) {\n        this.ws.once('close', (code) => resolve(code))\n      }\n      /*\n       * Connection already has a disconnect handler for the disconnect logic.\n       * Just close the websocket manually (with our \"intentional\" code) to\n       * trigger that.\n       */\n      if (this.ws != null && this.state !== WebSocket.CLOSING) {\n        this.ws.close(INTENTIONAL_DISCONNECT_CODE)\n      }\n    })\n  }\n\n  /**\n   * Disconnect the websocket, then connect again.\n   *\n   */\n  public async reconnect(): Promise<void> {\n    /*\n     * NOTE: We currently have a \"reconnecting\" event, but that only triggers\n     * through an unexpected connection retry logic.\n     * See: https://github.com/XRPLF/xrpl.js/pull/1101#issuecomment-565360423\n     */\n    this.emit('reconnect')\n    await this.disconnect()\n    await this.connect()\n  }\n\n  /**\n   * Sends a request to the rippled server.\n   *\n   * @param request - The request to send to the server.\n   * @param timeout - How long the Connection instance should wait before assuming that there will not be a response.\n   * @returns The response from the rippled server.\n   * @throws NotConnectedError if the Connection isn't connected to a server.\n   */\n  public async request<\n    R extends BaseRequest,\n    T = RequestResponseMap<R, APIVersion>,\n  >(request: R, timeout?: number): Promise<T> {\n    if (!this.shouldBeConnected || this.ws == null) {\n      throw new NotConnectedError(JSON.stringify(request), request)\n    }\n    const [id, message, responsePromise] = this.requestManager.createRequest<\n      R,\n      T\n    >(request, timeout ?? this.config.timeout)\n    this.trace('send', message)\n    websocketSendAsync(this.ws, message).catch((error) => {\n      this.requestManager.reject(id, error)\n    })\n\n    return responsePromise\n  }\n\n  /**\n   * Get the Websocket connection URL.\n   *\n   * @returns The Websocket connection URL.\n   */\n  public getUrl(): string {\n    return this.url ?? ''\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, class-methods-use-this -- Does nothing on default\n  public readonly trace: (id: string, message: string) => void = () => {}\n\n  /**\n   * Handler for when messages are received from the server.\n   *\n   * @param message - The message received from the server.\n   */\n  private onMessage(message): void {\n    this.trace('receive', message)\n    let data: Record<string, unknown>\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Must be a JSON dictionary\n      data = JSON.parse(message)\n    } catch (error) {\n      if (error instanceof Error) {\n        this.emit('error', 'badMessage', error.message, message)\n      }\n      return\n    }\n    if (data.type == null && data.error) {\n      // e.g. slowDown\n      this.emit('error', data.error, data.error_message, data)\n      return\n    }\n    if (data.type) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be true\n      this.emit(data.type as string, data)\n    }\n    if (data.type === 'response') {\n      try {\n        this.requestManager.handleResponse(data)\n      } catch (error) {\n        // eslint-disable-next-line max-depth -- okay here\n        if (error instanceof Error) {\n          this.emit('error', 'badMessage', error.message, message)\n        } else {\n          this.emit('error', 'badMessage', error, error)\n        }\n      }\n    }\n  }\n\n  /**\n   * Handler for what to do once the connection to the server is open.\n   *\n   * @param connectionTimeoutID - Timeout in case the connection hangs longer than expected.\n   * @returns A promise that resolves to void when the connection is fully established.\n   * @throws Error if the websocket initialized is somehow null.\n   */\n  // eslint-disable-next-line max-lines-per-function -- Many error code conditionals to check.\n  private async onceOpen(\n    connectionTimeoutID: ReturnType<typeof setTimeout>,\n  ): Promise<void> {\n    if (this.ws == null) {\n      throw new XrplError('onceOpen: ws is null')\n    }\n\n    // Once the connection completes successfully, remove all old listeners\n    this.ws.removeAllListeners()\n    clearTimeout(connectionTimeoutID)\n    // Add new, long-term connected listeners for messages and errors\n    this.ws.on('message', (message: string) => this.onMessage(message))\n    this.ws.on('error', (error) =>\n      this.emit('error', 'websocket', error.message, error),\n    )\n    // Handle a closed connection: reconnect if it was unexpected\n    this.ws.once('close', (code?: number, reason?: Uint8Array) => {\n      if (this.ws == null) {\n        throw new XrplError('onceClose: ws is null')\n      }\n\n      this.clearHeartbeatInterval()\n      this.requestManager.rejectAll(\n        new DisconnectedError(\n          `websocket was closed, ${\n            reason ? hexToString(bytesToHex(reason)) : ''\n          }`,\n        ),\n      )\n      this.ws.removeAllListeners()\n      this.ws = null\n\n      if (code === undefined) {\n        // Useful to keep this code for debugging purposes.\n        // const reasonText = reason ? reason.toString() : 'undefined'\n        // // eslint-disable-next-line no-console -- The error is helpful for debugging.\n        // console.error(\n        //   `Disconnected but the disconnect code was undefined (The given reason was ${reasonText}).` +\n        //     `This could be caused by an exception being thrown during a 'connect' callback. ` +\n        //     `Disconnecting with code 1011 to indicate an internal error has occurred.`,\n        // )\n\n        /*\n         * Error code 1011 represents an Internal Error according to\n         * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code\n         */\n        const internalErrorCode = 1011\n        this.emit('disconnected', internalErrorCode)\n      } else {\n        this.emit('disconnected', code)\n      }\n\n      /*\n       * If this wasn't a manual disconnect, then lets reconnect ASAP.\n       * Code can be undefined if there's an exception while connecting.\n       */\n      if (code !== INTENTIONAL_DISCONNECT_CODE && code !== undefined) {\n        this.intentionalDisconnect()\n      }\n    })\n    // Finalize the connection and resolve all awaiting connect() requests\n    try {\n      this.retryConnectionBackoff.reset()\n      this.startHeartbeatInterval()\n      this.connectionManager.resolveAllAwaiting()\n      this.emit('connected')\n    } catch (error) {\n      if (error instanceof Error) {\n        this.connectionManager.rejectAllAwaiting(error)\n        // Ignore this error, propagate the root cause.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function -- Need empty catch\n        await this.disconnect().catch(() => {})\n      }\n    }\n  }\n\n  private intentionalDisconnect(): void {\n    const retryTimeout = this.retryConnectionBackoff.duration()\n    this.trace('reconnect', `Retrying connection in ${retryTimeout}ms.`)\n    this.emit('reconnecting', this.retryConnectionBackoff.attempts)\n    /*\n     * Start the reconnect timeout, but set it to `this.reconnectTimeoutID`\n     * so that we can cancel one in-progress on disconnect.\n     */\n    this.reconnectTimeoutID = setTimeout(() => {\n      this.reconnect().catch((error: Error) => {\n        this.emit('error', 'reconnect', error.message, error)\n      })\n    }, retryTimeout)\n  }\n\n  /**\n   * Clears the heartbeat connection interval.\n   */\n  private clearHeartbeatInterval(): void {\n    if (this.heartbeatIntervalID) {\n      clearInterval(this.heartbeatIntervalID)\n    }\n  }\n\n  /**\n   * Starts a heartbeat to check the connection with the server.\n   *\n   */\n  private startHeartbeatInterval(): void {\n    this.clearHeartbeatInterval()\n    this.heartbeatIntervalID = setInterval(() => {\n      void this.heartbeat()\n    }, this.config.timeout)\n  }\n\n  /**\n   * A heartbeat is just a \"ping\" command, sent on an interval.\n   * If this succeeds, we're good. If it fails, disconnect so that the consumer can reconnect, if desired.\n   *\n   * @returns A Promise that resolves to void when the heartbeat returns successfully.\n   */\n  private async heartbeat(): Promise<void> {\n    this.request({ command: 'ping' }).catch(async () => {\n      return this.reconnect().catch((error: Error) => {\n        this.emit('error', 'reconnect', error.message, error)\n      })\n    })\n  }\n\n  /**\n   * Process a failed connection.\n   *\n   * @param errorOrCode - (Optional) Error or code for connection failure.\n   */\n  private onConnectionFailed(errorOrCode: Error | number | null): void {\n    if (this.ws) {\n      this.ws.removeAllListeners()\n      this.ws.on('error', () => {\n        /*\n         * Correctly listen for -- but ignore -- any future errors: If you\n         * don't have a listener on \"error\" node would log a warning on error.\n         */\n      })\n      this.ws.close()\n      this.ws = null\n    }\n    if (typeof errorOrCode === 'number') {\n      this.connectionManager.rejectAllAwaiting(\n        new NotConnectedError(`Connection failed with code ${errorOrCode}.`, {\n          code: errorOrCode,\n        }),\n      )\n    } else if (errorOrCode?.message) {\n      this.connectionManager.rejectAllAwaiting(\n        new NotConnectedError(errorOrCode.message, errorOrCode),\n      )\n    } else {\n      this.connectionManager.rejectAllAwaiting(\n        new NotConnectedError('Connection failed.'),\n      )\n    }\n  }\n}\n", "import BigNumber from 'bignumber.js'\nimport { decode } from 'ripple-binary-codec'\n\nimport type {\n  TransactionEntryResponse,\n  TransactionStream,\n  TransactionV1Stream,\n  TxResponse,\n} from '..'\nimport type {\n  Amount,\n  IssuedCurrency,\n  APIVersion,\n  DEFAULT_API_VERSION,\n  MPTAmount,\n} from '../models/common'\nimport type {\n  AccountTxTransaction,\n  RequestResponseMap,\n} from '../models/methods'\nimport { AccountTxVersionResponseMap } from '../models/methods/accountTx'\nimport { BaseRequest, BaseResponse } from '../models/methods/baseMethod'\nimport { PaymentFlags, Transaction, isMPTAmount } from '../models/transactions'\nimport type { TransactionMetadata } from '../models/transactions/metadata'\nimport { isFlagEnabled } from '../models/utils'\n\nconst WARN_PARTIAL_PAYMENT_CODE = 2001\n\n/* eslint-disable complexity -- check different token types */\n/* eslint-disable @typescript-eslint/consistent-type-assertions -- known currency type */\nfunction amountsEqual(\n  amt1: Amount | MPTAmount,\n  amt2: Amount | MPTAmount,\n): boolean {\n  // Compare XRP\n  if (typeof amt1 === 'string' && typeof amt2 === 'string') {\n    return amt1 === amt2\n  }\n\n  if (typeof amt1 === 'string' || typeof amt2 === 'string') {\n    return false\n  }\n\n  // Compare MPTs\n  if (isMPTAmount(amt1) && isMPTAmount(amt2)) {\n    const aValue = new BigNumber(amt1.value)\n    const bValue = new BigNumber(amt2.value)\n\n    return (\n      amt1.mpt_issuance_id === amt2.mpt_issuance_id && aValue.isEqualTo(bValue)\n    )\n  }\n\n  if (isMPTAmount(amt1) || isMPTAmount(amt2)) {\n    return false\n  }\n\n  // Compare issued currency (IOU)\n  const aValue = new BigNumber(amt1.value)\n  const bValue = new BigNumber(amt2.value)\n\n  return (\n    (amt1 as IssuedCurrency).currency === (amt2 as IssuedCurrency).currency &&\n    (amt1 as IssuedCurrency).issuer === (amt2 as IssuedCurrency).issuer &&\n    aValue.isEqualTo(bValue)\n  )\n}\n/* eslint-enable complexity */\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n\nfunction isPartialPayment(\n  tx?: Transaction,\n  metadata?: TransactionMetadata | string,\n): boolean {\n  if (tx == null || metadata == null || tx.TransactionType !== 'Payment') {\n    return false\n  }\n\n  let meta = metadata\n  if (typeof meta === 'string') {\n    if (meta === 'unavailable') {\n      return false\n    }\n\n    /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- binary-codec typing */\n    meta = decode(meta) as unknown as TransactionMetadata\n  }\n\n  const tfPartial =\n    typeof tx.Flags === 'number'\n      ? isFlagEnabled(tx.Flags, PaymentFlags.tfPartialPayment)\n      : tx.Flags?.tfPartialPayment\n\n  if (!tfPartial) {\n    return false\n  }\n\n  const delivered = meta.delivered_amount\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- DeliverMax is a valid field on Payment response\n  // @ts-expect-error -- DeliverMax is a valid field on Payment response\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- DeliverMax is a valid field on Payment response\n  const amount = tx.DeliverMax\n\n  if (delivered === undefined) {\n    return false\n  }\n\n  return !amountsEqual(delivered, amount)\n}\n\nfunction txHasPartialPayment(response: TxResponse): boolean {\n  return isPartialPayment(response.result.tx_json, response.result.meta)\n}\n\nfunction txEntryHasPartialPayment(response: TransactionEntryResponse): boolean {\n  return isPartialPayment(response.result.tx_json, response.result.metadata)\n}\n\nfunction accountTxHasPartialPayment<\n  Version extends APIVersion = typeof DEFAULT_API_VERSION,\n>(response: AccountTxVersionResponseMap<Version>): boolean {\n  const { transactions } = response.result\n  const foo = transactions.some((tx) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- required to check API version model\n    if (tx.tx_json != null) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- use API v2 model\n      const transaction = tx as AccountTxTransaction\n      return isPartialPayment(transaction.tx_json, transaction.meta)\n    }\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- use API v1 model\n    const transaction = tx as AccountTxTransaction<1>\n    return isPartialPayment(transaction.tx, transaction.meta)\n  })\n  return foo\n}\n\nfunction hasPartialPayment<\n  R extends BaseRequest,\n  V extends APIVersion = typeof DEFAULT_API_VERSION,\n  T = RequestResponseMap<R, V>,\n>(command: string, response: T): boolean {\n  /* eslint-disable @typescript-eslint/consistent-type-assertions -- Request type is known at runtime from command */\n  switch (command) {\n    case 'tx':\n      return txHasPartialPayment(response as TxResponse)\n    case 'transaction_entry':\n      return txEntryHasPartialPayment(response as TransactionEntryResponse)\n    case 'account_tx':\n      return accountTxHasPartialPayment(\n        response as AccountTxVersionResponseMap<V>,\n      )\n    default:\n      return false\n  }\n  /* eslint-enable @typescript-eslint/consistent-type-assertions */\n}\n\n/**\n * Checks a response for a partial payment.\n *\n * @param command - Command from the request, tells us what response to expect.\n * @param response - Response to check for a partial payment.\n */\nexport function handlePartialPayment<\n  R extends BaseRequest,\n  T = RequestResponseMap<R, APIVersion>,\n>(command: string, response: T): void {\n  if (hasPartialPayment(command, response)) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We are checking dynamically and safely.\n    const warnings = (response as BaseResponse).warnings ?? []\n\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment',\n    }\n\n    warnings.push(warning)\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- We are checking dynamically and safely.\n    // @ts-expect-error -- We are checking dynamically and safely.\n    response.warnings = warnings\n  }\n}\n\n/**\n * Check a transaction from a subscription stream for partial payment.\n *\n * @param stream - Stream Transaction to check for partial payment.\n * @param log - The method used for logging by the connection (to report the partial payment).\n */\nexport function handleStreamPartialPayment(\n  stream: TransactionStream | TransactionV1Stream,\n  log: (id: string, message: string) => void,\n): void {\n  if (isPartialPayment(stream.tx_json ?? stream.transaction, stream.meta)) {\n    const warnings = stream.warnings ?? []\n\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment',\n    }\n\n    warnings.push(warning)\n\n    /* eslint-disable-next-line no-param-reassign -- Handles the case where there are no warnings */\n    stream.warnings = warnings\n\n    log('Partial payment received', JSON.stringify(stream))\n  }\n}\n", "/* eslint-disable jsdoc/require-jsdoc -- Request has many aliases, but they don't need unique docs */\n\n/* eslint-disable max-lines -- Client is a large file w/ lots of imports/exports */\nimport { EventEmitter } from 'eventemitter3'\n\nimport {\n  RippledError,\n  NotFoundError,\n  ValidationError,\n  XrplError,\n} from '../errors'\nimport {\n  APIVersion,\n  LedgerIndex,\n  Balance,\n  DEFAULT_API_VERSION,\n} from '../models/common'\nimport {\n  Request,\n  // account methods\n  AccountChannelsRequest,\n  AccountChannelsResponse,\n  AccountInfoRequest,\n  AccountLinesRequest,\n  AccountLinesResponse,\n  AccountObjectsRequest,\n  AccountObjectsResponse,\n  AccountOffersRequest,\n  AccountOffersResponse,\n  AccountTxRequest,\n  AccountTxResponse,\n  // ledger methods\n  LedgerDataRequest,\n  LedgerDataResponse,\n  TxResponse,\n} from '../models/methods'\nimport type {\n  RequestResponseMap,\n  RequestAllResponseMap,\n  MarkerRequest,\n  MarkerResponse,\n  SubmitResponse,\n  SimulateRequest,\n} from '../models/methods'\nimport type { BookOffer, BookOfferCurrency } from '../models/methods/bookOffers'\nimport {\n  SimulateBinaryResponse,\n  SimulateJsonResponse,\n} from '../models/methods/simulate'\nimport type {\n  EventTypes,\n  OnEventToListenerMap,\n} from '../models/methods/subscribe'\nimport type { SubmittableTransaction } from '../models/transactions'\nimport { convertTxFlagsToNumber } from '../models/utils/flags'\nimport {\n  ensureClassicAddress,\n  submitRequest,\n  getSignedTx,\n  getLastLedgerSequence,\n  waitForFinalTransactionOutcome,\n} from '../sugar'\nimport {\n  setValidAddresses,\n  setNextValidSequenceNumber,\n  calculateFeePerTransactionType,\n  setLatestValidatedLedgerSequence,\n  checkAccountDeleteBlockers,\n  txNeedsNetworkID,\n} from '../sugar/autofill'\nimport { formatBalances } from '../sugar/balances'\nimport {\n  validateOrderbookOptions,\n  createBookOffersRequest,\n  requestAllOffers,\n  reverseRequest,\n  extractOffers,\n  combineOrders,\n  separateBuySellOrders,\n  sortAndLimitOffers,\n} from '../sugar/getOrderbook'\nimport { dropsToXrp, hashes, isValidClassicAddress } from '../utils'\nimport { Wallet } from '../Wallet'\nimport {\n  type FaucetRequestBody,\n  FundingOptions,\n  requestFunding,\n} from '../Wallet/fundWallet'\n\nimport {\n  Connection,\n  ConnectionUserOptions,\n  INTENTIONAL_DISCONNECT_CODE,\n} from './connection'\nimport {\n  handlePartialPayment,\n  handleStreamPartialPayment,\n} from './partialPayment'\n\nexport interface ClientOptions extends ConnectionUserOptions {\n  /**\n   * Multiplication factor to multiply estimated fee by to provide a cushion in case the\n   * required fee rises during submission of a transaction. Defaults to 1.2.\n   *\n   * @category Fee\n   */\n  feeCushion?: number\n  /**\n   * Maximum transaction cost to allow, in decimal XRP. Must be a string-encoded\n   * number. Defaults to '2'.\n   *\n   * @category Fee\n   */\n  maxFeeXRP?: string\n  /**\n   * Duration to wait for a request to timeout.\n   */\n  timeout?: number\n}\n\n// Make sure to update both this and `RequestNextPageReturnMap` at the same time\ntype RequestNextPageType =\n  | AccountChannelsRequest\n  | AccountLinesRequest\n  | AccountObjectsRequest\n  | AccountOffersRequest\n  | AccountTxRequest\n  | LedgerDataRequest\n\ntype RequestNextPageReturnMap<T> = T extends AccountChannelsRequest\n  ? AccountChannelsResponse\n  : T extends AccountLinesRequest\n  ? AccountLinesResponse\n  : T extends AccountObjectsRequest\n  ? AccountObjectsResponse\n  : T extends AccountOffersRequest\n  ? AccountOffersResponse\n  : T extends AccountTxRequest\n  ? AccountTxResponse\n  : T extends LedgerDataRequest\n  ? LedgerDataResponse\n  : never\n\n/**\n * Get the response key / property name that contains the listed data for a\n * command. This varies from command to command, but we need to know it to\n * properly count across many requests.\n *\n * @param command - The rippled request command.\n * @returns The property key corresponding to the command.\n */\nfunction getCollectKeyFromCommand(command: string): string | null {\n  switch (command) {\n    case 'account_channels':\n      return 'channels'\n    case 'account_lines':\n      return 'lines'\n    case 'account_objects':\n      return 'account_objects'\n    case 'account_tx':\n      return 'transactions'\n    case 'account_offers':\n    case 'book_offers':\n      return 'offers'\n    case 'ledger_data':\n      return 'state'\n    default:\n      return null\n  }\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new Error('Illegal clamp bounds')\n  }\n  return Math.min(Math.max(value, min), max)\n}\n\nconst DEFAULT_FEE_CUSHION = 1.2\nconst DEFAULT_MAX_FEE_XRP = '2'\n\nconst MIN_LIMIT = 10\nconst MAX_LIMIT = 400\n\nconst NORMAL_DISCONNECT_CODE = 1000\n\n/**\n * Client for interacting with rippled servers.\n *\n * @category Clients\n */\nclass Client extends EventEmitter<EventTypes> {\n  /*\n   * Underlying connection to rippled.\n   */\n  public readonly connection: Connection\n\n  /**\n   * Factor to multiply estimated fee by to provide a cushion in case the\n   * required fee rises during submission of a transaction. Defaults to 1.2.\n   *\n   * @category Fee\n   */\n  public readonly feeCushion: number\n\n  /**\n   * Maximum transaction cost to allow, in decimal XRP. Must be a string-encoded\n   * number. Defaults to '2'.\n   *\n   * @category Fee\n   */\n  public readonly maxFeeXRP: string\n\n  /**\n   * Network ID of the server this client is connected to\n   *\n   */\n  public networkID: number | undefined\n\n  /**\n   * Rippled Version used by the server this client is connected to\n   *\n   */\n  public buildVersion: string | undefined\n\n  /**\n   * API Version used by the server this client is connected to\n   *\n   */\n  public apiVersion: APIVersion = DEFAULT_API_VERSION\n\n  /**\n   * Creates a new Client with a websocket connection to a rippled server.\n   *\n   * @param server - URL of the server to connect to.\n   * @param options - Options for client settings.\n   * @category Constructor\n   *\n   * @example\n   * ```ts\n   * import { Client } from \"xrpl\"\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * ```\n   */\n  /* eslint-disable max-lines-per-function -- the constructor requires more lines to implement the logic */\n  public constructor(server: string, options: ClientOptions = {}) {\n    super()\n    if (typeof server !== 'string' || !/wss?(?:\\+unix)?:\\/\\//u.exec(server)) {\n      throw new ValidationError(\n        'server URI must start with `wss://`, `ws://`, `wss+unix://`, or `ws+unix://`.',\n      )\n    }\n\n    this.feeCushion = options.feeCushion ?? DEFAULT_FEE_CUSHION\n    this.maxFeeXRP = options.maxFeeXRP ?? DEFAULT_MAX_FEE_XRP\n\n    this.connection = new Connection(server, options)\n\n    this.connection.on('error', (errorCode, errorMessage, data) => {\n      this.emit('error', errorCode, errorMessage, data)\n    })\n\n    this.connection.on('reconnect', () => {\n      this.connection.on('connected', () => this.emit('connected'))\n    })\n\n    this.connection.on('disconnected', (code: number) => {\n      let finalCode = code\n      /*\n       * 4000: Connection uses a 4000 code internally to indicate a manual disconnect/close\n       * Since 4000 is a normal disconnect reason, we convert this to the standard exit code 1000\n       */\n      if (finalCode === INTENTIONAL_DISCONNECT_CODE) {\n        finalCode = NORMAL_DISCONNECT_CODE\n      }\n      this.emit('disconnected', finalCode)\n    })\n\n    this.connection.on('ledgerClosed', (ledger) => {\n      this.emit('ledgerClosed', ledger)\n    })\n\n    this.connection.on('transaction', (tx) => {\n      // mutates `tx` to add warnings\n      handleStreamPartialPayment(tx, this.connection.trace)\n      this.emit('transaction', tx)\n    })\n\n    this.connection.on('validationReceived', (validation) => {\n      this.emit('validationReceived', validation)\n    })\n\n    this.connection.on('manifestReceived', (manifest) => {\n      this.emit('manifestReceived', manifest)\n    })\n\n    this.connection.on('peerStatusChange', (status) => {\n      this.emit('peerStatusChange', status)\n    })\n\n    this.connection.on('consensusPhase', (consensus) => {\n      this.emit('consensusPhase', consensus)\n    })\n\n    this.connection.on('path_find', (path) => {\n      this.emit('path_find', path)\n    })\n  }\n  /* eslint-enable max-lines-per-function */\n\n  /**\n   * Get the url that the client is connected to.\n   *\n   * @returns The URL of the server this client is connected to.\n   * @category Network\n   */\n  public get url(): string {\n    return this.connection.getUrl()\n  }\n\n  /**\n   * Makes a request to the client with the given command and\n   * additional request body parameters.\n   *\n   * @category Network\n   * @param req - Request to send to the server.\n   * @returns The response from the server.\n   *\n   * @example\n   * ```ts\n   * const response = await client.request({\n   *   command: 'account_info',\n   *   account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * })\n   * console.log(response)\n   * ```\n   */\n  public async request<\n    R extends Request,\n    V extends APIVersion = typeof DEFAULT_API_VERSION,\n    T = RequestResponseMap<R, V>,\n  >(req: R): Promise<T> {\n    const request = {\n      ...req,\n      account:\n        typeof req.account === 'string'\n          ? ensureClassicAddress(req.account)\n          : undefined,\n      api_version: req.api_version ?? this.apiVersion,\n    }\n    const response = await this.connection.request<R, T>(request)\n\n    // mutates `response` to add warnings\n    handlePartialPayment(req.command, response)\n\n    return response\n  }\n\n  /**\n   * Requests the next page of data.\n   *\n   * @category Network\n   *\n   * @param req - Request to send.\n   * @param resp - Response with the marker to use in the request.\n   * @returns The response with the next page of data.\n   *\n   * @example\n   * ```ts\n   * const response = await client.request({\n   *  command: 'account_tx',\n   *  account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * })\n   * console.log(response)\n   * const nextResponse = await client.requestNextPage({\n   *   command: 'account_tx',\n   *   account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * },\n   * response)\n   * console.log(nextResponse)\n   * ```\n   */\n  public async requestNextPage<\n    T extends RequestNextPageType,\n    U extends RequestNextPageReturnMap<T>,\n  >(req: T, resp: U): Promise<RequestNextPageReturnMap<T>> {\n    if (!resp.result.marker) {\n      return Promise.reject(\n        new NotFoundError('response does not have a next page'),\n      )\n    }\n    const nextPageRequest = { ...req, marker: resp.result.marker }\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Necessary for overloading\n    return this.request(nextPageRequest) as unknown as U\n  }\n\n  /**\n   * Event handler for subscription streams.\n   *\n   * @category Network\n   *\n   * @param eventName - Name of the event. Only forwards streams.\n   * @param listener - Function to run on event.\n   * @returns This, because it inherits from EventEmitter.\n   *\n   * * @example\n   * ```ts\n   * const api = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * api.on('transaction', (tx: TransactionStream) => {\n   *  console.log(\"Received Transaction\")\n   *  console.log(tx)\n   * })\n   *\n   * await api.connect()\n   * const response = await api.request({\n   *     command: 'subscribe',\n   *     streams: ['transactions_proposed']\n   * })\n   * ```\n   */\n  public on<\n    T extends EventTypes,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- needs to be any for overload\n    U extends (...args: any[]) => void = OnEventToListenerMap<T>,\n  >(eventName: T, listener: U): this {\n    return super.on(eventName, listener)\n  }\n\n  /**\n   * Makes multiple paged requests to the client to return a given number of\n   * resources. Multiple paged requests will be made until the `limit`\n   * number of resources is reached (if no `limit` is provided, a single request\n   * will be made).\n   *\n   * If the command is unknown, an additional `collect` property is required to\n   * know which response key contains the array of resources.\n   *\n   * NOTE: This command is used by existing methods and is not recommended for\n   * general use. Instead, use rippled's built-in pagination and make multiple\n   * requests as needed.\n   *\n   * @category Network\n   *\n   * @param request - The initial request to send to the server.\n   * @param collect - (Optional) the param to use to collect the array of resources (only needed if command is unknown).\n   * @returns The array of all responses.\n   * @throws ValidationError if there is no collection key (either from a known command or for the unknown command).\n   *\n   * @example\n   * // Request all ledger data pages\n   * const allResponses = await client.requestAll({ command: 'ledger_data' });\n   * console.log(allResponses);\n   *\n   * @example\n   * // Request all transaction data pages\n   * const allResponses = await client.requestAll({ command: 'transaction_data' });\n   * console.log(allResponses);\n   */\n\n  public async requestAll<\n    T extends MarkerRequest,\n    U = RequestAllResponseMap<T, APIVersion>,\n  >(request: T, collect?: string): Promise<U[]> {\n    /*\n     * The data under collection is keyed based on the command. Fail if command\n     * not recognized and collection key not provided.\n     */\n    const collectKey = collect ?? getCollectKeyFromCommand(request.command)\n    if (!collectKey) {\n      throw new ValidationError(`no collect key for command ${request.command}`)\n    }\n    /*\n     * If limit is not provided, fetches all data over multiple requests.\n     * NOTE: This may return much more than needed. Set limit when possible.\n     */\n    const countTo: number = request.limit == null ? Infinity : request.limit\n    let count = 0\n    let marker: unknown = request.marker\n    const results: U[] = []\n    do {\n      const countRemaining = clamp(countTo - count, MIN_LIMIT, MAX_LIMIT)\n      const repeatProps = {\n        ...request,\n        limit: countRemaining,\n        marker,\n      }\n      // eslint-disable-next-line no-await-in-loop -- Necessary for this, it really has to wait\n      const singleResponse = await this.connection.request(repeatProps)\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be true\n      const singleResult = (singleResponse as MarkerResponse<APIVersion>).result\n      if (!(collectKey in singleResult)) {\n        throw new XrplError(`${collectKey} not in result`)\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Should be true\n      const collectedData = singleResult[collectKey]\n      marker = singleResult.marker\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be true\n      results.push(singleResponse as U)\n      // Make sure we handle when no data (not even an empty array) is returned.\n      if (Array.isArray(collectedData)) {\n        count += collectedData.length\n      }\n    } while (Boolean(marker) && count < countTo)\n    return results\n  }\n\n  /**\n   * Get networkID and buildVersion from server_info\n   *\n   * @returns void\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.getServerInfo()\n   * console.log(client.networkID)\n   * console.log(client.buildVersion)\n   * ```\n   */\n  public async getServerInfo(): Promise<void> {\n    try {\n      const response = await this.request({\n        command: 'server_info',\n      })\n      this.networkID = response.result.info.network_id ?? undefined\n      this.buildVersion = response.result.info.build_version\n    } catch (error) {\n      // eslint-disable-next-line no-console -- Print the error to console but allows client to be connected.\n      console.error(error)\n    }\n  }\n\n  /**\n   * Tells the Client instance to connect to its rippled server.\n   *\n   * @example\n   *\n   * Client.connect() establishes a connection between a Client object and the server.\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   * If you open a client connection, be sure to close it with `await client.disconnect()`\n   * before exiting your application.\n   * @returns A promise that resolves with a void value when a connection is established.\n   * @category Network\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   */\n  public async connect(): Promise<void> {\n    return this.connection.connect().then(async () => {\n      await this.getServerInfo()\n      this.emit('connected')\n    })\n  }\n\n  /**\n   * Disconnects the XRPL client from the server and cancels all pending requests and subscriptions. Call when\n   * you want to disconnect the client from the server, such as when you're finished using the client or when you\n   * need to switch to a different server.\n   *\n   * @example\n   *\n   * To use the disconnect() method, you first need to create a new Client object and connect it to a server:\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   *\n   * @returns A promise that resolves with a void value when a connection is destroyed.\n   * @category Network\n   */\n  public async disconnect(): Promise<void> {\n    /*\n     * backwards compatibility: connection.disconnect() can return a number, but\n     * this method returns nothing. SO we await but don't return any result.\n     */\n    await this.connection.disconnect()\n  }\n\n  /**\n   * Checks if the Client instance is connected to its rippled server.\n   *\n   * @returns Whether the client instance is connected.\n   * @category Network\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * console.log(client.isConnected())\n   * // true\n   * await client.disconnect()\n   * console.log(client.isConnected())\n   * // false\n   * ```\n   */\n  public isConnected(): boolean {\n    return this.connection.isConnected()\n  }\n\n  /**\n   * Autofills fields in a transaction. This will set `Sequence`, `Fee`,\n   * `lastLedgerSequence` according to the current state of the server this Client\n   * is connected to. It also converts all X-Addresses to classic addresses and\n   * flags interfaces into numbers.\n   *\n   * @category Core\n   *\n   * @example\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   *\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * async function createAndAutofillTransaction() {\n   *   const transaction = {\n   *     TransactionType: 'Payment',\n   *     Account: 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh',\n   *     Destination: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   *     Amount: '10000000' // 10 XRP in drops (1/1,000,000th of an XRP)\n   *   }\n   *\n   *   try {\n   *     const autofilledTransaction = await client.autofill(transaction)\n   *     console.log(autofilledTransaction)\n   *   } catch (error) {\n   *     console.error(`Failed to autofill transaction: ${error}`)\n   *   }\n   * }\n   *\n   * createAndAutofillTransaction()\n   * ```\n   *\n   * Autofill helps fill in fields which should be included in a transaction, but can be determined automatically\n   * such as `LastLedgerSequence` and `Fee`. If you override one of the fields `autofill` changes, your explicit\n   * values will be used instead. By default, this is done as part of `submit` and `submitAndWait` when you pass\n   * in an unsigned transaction along with your wallet to be submitted.\n   *\n   * @template T\n   * @param transaction - A {@link SubmittableTransaction} in JSON format\n   * @param signersCount - The expected number of signers for this transaction.\n   * Only used for multisigned transactions.\n   * @returns The autofilled transaction.\n   * @throws ValidationError If Amount and DeliverMax fields are not identical in a Payment Transaction\n   */\n\n  // eslint-disable-next-line complexity -- handling Payment transaction API v2 requires more logic\n  public async autofill<T extends SubmittableTransaction>(\n    transaction: T,\n    signersCount?: number,\n  ): Promise<T> {\n    const tx = { ...transaction }\n\n    setValidAddresses(tx)\n    tx.Flags = convertTxFlagsToNumber(tx)\n\n    const promises: Array<Promise<void>> = []\n    if (tx.NetworkID == null) {\n      tx.NetworkID = txNeedsNetworkID(this) ? this.networkID : undefined\n    }\n    if (tx.Sequence == null) {\n      promises.push(setNextValidSequenceNumber(this, tx))\n    }\n    if (tx.Fee == null) {\n      promises.push(calculateFeePerTransactionType(this, tx, signersCount))\n    }\n    if (tx.LastLedgerSequence == null) {\n      promises.push(setLatestValidatedLedgerSequence(this, tx))\n    }\n    if (tx.TransactionType === 'AccountDelete') {\n      promises.push(checkAccountDeleteBlockers(this, tx))\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore type-assertions on the DeliverMax property\n    // @ts-expect-error -- DeliverMax property exists only at the RPC level, not at the protocol level\n    if (tx.TransactionType === 'Payment' && tx.DeliverMax != null) {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- This is a valid null check for Amount\n      if (tx.Amount == null) {\n        // If only DeliverMax is provided, use it to populate the Amount field\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore type-assertions on the DeliverMax property\n        // @ts-expect-error -- DeliverMax property exists only at the RPC level, not at the protocol level\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- DeliverMax is a known RPC-level property\n        tx.Amount = tx.DeliverMax\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore type-assertions on the DeliverMax property\n      // @ts-expect-error -- DeliverMax property exists only at the RPC level, not at the protocol level\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- This is a valid null check for Amount\n      if (tx.Amount != null && tx.Amount !== tx.DeliverMax) {\n        return Promise.reject(\n          new ValidationError(\n            'PaymentTransaction: Amount and DeliverMax fields must be identical when both are provided',\n          ),\n        )\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- ignore type-assertions on the DeliverMax property\n      // @ts-expect-error -- DeliverMax property exists only at the RPC level, not at the protocol level\n      delete tx.DeliverMax\n    }\n\n    return Promise.all(promises).then(() => tx)\n  }\n\n  /**\n   * Submits a signed/unsigned transaction.\n   * Steps performed on a transaction:\n   *    1. Autofill.\n   *    2. Sign & Encode.\n   *    3. Submit.\n   *\n   * @category Core\n   *\n   * @param transaction - A transaction to autofill, sign & encode, and submit.\n   * @param opts - (Optional) Options used to sign and submit a transaction.\n   * @param opts.autofill - If true, autofill a transaction.\n   * @param opts.failHard - If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n   * @param opts.wallet - A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n   *\n   * @returns A promise that contains SubmitResponse.\n   * @throws RippledError if submit request fails.\n   *\n   * @example\n   * ```ts\n   * const { Client, Wallet } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const wallet = Wallet.generate()\n   * const transaction = {\n   *   TransactionType: 'Payment',\n   *   Account: wallet.classicAddress,\n   *   Destination: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   *   Amount: '10000000' // 10 XRP in drops (1/1,000,000th of an XRP)\n   * }\n   * const submitResponse = await client.submit(transaction, { wallet })\n   * console.log(submitResponse)\n   * ```\n   */\n  public async submit(\n    transaction: SubmittableTransaction | string,\n    opts?: {\n      // If true, autofill a transaction.\n      autofill?: boolean\n      // If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n      failHard?: boolean\n      // A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n      wallet?: Wallet\n    },\n  ): Promise<SubmitResponse> {\n    const signedTx = await getSignedTx(this, transaction, opts)\n    return submitRequest(this, signedTx, opts?.failHard)\n  }\n\n  /**\n   * Simulates an unsigned transaction.\n   * Steps performed on a transaction:\n   *    1. Autofill.\n   *    2. Sign & Encode.\n   *    3. Submit.\n   *\n   * @category Core\n   *\n   * @param transaction - A transaction to autofill, sign & encode, and submit.\n   * @param opts - (Optional) Options used to sign and submit a transaction.\n   * @param opts.binary - If true, return the metadata in a binary encoding.\n   *\n   * @returns A promise that contains SimulateResponse.\n   * @throws RippledError if the simulate request fails.\n   */\n\n  public async simulate<Binary extends boolean = false>(\n    transaction: SubmittableTransaction | string,\n    opts?: {\n      // If true, return the binary-encoded representation of the results.\n      binary?: Binary\n    },\n  ): Promise<\n    Binary extends true ? SimulateBinaryResponse : SimulateJsonResponse\n  > {\n    // send request\n    const binary = opts?.binary ?? false\n    const request: SimulateRequest =\n      typeof transaction === 'string'\n        ? { command: 'simulate', tx_blob: transaction, binary }\n        : { command: 'simulate', tx_json: transaction, binary }\n    return this.request(request)\n  }\n\n  /**\n   * Asynchronously submits a transaction and verifies that it has been included in a\n   * validated ledger (or has errored/will not be included for some reason).\n   * See [Reliable Transaction Submission](https://xrpl.org/reliable-transaction-submission.html).\n   *\n   * @category Core\n   *\n   * @example\n   *\n   * ```ts\n   * const { Client, Wallet } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * async function submitTransaction() {\n   *   const senderWallet = client.fundWallet()\n   *   const recipientWallet = client.fundWallet()\n   *\n   *   const transaction = {\n   *     TransactionType: 'Payment',\n   *     Account: senderWallet.address,\n   *     Destination: recipientWallet.address,\n   *     Amount: '10'\n   *   }\n   *\n   *   try {\n   *     await client.submit(signedTransaction, { wallet: senderWallet })\n   *     console.log(result)\n   *   } catch (error) {\n   *     console.error(`Failed to submit transaction: ${error}`)\n   *   }\n   * }\n   *\n   * submitTransaction()\n   * ```\n   *\n   * In this example we submit a payment transaction between two newly created testnet accounts.\n   *\n   * Under the hood, `submit` will call `client.autofill` by default, and because we've passed in a `Wallet` it\n   * Will also sign the transaction for us before submitting the signed transaction binary blob to the ledger.\n   *\n   * This is similar to `submitAndWait` which does all of the above, but also waits to see if the transaction has been validated.\n   * @param transaction - A transaction to autofill, sign & encode, and submit.\n   * @param opts - (Optional) Options used to sign and submit a transaction.\n   * @param opts.autofill - If true, autofill a transaction.\n   * @param opts.failHard - If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n   * @param opts.wallet - A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n   * @throws Connection errors: If the `Client` object is unable to establish a connection to the specified WebSocket endpoint,\n   * an error will be thrown.\n   * @throws Transaction errors: If the submitted transaction is invalid or cannot be included in a validated ledger for any\n   * reason, the promise returned by `submitAndWait()` will be rejected with an error. This could include issues with insufficient\n   * balance, invalid transaction fields, or other issues specific to the transaction being submitted.\n   * @throws Ledger errors: If the ledger being used to submit the transaction is undergoing maintenance or otherwise unavailable,\n   * an error will be thrown.\n   * @throws Timeout errors: If the transaction takes longer than the specified timeout period to be included in a validated\n   * ledger, the promise returned by `submitAndWait()` will be rejected with an error.\n   * @returns A promise that contains TxResponse, that will return when the transaction has been validated.\n   */\n  public async submitAndWait<\n    T extends SubmittableTransaction = SubmittableTransaction,\n  >(\n    transaction: T | string,\n    opts?: {\n      // If true, autofill a transaction.\n      autofill?: boolean\n      // If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n      failHard?: boolean\n      // A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n      wallet?: Wallet\n    },\n  ): Promise<TxResponse<T>> {\n    const signedTx = await getSignedTx(this, transaction, opts)\n\n    const lastLedger = getLastLedgerSequence(signedTx)\n    if (lastLedger == null) {\n      throw new ValidationError(\n        'Transaction must contain a LastLedgerSequence value for reliable submission.',\n      )\n    }\n\n    const response = await submitRequest(this, signedTx, opts?.failHard)\n\n    const txHash = hashes.hashSignedTx(signedTx)\n    return waitForFinalTransactionOutcome(\n      this,\n      txHash,\n      lastLedger,\n      response.result.engine_result,\n    )\n  }\n\n  /**\n   * Deprecated: Use autofill instead, provided for users familiar with v1\n   *\n   * @param transaction - A {@link Transaction} in JSON format\n   * @param signersCount - The expected number of signers for this transaction.\n   * Only used for multisigned transactions.\n   * @deprecated Use autofill instead, provided for users familiar with v1\n   */\n  public async prepareTransaction(\n    transaction: SubmittableTransaction,\n    signersCount?: number,\n  ): ReturnType<Client['autofill']> {\n    return this.autofill(transaction, signersCount)\n  }\n\n  /**\n   * Retrieves the XRP balance of a given account address.\n   *\n   * @category Abstraction\n   *\n   * @example\n   * ```ts\n   * const client = new Client(wss://s.altnet.rippletest.net:51233)\n   * await client.connect()\n   * const balance = await client.getXrpBalance('rG1QQv2nh2gr7RCZ1P8YYcBUKCCN633jCn')\n   * console.log(balance)\n   * await client.disconnect()\n   * /// '200'\n   * ```\n   *\n   * @param address - The XRP address to retrieve the balance for.\n   * @param [options] - Additional options for fetching the balance (optional).\n   * @param [options.ledger_hash] - The hash of the ledger to retrieve the balance from (optional).\n   * @param [options.ledger_index] - The index of the ledger to retrieve the balance from (optional).\n   * @returns A promise that resolves with the XRP balance as a number.\n   */\n  public async getXrpBalance(\n    address: string,\n    options: {\n      ledger_hash?: string\n      ledger_index?: LedgerIndex\n    } = {},\n  ): Promise<number> {\n    const xrpRequest: AccountInfoRequest = {\n      command: 'account_info',\n      account: address,\n      ledger_index: options.ledger_index ?? 'validated',\n      ledger_hash: options.ledger_hash,\n    }\n    const response = await this.request(xrpRequest)\n    return dropsToXrp(response.result.account_data.Balance)\n  }\n\n  /**\n   * Get XRP/non-XRP balances for an account.\n   *\n   * @category Abstraction\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   *\n   * async function getAccountBalances(address) {\n   *   try {\n   *     const options = {\n   *       ledger_index: 'validated',\n   *       limit: 10\n   *     };\n   *\n   *     const balances = await xrplClient.getBalances(address, options);\n   *\n   *     console.log('Account Balances:');\n   *     balances.forEach((balance) => {\n   *       console.log(`Currency: ${balance.currency}`);\n   *       console.log(`Value: ${balance.value}`);\n   *       console.log(`Issuer: ${balance.issuer}`);\n   *       console.log('---');\n   *     });\n   *   } catch (error) {\n   *     console.error('Error retrieving account balances:', error);\n   *   }\n   * }\n   *\n   * const address = 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh';\n   * await getAccountBalances(address);\n   * await client.disconnect();\n   * ```\n   *\n   * @param address - Address of the account to retrieve balances for.\n   * @param options - Allows the client to specify a ledger_hash, ledger_index,\n   * filter by peer, and/or limit number of balances.\n   * @param options.ledger_index - Retrieve the account balances at a given\n   * ledger_index.\n   * @param options.ledger_hash - Retrieve the account balances at the ledger with\n   * a given ledger_hash.\n   * @param options.peer - Filter balances by peer.\n   * @param options.limit - Limit number of balances to return.\n   * @returns An array of XRP/non-XRP balances for the given account.\n   */\n  /* eslint-disable max-lines-per-function -- getBalances requires more lines to implement logic */\n  public async getBalances(\n    address: string,\n    options: {\n      ledger_hash?: string\n      ledger_index?: LedgerIndex\n      peer?: string\n      limit?: number\n    } = {},\n  ): Promise<\n    Array<{ value: string; currency: string; issuer?: string | undefined }>\n  > {\n    const balances: Balance[] = []\n\n    // get XRP balance\n    let xrpPromise: Promise<number> = Promise.resolve(0)\n    if (!options.peer) {\n      xrpPromise = this.getXrpBalance(address, {\n        ledger_hash: options.ledger_hash,\n        ledger_index: options.ledger_index,\n      })\n    }\n\n    // get non-XRP balances\n    const linesRequest: AccountLinesRequest = {\n      command: 'account_lines',\n      account: address,\n      ledger_index: options.ledger_index ?? 'validated',\n      ledger_hash: options.ledger_hash,\n      peer: options.peer,\n      limit: options.limit,\n    }\n    const linesPromise = this.requestAll(linesRequest)\n\n    // combine results\n    await Promise.all([xrpPromise, linesPromise]).then(\n      ([xrpBalance, linesResponses]) => {\n        const accountLinesBalance = linesResponses.flatMap((response) =>\n          formatBalances(response.result.lines),\n        )\n        if (xrpBalance !== 0) {\n          balances.push({ currency: 'XRP', value: xrpBalance.toString() })\n        }\n        balances.push(...accountLinesBalance)\n      },\n    )\n    return balances.slice(0, options.limit)\n  }\n  /* eslint-enable max-lines-per-function */\n\n  /**\n   * Fetch orderbook (buy/sell orders) between two currency pairs. This checks both sides of the orderbook\n   * by making two `order_book` requests (with the second reversing takerPays and takerGets). Returned offers are\n   * not normalized in this function, so either currency could be takerGets or takerPays.\n   *\n   * @category Abstraction\n   *\n   * @param currency1 - Specification of one currency involved. (With a currency code and optionally an issuer)\n   * @param currency2 - Specification of a second currency involved. (With a currency code and optionally an issuer)\n   * @param options - Options allowing the client to specify ledger_index,\n   * ledger_hash, filter by taker, and/or limit number of orders.\n   * @param options.ledger_index - Retrieve the orderbook at a given ledger_index.\n   * @param options.ledger_hash - Retrieve the orderbook at the ledger with a\n   * given ledger_hash.\n   * @param options.taker - Filter orders by taker.\n   * @param options.limit - The limit passed into each book_offers request.\n   * Can return more than this due to two calls being made. Defaults to 20.\n   * @returns An object containing buy and sell objects.\n   */\n\n  public async getOrderbook(\n    currency1: BookOfferCurrency,\n    currency2: BookOfferCurrency,\n    options: {\n      limit?: number\n      ledger_index?: LedgerIndex\n      ledger_hash?: string | null\n      taker?: string | null\n    } = {},\n  ): Promise<{\n    buy: BookOffer[]\n    sell: BookOffer[]\n  }> {\n    validateOrderbookOptions(options)\n\n    const request = createBookOffersRequest(currency1, currency2, options)\n\n    const directOfferResults = await requestAllOffers(this, request)\n    const reverseOfferResults = await requestAllOffers(\n      this,\n      reverseRequest(request),\n    )\n\n    const directOffers = extractOffers(directOfferResults)\n    const reverseOffers = extractOffers(reverseOfferResults)\n\n    const orders = combineOrders(directOffers, reverseOffers)\n\n    const { buy, sell } = separateBuySellOrders(orders)\n\n    /*\n     * Sort the orders\n     * for both buys and sells, lowest quality is closest to mid-market\n     * we sort the orders so that earlier orders are closer to mid-market\n     */\n    return {\n      buy: sortAndLimitOffers(buy, options.limit),\n      sell: sortAndLimitOffers(sell, options.limit),\n    }\n  }\n\n  /**\n   * Returns the index of the most recently validated ledger.\n   *\n   * @category Abstraction\n   *\n   * @returns The most recently validated ledger index.\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const ledgerIndex = await client.getLedgerIndex()\n   * console.log(ledgerIndex)\n   * // 884039\n   * ```\n   */\n  public async getLedgerIndex(): Promise<number> {\n    const ledgerResponse = await this.request({\n      command: 'ledger',\n      ledger_index: 'validated',\n    })\n    return ledgerResponse.result.ledger_index\n  }\n\n  /**\n   * The fundWallet() method is used to send an amount of XRP (usually 1000) to a new (randomly generated)\n   * or existing XRP Ledger wallet.\n   *\n   * @category Faucet\n   *\n   * @example\n   *\n   * Example 1: Fund a randomly generated wallet\n   * const { Client, Wallet } = require('xrpl')\n   *\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const { balance, wallet } = await client.fundWallet()\n   *\n   * Under the hood, this will use `Wallet.generate()` to create a new random wallet, then ask a testnet faucet\n   * To send it XRP on ledger to make it a real account. If successful, this will return the new account balance in XRP\n   * Along with the Wallet object to track the keys for that account. If you'd like, you can also re-fill an existing\n   * Account by passing in a Wallet you already have.\n   * ```ts\n   * const api = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\")\n   * await api.connect()\n   * const { wallet, balance } = await api.fundWallet()\n   * ```\n   *\n   * Example 2: Fund wallet using a custom faucet host and known wallet address\n   *\n   * `fundWallet` will try to infer the url of a faucet API from the network your client is connected to.\n   * There are hardcoded default faucets for popular test networks like testnet and devnet.\n   * However, if you're working with a newer or more obscure network, you may have to specify the faucetHost\n   * And faucetPath so `fundWallet` can ask that faucet to fund your wallet.\n   *\n   * ```ts\n   * const newWallet = Wallet.generate()\n   * const { balance, wallet  } = await client.fundWallet(newWallet, {\n   *       amount: '10',\n   *       faucetHost: 'https://custom-faucet.example.com',\n   *       faucetPath: '/accounts'\n   *     })\n   *     console.log(`Sent 10 XRP to wallet: ${address} from the given faucet. Resulting balance: ${balance} XRP`)\n   *   } catch (error) {\n   *     console.error(`Failed to fund wallet: ${error}`)\n   *   }\n   * }\n   * ```\n   *\n   * @param wallet - An existing XRPL Wallet to fund. If undefined or null, a new Wallet will be created.\n   * @param options - See below.\n   * @param options.faucetHost - A custom host for a faucet server. On devnet,\n   * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct server automatically. In other environments,\n   * or if you would like to customize the faucet host in devnet or testnet,\n   * you should provide the host using this option.\n   * @param options.faucetPath - A custom path for a faucet server. On devnet,\n   * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct path automatically. In other environments,\n   * or if you would like to customize the faucet path in devnet or testnet,\n   * you should provide the path using this option.\n   * Ex: client.fundWallet(null,{'faucet.altnet.rippletest.net', '/accounts'})\n   * specifies a request to 'faucet.altnet.rippletest.net/accounts' to fund a new wallet.\n   * @param options.amount - A custom amount to fund, if undefined or null, the default amount will be 1000.\n   * @returns A Wallet on the Testnet or Devnet that contains some amount of XRP,\n   * and that wallet's balance in XRP.\n   * @throws When either Client isn't connected or unable to fund wallet address.\n   */\n  public async fundWallet(\n    this: Client,\n    wallet?: Wallet | null,\n    options: FundingOptions = {},\n  ): Promise<{\n    wallet: Wallet\n    balance: number\n  }> {\n    if (!this.isConnected()) {\n      throw new RippledError('Client not connected, cannot call faucet')\n    }\n    const existingWallet = Boolean(wallet)\n\n    // Generate a new Wallet if no existing Wallet is provided or its address is invalid to fund\n    const walletToFund =\n      wallet && isValidClassicAddress(wallet.classicAddress)\n        ? wallet\n        : Wallet.generate()\n\n    // Create the POST request body\n    const postBody: FaucetRequestBody = {\n      destination: walletToFund.classicAddress,\n      xrpAmount: options.amount,\n      usageContext: options.usageContext,\n      userAgent: 'xrpl.js',\n    }\n\n    let startingBalance = 0\n    if (existingWallet) {\n      try {\n        startingBalance = Number(\n          await this.getXrpBalance(walletToFund.classicAddress),\n        )\n      } catch {\n        /* startingBalance remains what it was previously */\n      }\n    }\n\n    return requestFunding(\n      options,\n      this,\n      startingBalance,\n      walletToFund,\n      postBody,\n    )\n  }\n}\n\nexport { Client }\n", "import { BaseLedgerEntry, HasOptionalPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The unique id for the Amendments object https://xrpl.org/amendments-object.html#amendments-id-format\n */\nexport const AMENDMENTS_ID =\n  '7DB0788C020F02780A673DC74757F23823FA3014C1866E72CC4CD8B226CD6EF4'\n\nexport interface Majority {\n  Majority: {\n    /** The Amendment ID of the pending amendment. */\n    Amendment: string\n    /**\n     * The `close_time` field of the ledger version where this amendment most\n     * recently gained a majority.\n     */\n    CloseTime: number\n  }\n}\n\n/**\n * The Amendments object type contains a list of Amendments that are currently\n * active.\n *\n * @category Ledger Entries\n */\nexport default interface Amendments\n  extends BaseLedgerEntry,\n    HasOptionalPreviousTxnID {\n  LedgerEntryType: 'Amendments'\n  /**\n   * Array of 256-bit amendment IDs for all currently-enabled amendments. If\n   * omitted, there are no enabled amendments.\n   */\n  Amendments?: string[]\n  /**\n   * Array of objects describing the status of amendments that have majority\n   * support but are not yet enabled. If omitted, there are no pending\n   * amendments with majority support.\n   */\n  Majorities?: Majority[]\n  /**\n   * A bit-map of boolean flags. No flags are defined for the Amendments object\n   * type, so this value is always 0.\n   */\n  Flags: 0\n}\n", "import { BaseLedgerEntry, HasOptionalPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The unique id for the FeeSettings object https://xrpl.org/feesettings.html#feesettings-id-format\n */\nexport const FEE_SETTINGS_ID =\n  '4BC50C9B0D8515D3EAAE1E74B29A95804346C491EE1A95BF25E4AAB854A6A651'\n\nexport interface FeeSettingsPreAmendmentFields {\n  /** The transaction cost of the \"reference transaction\" in drops of XRP as hexadecimal. */\n  BaseFee: string\n  /** The BaseFee translated into \"fee units\". */\n  ReferenceFeeUnits: number\n  /** The base reserve for an account in the XRP Ledger, as drops of XRP. */\n  ReserveBase: number\n  /** The incremental owner reserve for owning objects, as drops of XRP. */\n  ReserveIncrement: number\n}\n\nexport interface FeeSettingsPostAmendmentFields {\n  /** The transaction cost of the \"reference transaction\" in drops of XRP as hexadecimal. */\n  BaseFeeDrops: string\n  /** The base reserve for an account in the XRP Ledger, as drops of XRP. */\n  ReserveBaseDrops: string\n  /** The incremental owner reserve for owning objects, as drops of XRP. */\n  ReserveIncrementDrops: string\n}\n\nexport interface FeeSettingsBase\n  extends BaseLedgerEntry,\n    HasOptionalPreviousTxnID {\n  LedgerEntryType: 'FeeSettings'\n  /**\n   * A bit-map of boolean flags for this object. No flags are defined for this type.\n   */\n  Flags: 0\n}\n\n/**\n * The FeeSettings object type contains the current base transaction cost and\n * reserve amounts as determined by fee voting.\n *\n * The fields will be based on the status of the `XRPFees` amendment.\n * - Before: {@link FeeSettingsPreAmendmentFields}\n * - After: {@link FeeSettingsPostAmendmentFields}\n *\n * @interface\n *\n * @category Ledger Entries\n */\ntype FeeSettings = FeeSettingsBase &\n  (FeeSettingsPreAmendmentFields | FeeSettingsPostAmendmentFields)\n\nexport default FeeSettings\n", "import { BaseLedgerEntry, HasOptionalPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The unique id for the nUNL object https://xrpl.org/negativeunl.html#negativeunl-id-format\n */\nexport const NEGATIVE_UNL_ID =\n  '2E8A59AA9D3B5B186B0B9E0F62E6C02587CA74A4D778938E957B6357D364B244'\n\n/**\n * The NegativeUNL object type contains the current status of the Negative UNL,\n * a list of trusted validators currently believed to be offline.\n *\n * @category Ledger Entries\n */\nexport default interface NegativeUNL\n  extends BaseLedgerEntry,\n    HasOptionalPreviousTxnID {\n  LedgerEntryType: 'NegativeUNL'\n  /**\n   * A list of trusted validators that are currently disabled.\n   */\n  DisabledValidators?: Array<{\n    FirstLedgerSequence: number\n    PublicKey: string\n  }>\n  /**\n   * The public key of a trusted validator that is scheduled to be disabled in\n   * the next flag ledger.\n   */\n  ValidatorToDisable?: string\n  /**\n   * The public key of a trusted validator in the Negative UNL that is\n   * scheduled to be re-enabled in the next flag ledger.\n   */\n  ValidatorToReEnable?: string\n}\n", "import { IssuedCurrencyAmount } from '../common'\n\nimport { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The RippleState object type connects two accounts in a single currency.\n *\n * @category Ledger Entries\n */\nexport default interface RippleState extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'RippleState'\n  /** A bit-map of boolean options enabled for this object. */\n  Flags: number\n  /**\n   * The balance of the trust line, from the perspective of the low account. A\n   * negative balance indicates that the low account has issued currency to the\n   * high account. The issuer is always the neutral value ACCOUNT_ONE.\n   */\n  Balance: IssuedCurrencyAmount\n  /**\n   * The limit that the low account has set on the trust line. The issuer is\n   * the address of the low account that set this limit.\n   */\n  LowLimit: IssuedCurrencyAmount\n  /**\n   * The limit that the high account has set on the trust line. The issuer is\n   * the address of the high account that set this limit.\n   */\n  HighLimit: IssuedCurrencyAmount\n  /**\n   * A hint indicating which page of the low account's owner directory links to\n   * this object, in case the directory consists of multiple pages.\n   */\n  LowNode?: string\n  /**\n   * A hint indicating which page of the high account's owner directory links\n   * to this object, in case the directory consists of multiple pages.\n   */\n  HighNode?: string\n  /**\n   * The inbound quality set by the low account, as an integer in the implied\n   * ratio LowQualityIn:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  LowQualityIn?: number\n  /**\n   * The outbound quality set by the low account, as an integer in the implied\n   * ratio LowQualityOut:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  LowQualityOut?: number\n  /**\n   * The inbound quality set by the high account, as an integer in the implied\n   * ratio HighQualityIn:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  HighQualityIn?: number\n  /**\n   * The outbound quality set by the high account, as an integer in the implied\n   * ratio HighQualityOut:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  HighQualityOut?: number\n}\n\nexport enum RippleStateFlags {\n  // True, if entry counts toward reserve.\n  lsfLowReserve = 0x00010000,\n  lsfHighReserve = 0x00020000,\n  lsfLowAuth = 0x00040000,\n  lsfHighAuth = 0x00080000,\n  lsfLowNoRipple = 0x00100000,\n  lsfHighNoRipple = 0x00200000,\n  // True, low side has set freeze flag\n  lsfLowFreeze = 0x00400000,\n  // True, high side has set freeze flag\n  lsfHighFreeze = 0x00800000,\n  // True, trust line to AMM. Used by client apps to identify payments via AMM.\n  lsfAMMNode = 0x01000000,\n  // True, low side has set deep freeze flag\n  lsfLowDeepFreeze = 0x02000000,\n  // True, high side has set deep freeze flag\n  lsfHighDeepFreeze = 0x04000000,\n}\n", "import { SignerEntry } from '../common'\n\nimport { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The SignerList object type represents a list of parties that, as a group,\n * are authorized to sign a transaction in place of an individual account. You\n * can create, replace, or remove a signer list using a SignerListSet\n * transaction.\n *\n * @category Ledger Entries\n */\nexport default interface SignerList extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'SignerList'\n  /**\n   * A bit-map of Boolean flags enabled for this signer list. For more\n   * information, see SignerList Flags.\n   */\n  Flags: number\n  /**\n   * A hint indicating which page of the owner directory links to this object,\n   * in case the directory consists of multiple pages.\n   */\n  OwnerNode: string\n  /**\n   * An array of Signer Entry objects representing the parties who are part of\n   * this signer list.\n   */\n  SignerEntries: SignerEntry[]\n  /**\n   * An ID for this signer list. Currently always set to 0. If a future\n   * amendment allows multiple signer lists for an account, this may change.\n   */\n  SignerListID: number\n  /**\n   * A target number for signer weights. To produce a valid signature for the\n   * owner of this SignerList, the signers must provide valid signatures whose\n   * weights sum to this value or more.\n   */\n  SignerQuorum: number\n}\n\nexport enum SignerListFlags {\n  // True, uses only one OwnerCount\n  lsfOneOwnerCount = 0x00010000,\n}\n", "import AccountRoot, {\n  AccountRootFlags,\n  AccountRootFlagsInterface,\n} from './AccountRoot'\nimport Amendments, { Majority, AMENDMENTS_ID } from './Amendments'\nimport AMM, { VoteSlot } from './AMM'\nimport Bridge from './Bridge'\nimport Check from './Check'\nimport Credential from './Credential'\nimport DepositPreauth from './DepositPreauth'\nimport DID from './DID'\nimport DirectoryNode from './DirectoryNode'\nimport Escrow from './Escrow'\nimport FeeSettings, {\n  FeeSettingsPreAmendmentFields,\n  FeeSettingsPostAmendmentFields,\n  FEE_SETTINGS_ID,\n} from './FeeSettings'\nimport { Ledger, LedgerV1 } from './Ledger'\nimport { LedgerEntry, LedgerEntryFilter } from './LedgerEntry'\nimport LedgerHashes from './LedgerHashes'\nimport { MPToken } from './MPToken'\nimport { MPTokenIssuance } from './MPTokenIssuance'\nimport NegativeUNL, { NEGATIVE_UNL_ID } from './NegativeUNL'\nimport { NFTokenOffer } from './NFTokenOffer'\nimport { NFToken, NFTokenPage } from './NFTokenPage'\nimport Offer, { OfferFlags } from './Offer'\nimport Oracle from './Oracle'\nimport PayChannel from './PayChannel'\nimport RippleState, { RippleStateFlags } from './RippleState'\nimport SignerList, { SignerListFlags } from './SignerList'\nimport Ticket from './Ticket'\nimport XChainOwnedClaimID from './XChainOwnedClaimID'\nimport XChainOwnedCreateAccountClaimID from './XChainOwnedCreateAccountClaimID'\n\nexport {\n  AccountRoot,\n  AccountRootFlags,\n  AccountRootFlagsInterface,\n  AMENDMENTS_ID,\n  Amendments,\n  AMM,\n  Bridge,\n  Check,\n  Credential,\n  DepositPreauth,\n  DirectoryNode,\n  DID,\n  Escrow,\n  FEE_SETTINGS_ID,\n  FeeSettings,\n  FeeSettingsPreAmendmentFields,\n  FeeSettingsPostAmendmentFields,\n  Ledger,\n  LedgerV1,\n  LedgerEntryFilter,\n  LedgerEntry,\n  LedgerHashes,\n  Majority,\n  NEGATIVE_UNL_ID,\n  NegativeUNL,\n  MPTokenIssuance,\n  MPToken,\n  NFTokenOffer,\n  NFTokenPage,\n  NFToken,\n  Offer,\n  OfferFlags,\n  Oracle,\n  PayChannel,\n  RippleState,\n  RippleStateFlags,\n  SignerList,\n  SignerListFlags,\n  Ticket,\n  XChainOwnedClaimID,\n  XChainOwnedCreateAccountClaimID,\n  VoteSlot,\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=index.js.map", "/**\n * LedgerEntry type definitions are exported in their own namespace to prevent\n * collisions of the DepositPreauth SLE and Transaction. LedgerEntries are used\n * by the client less often, and in most scenarios, like when parsing a\n * response, the client won't need to import the type. If it is required to use\n * a Ledger Entry, import `LedgerEntry`, and access individual ledger entry\n * types on the `LedgerEntry` namespace.\n */\nexport * as LedgerEntry from './ledger'\nexport {\n  parseAccountRootFlags,\n  setTransactionFlagsToNumber,\n  convertTxFlagsToNumber,\n  parseTransactionFlags,\n} from './utils/flags'\nexport * from './methods'\nexport * from './transactions'\nexport * from './common'\n", "import {\n  bytesToHex,\n  concat,\n  hexToBytes,\n  randomBytes,\n} from '@xrplf/isomorphic/utils'\n\nfunction randomEntropy(): Uint8Array {\n  return randomBytes(16)\n}\n\nfunction calculateChecksum(position: number, value: number): number {\n  return (value * (position * 2 + 1)) % 9\n}\n\nfunction checkChecksum(\n  position: number,\n  value: number | string,\n  checksum?: number,\n): boolean {\n  let normalizedChecksum: number\n  let normalizedValue: number\n\n  if (typeof value === 'string') {\n    if (value.length !== 6) {\n      throw new Error('value must have a length of 6')\n    }\n    normalizedChecksum = parseInt(value.slice(5), 10)\n    normalizedValue = parseInt(value.slice(0, 5), 10)\n  } else {\n    if (typeof checksum !== 'number') {\n      throw new Error('checksum must be a number when value is a number')\n    }\n    normalizedChecksum = checksum\n    normalizedValue = value\n  }\n  return (normalizedValue * (position * 2 + 1)) % 9 === normalizedChecksum\n}\n\nfunction entropyToSecret(entropy: Uint8Array): string[] {\n  const len = new Array(Math.ceil(entropy.length / 2))\n  const chunks = Array.from(len, (_a, chunk) => {\n    const buffChunk = entropy.slice(chunk * 2, (chunk + 1) * 2)\n    const no = parseInt(bytesToHex(buffChunk), 16)\n    const fill = '0'.repeat(5 - String(no).length)\n    return fill + String(no) + String(calculateChecksum(chunk, no))\n  })\n  if (chunks.length !== 8) {\n    throw new Error('Chucks must have 8 digits')\n  }\n  return chunks\n}\n\nfunction randomSecret(): string[] {\n  return entropyToSecret(randomEntropy())\n}\n\nfunction secretToEntropy(secret: string[]): Uint8Array {\n  return concat(\n    secret.map((chunk, i) => {\n      const no = Number(chunk.slice(0, 5))\n      const checksum = Number(chunk.slice(5))\n      if (chunk.length !== 6) {\n        throw new Error('Invalid secret: number invalid')\n      }\n      if (!checkChecksum(i, no, checksum)) {\n        throw new Error('Invalid secret part: checksum invalid')\n      }\n      const hex = `0000${no.toString(16)}`.slice(-4)\n      return hexToBytes(hex)\n    }),\n  )\n}\n\nfunction parseSecretString(secret: string): string[] {\n  const normalizedSecret = secret.replace(/[^0-9]/gu, '')\n  if (normalizedSecret.length !== 48) {\n    throw new Error(\n      'Invalid secret string (should contain 8 blocks of 6 digits',\n    )\n  }\n  return Array.from(new Array(8), (_a, index) => {\n    return normalizedSecret.slice(index * 6, (index + 1) * 6)\n  })\n}\n\nexport {\n  randomEntropy,\n  randomSecret,\n  entropyToSecret,\n  secretToEntropy,\n  calculateChecksum,\n  checkChecksum,\n  parseSecretString,\n}\n", "import { deriveAddress, deriveKeypair, generateSeed } from 'ripple-keypairs'\n\nimport {\n  entropyToSecret,\n  parseSecretString,\n  randomSecret,\n  secretToEntropy,\n} from '../utils'\n\n/* Types ==================================================================== */\n\nexport interface Keypair {\n  publicKey: string\n  privateKey: string\n}\n\ninterface AccountData {\n  familySeed: string\n  address: string\n  keypair: Keypair\n}\n\n/* Class ==================================================================== */\n\nexport class Account {\n  private readonly _secret: string[]\n  private readonly _account: AccountData = {\n    familySeed: '',\n    address: '',\n    keypair: {\n      publicKey: '',\n      privateKey: '',\n    },\n  }\n\n  constructor(secretNumbers?: string[] | string | Uint8Array) {\n    if (typeof secretNumbers === 'string') {\n      this._secret = parseSecretString(secretNumbers)\n    } else if (Array.isArray(secretNumbers)) {\n      this._secret = secretNumbers\n    } else if (secretNumbers instanceof Uint8Array) {\n      this._secret = entropyToSecret(secretNumbers)\n    } else {\n      this._secret = randomSecret()\n    }\n\n    validateLengths(this._secret)\n    this.derive()\n  }\n\n  getSecret(): string[] {\n    return this._secret\n  }\n\n  getSecretString(): string {\n    return this._secret.join(' ')\n  }\n\n  getAddress(): string {\n    return this._account.address\n  }\n\n  getFamilySeed(): string {\n    return this._account.familySeed\n  }\n\n  getKeypair(): Keypair {\n    return this._account.keypair\n  }\n\n  toString(): string {\n    return this.getSecretString()\n  }\n\n  private derive(): void {\n    try {\n      const entropy = secretToEntropy(this._secret)\n      this._account.familySeed = generateSeed({ entropy })\n      this._account.keypair = deriveKeypair(this._account.familySeed)\n      this._account.address = deriveAddress(this._account.keypair.publicKey)\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) {\n        message = error.message\n      }\n      // we'll proceed, but let's report it\n      throw new Error(message)\n    }\n  }\n}\n\nfunction validateLengths(secretNumbers: string[]): void {\n  if (secretNumbers.length !== 8) {\n    throw new Error('Secret must have 8 numbers')\n  }\n  secretNumbers.forEach((num) => {\n    if (num.length !== 6) {\n      throw new Error('Each secret number must be 6 digits')\n    }\n  })\n}\n", "export * from './schema/Account'\nexport * from './utils'\n", "import { Account } from '@xrplf/secret-numbers'\n\nimport ECDSA from '../ECDSA'\n\nimport { Wallet } from '.'\n\n/**\n * Derives a wallet from secret numbers.\n * NOTE: This uses a default encoding algorithm of secp256k1 to match the popular wallet\n * [Xumm (aka Xaman)](https://xumm.app/)'s behavior.\n * This may be different from the DEFAULT_ALGORITHM for other ways to generate a Wallet.\n *\n * @param secretNumbers - A string consisting of 8 times 6 numbers (whitespace delimited) used to derive a wallet.\n * @param opts - (Optional) Options to derive a Wallet.\n * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n * @param opts.algorithm - The digital signature algorithm to generate an address for.\n * @returns A Wallet derived from secret numbers.\n * @throws ValidationError if unable to derive private key from secret number input.\n */\nexport function walletFromSecretNumbers(\n  secretNumbers: string[] | string,\n  opts?: { masterAddress?: string; algorithm?: ECDSA },\n): Wallet {\n  const secret = new Account(secretNumbers).getFamilySeed()\n  const updatedOpts: { masterAddress?: string; algorithm?: ECDSA } = {\n    masterAddress: undefined,\n    algorithm: undefined,\n  }\n  // Use secp256k1 since that's the algorithm used by popular wallets like Xumm when generating secret number accounts\n  if (opts === undefined) {\n    updatedOpts.algorithm = ECDSA.secp256k1\n  } else {\n    updatedOpts.masterAddress = opts.masterAddress\n    updatedOpts.algorithm = opts.algorithm ?? ECDSA.secp256k1\n  }\n  return Wallet.fromSecret(secret, updatedOpts)\n}\n", "export { Client, ClientOptions } from './client'\n\nexport * from './models'\n\nexport * from './utils'\n\nexport { default as ECDSA } from './ECDSA'\n\nexport * from './errors'\n\nexport { FundingOptions } from './Wallet/fundWallet'\nexport { Wallet } from './Wallet'\n\nexport { walletFromSecretNumbers } from './Wallet/walletFromSecretNumbers'\n\nexport { keyToRFC1751Mnemonic, rfc1751MnemonicToKey } from './Wallet/rfc1751'\n\nexport * from './Wallet/signer'\n"],
  "mappings": "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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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AA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAK;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAC5D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC5D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC7D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAK;AAAA,MAC5D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC7D;AAAA,MAAM;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC3D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAM;AAAA,MAC5D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC/D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAC9D;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAM;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAC9D;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAC5D;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChC;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,M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",
  "names": ["AccountRootFlags", "padding", "alphabet", "BigNumber", "compare", "format", "quality", "AccountSetAsfFlags", "AccountSetTfFlags", "AMMClawbackFlags", "AMMDepositFlags", "AMMWithdrawFlags", "MPTokenAuthorizeFlags", "MPTokenIssuanceCreateFlags", "MPTokenIssuanceSetFlags", "NFTokenCreateOfferFlags", "NFTokenMintFlags", "OfferCreateFlags", "PaymentFlags", "PaymentChannelClaimFlags", "TrustSetFlags", "XChainModifyBridgeFlags", "K", "window", "wbits", "endo", "ecdsa", "tv5", "c1", "c2", "Prefix", "eddsa", "_1n", "nftokenID", "HashPrefix", "NodeType", "OfferFlags", "ECDSA", "EnableAmendmentFlags", "FaucetNetwork", "aValue", "bValue", "transaction", "RippleStateFlags", "SignerListFlags"]
}
